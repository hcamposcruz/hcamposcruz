{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-convenio86-production"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoKenanContestada')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_contestada",
								"type": "DatasetReference"
							},
							"name": "srcArqKenanContestada"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_FATURA_CON_KENAN",
								"type": "DatasetReference"
							},
							"name": "GravaTabFaturaConKenan"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCONTA_COBRANCA as string,\n\t\tCNPJ_CPF as string,\n\t\tCATEGORIA_CLIENTE as string,\n\t\t{UF_COBRANÃ‡A} as string,\n\t\tID_FATURA as string,\n\t\tID_FATURA_ORIGEM as string,\n\t\tDATA_VENCTO_ORIGINAL as date 'dd/MM/yyyy',\n\t\tDATA_VENCTO_BOLETO_OU_BAIXA as date 'dd/MM/yyyy',\n\t\tVALOR_FATURA as string,\n\t\tVALOR_CONTESTADO as string,\n\t\tVALOR_PAGAMENTO as string,\n\t\tVALOR_PAGTO_CREDITO_ANTERIOR as string,\n\t\tDATA_PAGTO as date 'dd/MM/yyyy',\n\t\tDATA_FECHAMENTO_FATURA as timestamp 'dd/MM/yyyy HH:mm:ss',\n\t\tDATA_EMISSAO as timestamp 'dd/MM/yyyy HH:mm:ss',\n\t\tDATA_AJUSTE as date 'dd/MM/yyyy'\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['kenan/validados_a_processar','kenan/processados']) ~> srcArqKenanContestada\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(28,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqKenanContestada derive(SyntheticKey = 1,\n\t\tVALOR_FATURA = toDecimal(replace(toString(VALOR_FATURA), ',' , '.')),\n\t\tVALOR_CONTESTADO = toDecimal(replace(toString(VALOR_CONTESTADO), ',' , '.')),\n\t\tVALOR_PAGAMENTO = toDecimal(replace(toString(VALOR_PAGAMENTO), ',' , '.')),\n\t\tVALOR_PAGTO_CREDITO_ANTERIOR = toDecimal(replace(toString(VALOR_PAGTO_CREDITO_ANTERIOR), ',' , '.'))) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_FATURA_CON_KENAN as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCONTA_COBRANCA as string,\n\t\tCPF_CNPJ as string,\n\t\tCATEGORIA_CLIENTE as string,\n\t\tUF_COBRANCA as string,\n\t\tID_FATURA as string,\n\t\tID_FATURA_ORIGEM as string,\n\t\tDT_VENCTO_ORIGINAL as date,\n\t\tDT_VENCTO_BOLETO_BAIXA as date,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tVLR_CONTESTADO as decimal(15,2),\n\t\tVLR_PAGAMENTO as decimal(15,2),\n\t\tVLR_PGTO_CREDITO_ANT as decimal(15,2),\n\t\tDT_PAGAMENTO as date,\n\t\tDT_FECHA_FATURA as timestamp,\n\t\tDT_EMISSAO as timestamp,\n\t\tDT_AJUSTE as date,\n\t\tSTEP_EXECUTION_ID as decimal(19,0),\n\t\tJOB_EXECUTION_ID as decimal(19,0),\n\t\tDT_REFERENCIA as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCONTA_COBRANCA,\n\t\tCPF_CNPJ = CNPJ_CPF,\n\t\tCATEGORIA_CLIENTE,\n\t\tID_FATURA,\n\t\tID_FATURA_ORIGEM,\n\t\tDT_VENCTO_ORIGINAL = DATA_VENCTO_ORIGINAL,\n\t\tDT_VENCTO_BOLETO_BAIXA = DATA_VENCTO_BOLETO_OU_BAIXA,\n\t\tVLR_FATURA = VALOR_FATURA,\n\t\tVLR_CONTESTADO = VALOR_CONTESTADO,\n\t\tVLR_PAGAMENTO = VALOR_PAGAMENTO,\n\t\tVLR_PGTO_CREDITO_ANT = VALOR_PAGTO_CREDITO_ANTERIOR,\n\t\tDT_PAGAMENTO = DATA_PAGTO,\n\t\tDT_FECHA_FATURA = DATA_FECHAMENTO_FATURA,\n\t\tDT_EMISSAO = DATA_EMISSAO,\n\t\tDT_AJUSTE = DATA_AJUSTE,\n\t\tUF_COBRANCA = {UF_COBRANÃ‡A}\n\t)) ~> GravaTabFaturaConKenan"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoKenanDetalhe')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_detalhe",
								"type": "DatasetReference"
							},
							"name": "srcArqKenanDetalhe"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_FATURA_DET_KENAN",
								"type": "DatasetReference"
							},
							"name": "GravaTabContestacoesAtlysRcbl"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCONTA_COBRANCA as string,\n\t\tCNPJ_CPF as string,\n\t\tID_FATURA as string,\n\t\tOPEN_ITEM_ID as string,\n\t\tID_DETALHE as string,\n\t\tID_OPERADORA as string,\n\t\tDESCR_OPERADORA as string,\n\t\tTIPO_DETALHE as string,\n\t\tDESCR_DETALHE as string,\n\t\tTIPO_INSTANCIA as string,\n\t\tINSTANCIA as string,\n\t\tVALOR_BRUTO as string,\n\t\tVALOR_CONTESTADO as string,\n\t\tVALOR_IMPOSTO_ICMS as string,\n\t\tVALOR_OUTROS_IMPOSTOS as string,\n\t\tVALOR_IMPOSTO_CONTESTADO as string,\n\t\tCC_CR_AJUSTE as string,\n\t\tCC_DB_AJUSTE as string,\n\t\tCC_CREDITO_FAT as string,\n\t\tCC_DEBITO_FAT as string,\n\t\tCC_CREDITO_IMPOSTO as string,\n\t\tCC_DEBITO_IMPOSTO as string,\n\t\tDESCR_CONTESTACAO as string,\n\t\tDESCR_MOTIVO as string,\n\t\tDATA_CONTESTACAO as timestamp 'dd/MM/yyyy HH:mm:ss',\n\t\tACCOUNT_NO as string,\n\t\tSUBTYPE_CODE as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['kenan/validados_a_processar','kenan/processados']) ~> srcArqKenanDetalhe\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqKenanDetalhe derive(SyntheticKey = 1,\n\t\tID_DETALHE = toDecimal(replace(toString(ID_DETALHE), ',' , '.')),\n\t\tVALOR_BRUTO = toDecimal(replace(toString(VALOR_BRUTO), ',' , '.')),\n\t\tVALOR_CONTESTADO = toDecimal(replace(toString(VALOR_CONTESTADO), ',' , '.')),\n\t\tVALOR_IMPOSTO_ICMS = toDecimal(replace(toString(VALOR_IMPOSTO_ICMS), ',' , '.')),\n\t\tVALOR_OUTROS_IMPOSTOS = toDecimal(replace(toString(VALOR_OUTROS_IMPOSTOS), ',' , '.')),\n\t\tVALOR_IMPOSTO_CONTESTADO = toDecimal(replace(toString(VALOR_IMPOSTO_CONTESTADO), ',' , '.')),\n\t\tSUBTYPE_CODE = toDecimal(replace(toString(SUBTYPE_CODE), ',' , '.'))) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_FATURA_DET_KENAN as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCONTA_COBRANCA as string,\n\t\tCPF_CNPJ as string,\n\t\tID_FATURA as string,\n\t\tID_OPEN_ITEM as string,\n\t\tID_DETALHE as decimal(10,0),\n\t\tID_OPERADORA as string,\n\t\tDESC_OPERADORA as string,\n\t\tTIPO_DETALHE as string,\n\t\tDESC_DETALHE as string,\n\t\tTIPO_INSTANCIA as string,\n\t\tNUM_INSTANCIA as string,\n\t\tVLR_BRUTO as decimal(15,2),\n\t\tVLR_CONTESTADO as decimal(15,2),\n\t\tVLR_IMPOSTO_ICMS as decimal(15,2),\n\t\tVLR_OUTROS_IMPOSTOS as decimal(15,2),\n\t\tVLR_IMPOSTO_CONSTESTADO as decimal(15,2),\n\t\tCC_CR_AJUSTE as string,\n\t\tCC_DB_AJUSTE as string,\n\t\tCC_CREDITO_FAT as string,\n\t\tCC_DEBITO_FAT as string,\n\t\tCC_CREDITO_IMPOSTO as string,\n\t\tCC_DEBITO_IMPOSTO as string,\n\t\tDESC_CONTESTACAO as string,\n\t\tDESC_MOTIVO as string,\n\t\tDT_CONTESTACAO as date,\n\t\tACCOUNT_NO as string,\n\t\tSUBTYPE_CODE as decimal(19,0),\n\t\tSTEP_EXECUTION_ID as decimal(19,0),\n\t\tJOB_EXECUTION_ID as decimal(19,0)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCONTA_COBRANCA,\n\t\tCPF_CNPJ = CNPJ_CPF,\n\t\tID_FATURA,\n\t\tID_OPEN_ITEM = OPEN_ITEM_ID,\n\t\tID_DETALHE,\n\t\tID_OPERADORA,\n\t\tDESC_OPERADORA = DESCR_OPERADORA,\n\t\tTIPO_DETALHE,\n\t\tDESC_DETALHE = DESCR_DETALHE,\n\t\tTIPO_INSTANCIA,\n\t\tNUM_INSTANCIA = INSTANCIA,\n\t\tVLR_BRUTO = VALOR_BRUTO,\n\t\tVLR_CONTESTADO = VALOR_CONTESTADO,\n\t\tVLR_IMPOSTO_ICMS = VALOR_IMPOSTO_ICMS,\n\t\tVLR_OUTROS_IMPOSTOS = VALOR_OUTROS_IMPOSTOS,\n\t\tVLR_IMPOSTO_CONSTESTADO = VALOR_IMPOSTO_CONTESTADO,\n\t\tCC_CR_AJUSTE,\n\t\tCC_DB_AJUSTE,\n\t\tCC_CREDITO_FAT,\n\t\tCC_DEBITO_FAT,\n\t\tCC_CREDITO_IMPOSTO,\n\t\tCC_DEBITO_IMPOSTO,\n\t\tDESC_CONTESTACAO = DESCR_CONTESTACAO,\n\t\tDESC_MOTIVO = DESCR_MOTIVO,\n\t\tDT_CONTESTACAO = DATA_CONTESTACAO,\n\t\tACCOUNT_NO,\n\t\tSUBTYPE_CODE\n\t)) ~> GravaTabContestacoesAtlysRcbl"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoKenanItem')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_Item",
								"type": "DatasetReference"
							},
							"name": "srcArqKenanItem"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_FATURA_ITEM_KENAN",
								"type": "DatasetReference"
							},
							"name": "GravaTabContestacoesAtlysRcbl"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCONTA_COBRANCA as string,\n\t\tCNPJ_CPF as string,\n\t\tNUMERO_FATURA as string,\n\t\tOPEN_ITEM_ID as string,\n\t\tDESCR_OPEN_ITEM as string,\n\t\tVALOR_ITEM as string,\n\t\tVALOR_CONTESTADO as string,\n\t\tVALOR_PAGO_ITEM as string,\n\t\tFECHAMENTO_SALDO_ABERTO_ITEM as timestamp 'dd/MM/yyyy HH:mm:ss',\n\t\tNOTA_FISCAL as string,\n\t\tUF_NF as string,\n\t\tSERIE_NF as string,\n\t\tSUBSERIE_NF as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['kenan/validados_a_processar','kenan/processados']) ~> srcArqKenanItem\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqKenanItem derive(SyntheticKey = 1,\n\t\tVALOR_ITEM = toDecimal(replace(toString(VALOR_ITEM), ',' , '.')),\n\t\tVALOR_CONTESTADO = toDecimal(replace(toString(VALOR_CONTESTADO), ',' , '.')),\n\t\tVALOR_PAGO_ITEM = toDecimal(replace(toString(VALOR_PAGO_ITEM), ',' , '.'))) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_FATURA_ITEM_KENAN as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCONTA_COBRANCA as string,\n\t\tCPF_CNPJ as string,\n\t\tID_FATURA as string,\n\t\tID_OPEN_ITEM as string,\n\t\tDESC_OPEN_ITEM as string,\n\t\tVLR_ITEM as decimal(15,2),\n\t\tVLR_CONTESTADO as decimal(15,2),\n\t\tVLR_PAGO_ITEM as decimal(15,2),\n\t\tDT_FECHA_SALDO_ITEM as date,\n\t\tNOTA_FISCAL as string,\n\t\tUF_NF as string,\n\t\tSERIE_NF as string,\n\t\tSUBSERIE_NF as string,\n\t\tSTEP_EXECUTION_ID as decimal(19,0),\n\t\tJOB_EXECUTION_ID as decimal(19,0)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCONTA_COBRANCA,\n\t\tCPF_CNPJ = CNPJ_CPF,\n\t\tID_FATURA = NUMERO_FATURA,\n\t\tID_OPEN_ITEM = OPEN_ITEM_ID,\n\t\tDESC_OPEN_ITEM = DESCR_OPEN_ITEM,\n\t\tVLR_ITEM = VALOR_ITEM,\n\t\tVLR_CONTESTADO = VALOR_CONTESTADO,\n\t\tVLR_PAGO_ITEM = VALOR_PAGO_ITEM,\n\t\tDT_FECHA_SALDO_ITEM = FECHAMENTO_SALDO_ABERTO_ITEM,\n\t\tNOTA_FISCAL,\n\t\tUF_NF,\n\t\tSERIE_NF,\n\t\tSUBSERIE_NF\n\t)) ~> GravaTabContestacoesAtlysRcbl"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoRecebiveisAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atlys_rcbl",
								"type": "DatasetReference"
							},
							"name": "srcArqAtlysRcbl"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_ATLYS_RCBL",
								"type": "DatasetReference"
							},
							"name": "GravaTabContestacoesAtlysRcbl"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCLIENTE_ID as string,\n\t\tNOMECLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCLASSE_RECEBER as string,\n\t\tOPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tNUMERO_FATURA as string,\n\t\tMES_ANO_REFERENTE as string,\n\t\tVALOR_DOCTO_ORIGINAL as string,\n\t\tFATURA_ATRIBUIDA as string,\n\t\tMESANOFATURA as string,\n\t\tVALOR_FATURA as string,\n\t\tSALDO_DEVIDO_ORIG as string,\n\t\tDATA_EMISSAO_FATURA as date 'yyyyMMdd',\n\t\tVALOR_TOTAL_PAGAMENTO as string,\n\t\tDATA_FEBRABAN as date 'yyyyMMdd',\n\t\tVALOR_ATRIBUICAO as string,\n\t\tUF as string,\n\t\tDATA_ATRIBUICAO_PGTO as date 'yyyyMMdd',\n\t\tHORA_ATRIBUICAO_PGTO as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['atlys/validados_a_processar','atlys/processados']) ~> srcArqAtlysRcbl\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqAtlysRcbl derive(SyntheticKey = 1,\n\t\tNEW_VALOR_DOCTO_ORIGINAL = replace(VALOR_DOCTO_ORIGINAL, ',' , '.'),\n\t\tNEW_VALOR_FATURA = replace(VALOR_FATURA, ',' , '.'),\n\t\tNEW_SALDO_DEVIDO_ORIG = replace(SALDO_DEVIDO_ORIG, ',' , '.'),\n\t\tNEW_VALOR_TOTAL_PAGAMENTO = replace(VALOR_TOTAL_PAGAMENTO, ',' , '.'),\n\t\tNEW_VALOR_ATRIBUICAO = replace(VALOR_ATRIBUICAO, ',' , '.')) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_ATLYS_RCBL as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOME_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCLASSE_RECEBER as string,\n\t\tOPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tNUMERO_FATURA as string,\n\t\tMES_ANO_REFERENTE as string,\n\t\tVALOR_DOCTO_ORIGINAL as decimal(15,2),\n\t\tFATURA_ATRIBUIDA as string,\n\t\tMES_ANO_FATURA as string,\n\t\tVALOR_FATURA as decimal(15,2),\n\t\tSALDO_DEVIDO_ORIG as decimal(15,2),\n\t\tDATA_EMISSAO_FATURA as timestamp,\n\t\tVALOR_TOTAL_PAGAMENTO as decimal(15,2),\n\t\tDATA_FEBRABAN as timestamp,\n\t\tVALOR_ATRIBUICAO as decimal(15,2),\n\t\tUF as string,\n\t\tDATA_ATRIBUICAO_PGTO as timestamp,\n\t\tHORA_ATRIBUICAO_PGTO as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tID_CLIENTE = CLIENTE_ID,\n\t\tNOME_CLIENTE = NOMECLIENTE,\n\t\tCNPJ_CPF,\n\t\tCONTA_CLIENTE,\n\t\tCLASSE_RECEBER,\n\t\tOPERADORA,\n\t\tCODIGO_OPERADORA,\n\t\tNUMERO_FATURA,\n\t\tMES_ANO_REFERENTE,\n\t\tVALOR_DOCTO_ORIGINAL = NEW_VALOR_DOCTO_ORIGINAL,\n\t\tFATURA_ATRIBUIDA,\n\t\tMES_ANO_FATURA = MESANOFATURA,\n\t\tVALOR_FATURA = NEW_VALOR_FATURA,\n\t\tSALDO_DEVIDO_ORIG = NEW_SALDO_DEVIDO_ORIG,\n\t\tDATA_EMISSAO_FATURA,\n\t\tVALOR_TOTAL_PAGAMENTO = NEW_VALOR_TOTAL_PAGAMENTO,\n\t\tDATA_FEBRABAN,\n\t\tVALOR_ATRIBUICAO = NEW_VALOR_ATRIBUICAO,\n\t\tUF,\n\t\tDATA_ATRIBUICAO_PGTO,\n\t\tHORA_ATRIBUICAO_PGTO\n\t)) ~> GravaTabContestacoesAtlysRcbl"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoVivoNextK16')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VivoNext"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_vivo_next_K16",
								"type": "DatasetReference"
							},
							"name": "srcArqVivoNextK16"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cvtb_vivo_next_k16",
								"type": "DatasetReference"
							},
							"name": "GravaTabVivoNextK16"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						},
						{
							"name": "SelecaoColunas"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tProp_0 as string,\n\t\tProp_1 as string,\n\t\tProp_2 as string,\n\t\tProp_3 as string,\n\t\tProp_4 as string,\n\t\tProp_5 as string,\n\t\tProp_6 as string,\n\t\tProp_7 as string,\n\t\tProp_8 as string,\n\t\tProp_9 as string,\n\t\tProp_10 as string,\n\t\tProp_11 as string,\n\t\tProp_12 as string,\n\t\tProp_13 as string,\n\t\tProp_14 as string,\n\t\tProp_15 as string,\n\t\tProp_16 as string,\n\t\tProp_17 as string,\n\t\tProp_18 as string,\n\t\tProp_19 as string,\n\t\tProp_20 as string,\n\t\tProp_21 as string,\n\t\tProp_22 as string,\n\t\tProp_23 as string,\n\t\tProp_24 as string,\n\t\tProp_25 as string,\n\t\tProp_26 as string,\n\t\tProp_27 as string,\n\t\tProp_28 as string,\n\t\tProp_29 as string,\n\t\tProp_30 as string,\n\t\tProp_31 as string,\n\t\tProp_32 as string,\n\t\tProp_33 as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['vivonext/validados_a_processar','vivonext/processados'],\n\tpreferredFractionalType: 'decimal') ~> srcArqVivoNextK16\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(28,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nSelecaoColunas derive(SyntheticKey = 1,\n\t\tVALOR_ORIG_NFST = toDecimal(replace(toString(VALOR_ORIG_NFST), ',' , '.')),\n\t\tVALOR_CONTEST_AJUSTE_CANC = toDecimal(replace(toString(VALOR_CONTEST_AJUSTE_CANC), ',' , '.')),\n\t\tVALOR_ALOCADO = toDecimal(replace(toString(VALOR_ALOCADO), ',' , '.')),\n\t\tVALOR_DOCTO_ORIGINAL = toDecimal(replace(toString(VALOR_DOCTO_ORIGINAL), ',' , '.')),\n\t\tVALOR_FATURA = toDecimal(replace(toString(VALOR_FATURA), ',' , '.')),\n\t\tSALDO_DEVEDOR = toDecimal(replace(toString(SALDO_DEVEDOR), ',' , '.')),\n\t\tDATA_EMISSAO_NFST = toTimestamp(DATA_EMISSAO_NFST, 'yyyyMMdd'),\n\t\tDATA_AJUSTE = toTimestamp(DATA_AJUSTE, 'yyyyMMdd'),\n\t\tDATA_ALOCACAO = toTimestamp(DATA_AJUSTE, 'yyyyMMdd'),\n\t\tDATA_EMISSAO_FATURA_2 = toTimestamp(DATA_EMISSAO_FATURA_2, 'yyyyMMdd'),\n\t\tDATA_EMISSAO_FATURA = toTimestamp(DATA_EMISSAO_FATURA, 'yyyyMMdd')) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nsrcArqVivoNextK16 select(mapColumn(\n\t\tCLIENTE_ID = Prop_0,\n\t\tNOTA_FISCAL = Prop_1,\n\t\tDATA_EMISSAO_NFST = Prop_2,\n\t\tVALOR_ORIG_NFST = Prop_3,\n\t\tSERIE = Prop_4,\n\t\tUF = Prop_5,\n\t\tCONTA_CLIENTE = Prop_6,\n\t\tCNPJ_CPF = Prop_7,\n\t\tNOME_CLIENTE = Prop_8,\n\t\tTERMINAL = Prop_9,\n\t\tVALOR_CONTEST_AJUSTE_CANC = Prop_10,\n\t\tDATA_AJUSTE = Prop_11,\n\t\tHORA_AJUSTE = Prop_12,\n\t\tVALOR_ALOCADO = Prop_13,\n\t\tDATA_ALOCACAO = Prop_14,\n\t\tHORA_ALOCACAO = Prop_15,\n\t\tOPERADORA = Prop_16,\n\t\tCODIGO_OPERADORA = Prop_17,\n\t\tCODIGO_MOTIVO_AJUSTE = Prop_18,\n\t\tDESCRITIVO_MOTIVO_AJUSTE = Prop_19,\n\t\tCREDIT_ID = Prop_20,\n\t\tCONTA_CONTABIL = Prop_21,\n\t\tDESCR_CONTA_CONTABIL = Prop_22,\n\t\tNUMERO_FATURA = Prop_23,\n\t\tVALOR_DOCTO_ORIGINAL = Prop_24,\n\t\tDATA_EMISSAO_FATURA = Prop_25,\n\t\tFATU_ALOCADA = Prop_26,\n\t\tDATA_EMISSAO_FATURA_2 = Prop_27,\n\t\tMESANOFATURA = Prop_28,\n\t\tVALOR_FATURA = Prop_29,\n\t\tSALDO_DEVEDOR = Prop_30,\n\t\tDEBIT_ID = Prop_31,\n\t\tCOD_TIPO_RECEBIVEIS = Prop_32,\n\t\tDESCR_TIPO_RECEBIVEIS = Prop_33\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelecaoColunas\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_VIVO_NEXT_K16 as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCLIENTE_ID as string,\n\t\tNOTA_FISCAL as string,\n\t\tDT_EMISSAO_NFST as timestamp,\n\t\tVL_ORIG_NFST as decimal(15,2),\n\t\tSERIE as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tNOME_CLIENTE as string,\n\t\tTERMINAL as string,\n\t\tVL_CONTEST_AJUSTE as decimal(15,2),\n\t\tVL_ALOCADO as decimal(15,2),\n\t\tDT_ALOCACAO as timestamp,\n\t\tHR_ALOCACAO as string,\n\t\tDT_AJUSTE as timestamp,\n\t\tHR_AJUSTE as string,\n\t\tOPERADORA as string,\n\t\tCD_OPERADORA as string,\n\t\tCD_MOTIVO_AJUSTE as string,\n\t\tDS_MOTIVO_AJUSTE as string,\n\t\tNUMERO_FATURA as string,\n\t\tFATU_ALOCADA as string,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tMESANOFATURA as string,\n\t\tVL_DOCTO_ORIGINAL as decimal(15,2),\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tCONTA_CONTABIL as string,\n\t\tDS_CONTA_CONTABIL as string,\n\t\tVL_FATURA as decimal(15,2),\n\t\tCD_TIPO_RECEBIVEIS as string,\n\t\tDS_TIPO_RECEBIVEIS as string,\n\t\tDEBIT_ID as string,\n\t\tCREDIT_ID as string,\n\t\tUF as string,\n\t\tDT_EMISSAO_FATURA_2 as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCLIENTE_ID,\n\t\tNOTA_FISCAL,\n\t\tDT_EMISSAO_NFST = DATA_EMISSAO_NFST,\n\t\tVL_ORIG_NFST = VALOR_ORIG_NFST,\n\t\tSERIE,\n\t\tCONTA_CLIENTE,\n\t\tCNPJ_CPF,\n\t\tNOME_CLIENTE,\n\t\tTERMINAL,\n\t\tVL_CONTEST_AJUSTE = VALOR_CONTEST_AJUSTE_CANC,\n\t\tVL_ALOCADO = VALOR_ALOCADO,\n\t\tDT_ALOCACAO = DATA_ALOCACAO,\n\t\tHR_ALOCACAO = HORA_ALOCACAO,\n\t\tDT_AJUSTE = DATA_AJUSTE,\n\t\tHR_AJUSTE = HORA_AJUSTE,\n\t\tOPERADORA,\n\t\tCD_OPERADORA = CODIGO_OPERADORA,\n\t\tCD_MOTIVO_AJUSTE = CODIGO_MOTIVO_AJUSTE,\n\t\tDS_MOTIVO_AJUSTE = DESCRITIVO_MOTIVO_AJUSTE,\n\t\tNUMERO_FATURA,\n\t\tFATU_ALOCADA,\n\t\tDT_EMISSAO_FATURA = DATA_EMISSAO_FATURA,\n\t\tMESANOFATURA,\n\t\tVL_DOCTO_ORIGINAL = VALOR_DOCTO_ORIGINAL,\n\t\tSALDO_DEVEDOR,\n\t\tCONTA_CONTABIL,\n\t\tDS_CONTA_CONTABIL = DESCR_CONTA_CONTABIL,\n\t\tVL_FATURA = VALOR_FATURA,\n\t\tCD_TIPO_RECEBIVEIS = COD_TIPO_RECEBIVEIS,\n\t\tDS_TIPO_RECEBIVEIS = DESCR_TIPO_RECEBIVEIS,\n\t\tDEBIT_ID,\n\t\tCREDIT_ID,\n\t\tUF,\n\t\tDT_EMISSAO_FATURA_2 = DATA_EMISSAO_FATURA_2\n\t)) ~> GravaTabVivoNextK16"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoVivoNextK17')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VivoNext"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_vivo_next_K17",
								"type": "DatasetReference"
							},
							"name": "srcArqVivoNextK17"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cvtb_vivo_next_k17",
								"type": "DatasetReference"
							},
							"name": "GravaTabVivoNextK17"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						},
						{
							"name": "select1"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\t{_col0_} as string,\n\t\t{_col1_} as string,\n\t\t{_col2_} as string,\n\t\t{_col3_} as string,\n\t\t{_col4_} as string,\n\t\t{_col5_} as string,\n\t\t{_col6_} as string,\n\t\t{_col7_} as string,\n\t\t{_col8_} as string,\n\t\t{_col9_} as string,\n\t\t{_col10_} as string,\n\t\t{_col11_} as string,\n\t\t{_col12_} as string,\n\t\t{_col13_} as string,\n\t\t{_col14_} as string,\n\t\t{_col15_} as string,\n\t\t{_col16_} as string,\n\t\t{_col17_} as string,\n\t\t{_col18_} as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['vivonext/validados_a_processar','vivonext/processados']) ~> srcArqVivoNextK17\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nselect1 derive(SyntheticKey = 1,\n\t\tVALOR_FATURA = toDecimal(replace(toString(VALOR_FATURA), ',' , '.')),\n\t\tSALDO_DEVIDO_ORIG = toDecimal(replace(toString(SALDO_DEVIDO_ORIG), ',' , '.')),\n\t\tVALOR_TOTAL_PAGAMENTO = toDecimal(replace(toString(VALOR_TOTAL_PAGAMENTO), ',' , '.')),\n\t\tVALOR_PGTO_ALOCADO = toDecimal(replace(toString(VALOR_PGTO_ALOCADO), ',' , '.')),\n\t\tMES_ANO_FATURA = trim(MES_ANO_FATURA),\n\t\tDATA_EMISSAO_FATURA = toTimestamp(DATA_EMISSAO_FATURA, 'yyyyMMdd'),\n\t\tDATA_PAGAMENTO = toTimestamp(DATA_PAGAMENTO, 'yyyyMMdd')) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nsrcArqVivoNextK17 select(mapColumn(\n\t\tCLIENTE_ID = {_col0_},\n\t\tNOME_CLIENTE = {_col1_},\n\t\tCNPJ_CPF = {_col2_},\n\t\tCONTA_CLIENTE = {_col3_},\n\t\tMES_ANO_FATURA = {_col4_},\n\t\tVALOR_FATURA = {_col5_},\n\t\tSALDO_DEVIDO_ORIG = {_col6_},\n\t\tDATA_EMISSAO_FATURA = {_col7_},\n\t\tVALOR_TOTAL_PAGAMENTO = {_col8_},\n\t\tDATA_PAGAMENTO = {_col9_},\n\t\tVALOR_PGTO_ALOCADO = {_col10_},\n\t\tCOD_TIPO_RECEBIVEIS = {_col11_},\n\t\tDESCR_TIPO_RECEBIVEIS = {_col12_},\n\t\tOPERADORA = {_col13_},\n\t\tCOD_OPERADORA = {_col14_},\n\t\tFATU_ALOCADA = {_col15_},\n\t\tDEBIT_ID = {_col16_},\n\t\tCREDIT_ID = {_col17_}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_VIVO_NEXT_K17 as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCLIENTE_ID as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tNOME_CLIENTE as string,\n\t\tOPERADORA as string,\n\t\tCD_OPERADORA as string,\n\t\tFATU_ALOCADA as string,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tMESANOFATURA as string,\n\t\tSALDO_DEVIDO_ORIG as decimal(15,2),\n\t\tVL_FATURA as decimal(15,2),\n\t\tCD_TIPO_RECEBIVEIS as string,\n\t\tDS_TIPO_RECEBIVEIS as string,\n\t\tDEBIT_ID as string,\n\t\tCREDIT_ID as string,\n\t\tDT_PAGAMENTO as timestamp,\n\t\tVL_PGTO_ALOCADO as decimal(15,2),\n\t\tVL_TOTAL_PAGAMENTO as decimal(15,2)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCLIENTE_ID,\n\t\tCONTA_CLIENTE,\n\t\tCNPJ_CPF,\n\t\tNOME_CLIENTE,\n\t\tOPERADORA,\n\t\tCD_OPERADORA = COD_OPERADORA,\n\t\tFATU_ALOCADA,\n\t\tDT_EMISSAO_FATURA = DATA_EMISSAO_FATURA,\n\t\tMESANOFATURA = MES_ANO_FATURA,\n\t\tSALDO_DEVIDO_ORIG,\n\t\tVL_FATURA = VALOR_FATURA,\n\t\tCD_TIPO_RECEBIVEIS = COD_TIPO_RECEBIVEIS,\n\t\tDS_TIPO_RECEBIVEIS = DESCR_TIPO_RECEBIVEIS,\n\t\tDEBIT_ID,\n\t\tCREDIT_ID,\n\t\tDT_PAGAMENTO = DATA_PAGAMENTO,\n\t\tVL_PGTO_ALOCADO = VALOR_PGTO_ALOCADO,\n\t\tVL_TOTAL_PAGAMENTO = VALOR_TOTAL_PAGAMENTO\n\t)) ~> GravaTabVivoNextK17"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfLayoutAjustadoAtis')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLayoutCorrigido"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_ATLYS_ADJ",
								"type": "DatasetReference"
							},
							"name": "GravaArquivoAtlysCorrigido"
						}
					],
					"transformations": [
						{
							"name": "SeparaEmColunas"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pIdLoteArquivo as string",
						"}",
						"source(output(",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"SELECT ID_LOTE_ARQUIVO, DS_LINHA_RECUPERADA FROM CONVENIO.CVTB_CARGA_ERRO_LAYOUT WHERE FL_CORRIGIDO='S' AND DS_LINHA_RECUPERADA IS NOT NULL AND ID_LOTE_ARQUIVO=CONVERT(NUMERIC(28),{$pIdLoteArquivo})\"),",
						"     format: 'query') ~> BuscaLayoutCorrigido",
						"BuscaLayoutCorrigido derive(ID_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[1],",
						"          NOTA_FISCAL = split(DS_LINHA_RECUPERADA, '|')[2],",
						"          DT_EMISSAO_NF = toDate(split(DS_LINHA_RECUPERADA, '|')[3], 'yyyyMMdd'),",
						"          VLR_ORIG_NFST = replace((split(DS_LINHA_RECUPERADA, '|')[4]), \",\", \".\"),",
						"          SERIE = split(DS_LINHA_RECUPERADA, '|')[5],",
						"          CONTA_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[6],",
						"          CNPJ_CPF = split(DS_LINHA_RECUPERADA, '|')[7],",
						"          NOM_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[8],",
						"          NUM_TERMINAL = split(DS_LINHA_RECUPERADA, '|')[9],",
						"          VLR_CONTEST_AJUSTE = replace((split(DS_LINHA_RECUPERADA, '|')[10]), \",\", \".\"),",
						"          VLR_ATRIBUIDO = replace((split(DS_LINHA_RECUPERADA, '|')[11]),\",\", \".\"),",
						"          DT_ATRIBUICAO = toDate(split(DS_LINHA_RECUPERADA, '|')[12], 'yyyyMMdd'),",
						"          HR_ATRIBUICAO = split(DS_LINHA_RECUPERADA, '|')[13],",
						"          DT_AJUSTE = toDate(split(DS_LINHA_RECUPERADA, '|')[14], 'yyyyMMdd'),",
						"          HR_AJUSTE = split(DS_LINHA_RECUPERADA, '|')[15],",
						"          OPERADORA = split(DS_LINHA_RECUPERADA, '|')[16],",
						"          CODIGO_OPERADORA = split(DS_LINHA_RECUPERADA, '|')[17],",
						"          COD_MOTIVO_AJUSTES = split(DS_LINHA_RECUPERADA, '|')[18],",
						"          DESC_MOTIVO_AJUSTE = split(DS_LINHA_RECUPERADA, '|')[19],",
						"          DATA_ABERTURA_IMPU = toDate(split(DS_LINHA_RECUPERADA, '|')[20], 'yyyyMMdd'),",
						"          DATA_FECH_IMPUG = toDate(split(DS_LINHA_RECUPERADA, '|')[21], 'yyyyMMdd'),",
						"          DSPUT_ID = split(DS_LINHA_RECUPERADA, '|')[22],",
						"          TP_NOTA_FISCAL = split(DS_LINHA_RECUPERADA, '|')[23],",
						"          CLASSE_RECEBER = split(DS_LINHA_RECUPERADA, '|')[24],",
						"          CONTA_CONTABIL = split(DS_LINHA_RECUPERADA, '|')[25],",
						"          DESCR_CONTA_CONTABIL = split(DS_LINHA_RECUPERADA, '|')[26],",
						"          NUMERO_FATURA = split(DS_LINHA_RECUPERADA, '|')[27],",
						"          VALOR_DOCTO_ORIGINAL = replace((split(DS_LINHA_RECUPERADA, '|')[28]), \",\", \".\"),",
						"          MES_ANO_REFERENTE = split(DS_LINHA_RECUPERADA, '|')[29],",
						"          DATA_VENC_FATUR = toDate(split(DS_LINHA_RECUPERADA, '|')[30], 'yyyyMMdd'),",
						"          VALOR_PAGAMENTO = replace((split(DS_LINHA_RECUPERADA, '|')[31]), \",\", \".\"),",
						"          DATA_ATRIBUICAO_PGTO = toDate(split(DS_LINHA_RECUPERADA, '|')[32], 'yyyyMMdd'),",
						"          FATU_ATRIBUIDA = split(DS_LINHA_RECUPERADA, '|')[33],",
						"          DT_EMISSAO_FATURA = toDate(split(DS_LINHA_RECUPERADA, '|')[34], 'yyyyMMdd'),",
						"          MES_ANO_FATURA = split(DS_LINHA_RECUPERADA, '|')[35],",
						"          VALOR_FATURA = replace((split(DS_LINHA_RECUPERADA, '|')[36]), \",\", \".\"),",
						"          SALDO_DEVEDOR = replace((split(DS_LINHA_RECUPERADA, '|')[37]), \",\", \".\"),",
						"          UF = split(DS_LINHA_RECUPERADA, '|')[38],",
						"          OPERADORA_REAL = split(DS_LINHA_RECUPERADA, '|')[39],",
						"          SALDO_FATURA_INI = replace((split(DS_LINHA_RECUPERADA, '|')[40]), \",\", \".\"),",
						"          SALDO_FATURA_FIM = replace((split(DS_LINHA_RECUPERADA, '|')[41]), \",\", \".\"),",
						"          SEQ_RECEBIVEL = split(DS_LINHA_RECUPERADA, '|')[42]) ~> SeparaEmColunas",
						"SeparaEmColunas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_ATLYS_ADJ as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          ID_CLIENTE as string,",
						"          NOTA_FISCAL as string,",
						"          DT_EMISSAO_NF as timestamp,",
						"          VLR_ORIG_NFST as decimal(10,2),",
						"          SERIE as string,",
						"          CONTA_CLIENTE as string,",
						"          CNPJ_CPF as string,",
						"          NOM_CLIENTE as string,",
						"          NUM_TERMINAL as string,",
						"          VLR_CONTEST_AJUSTE as decimal(10,2),",
						"          VLR_ATRIBUIDO as decimal(10,2),",
						"          DT_ATRIBUICAO as timestamp,",
						"          HR_ATRIBUICAO as string,",
						"          DT_AJUSTE as timestamp,",
						"          HR_AJUSTE as string,",
						"          OPERADORA as string,",
						"          CODIGO_OPERADORA as string,",
						"          COD_MOTIVO_AJUSTES as string,",
						"          DESC_MOTIVO_AJUSTE as string,",
						"          DATA_ABERTURA_IMPU as timestamp,",
						"          DATA_FECH_IMPUG as timestamp,",
						"          DSPUT_ID as string,",
						"          TP_NOTA_FISCAL as string,",
						"          CLASSE_RECEBER as string,",
						"          CONTA_CONTABIL as string,",
						"          DESCR_CONTA_CONTABIL as string,",
						"          NUMERO_FATURA as string,",
						"          VALOR_DOCTO_ORIGINAL as decimal(15,2),",
						"          MES_ANO_REFERENTE as string,",
						"          DATA_VENC_FATUR as timestamp,",
						"          VALOR_PAGAMENTO as decimal(15,2),",
						"          DATA_ATRIBUICAO_PGTO as timestamp,",
						"          FATU_ATRIBUIDA as string,",
						"          DT_EMISSAO_FATURA as timestamp,",
						"          MES_ANO_FATURA as string,",
						"          VALOR_FATURA as decimal(15,2),",
						"          SALDO_DEVEDOR as decimal(15,2),",
						"          UF as string,",
						"          OPERADORA_REAL as string,",
						"          SALDO_FATURA_INI as decimal(15,2),",
						"          SALDO_FATURA_FIM as decimal(15,2),",
						"          SEQ_RECEBIVEL as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          ID_CLIENTE,",
						"          NOTA_FISCAL,",
						"          DT_EMISSAO_NF,",
						"          VLR_ORIG_NFST,",
						"          SERIE,",
						"          CONTA_CLIENTE,",
						"          CNPJ_CPF,",
						"          NOM_CLIENTE,",
						"          NUM_TERMINAL,",
						"          VLR_CONTEST_AJUSTE,",
						"          VLR_ATRIBUIDO,",
						"          DT_ATRIBUICAO,",
						"          HR_ATRIBUICAO,",
						"          DT_AJUSTE,",
						"          HR_AJUSTE,",
						"          OPERADORA,",
						"          CODIGO_OPERADORA,",
						"          COD_MOTIVO_AJUSTES,",
						"          DESC_MOTIVO_AJUSTE,",
						"          DATA_ABERTURA_IMPU,",
						"          DATA_FECH_IMPUG,",
						"          DSPUT_ID,",
						"          TP_NOTA_FISCAL,",
						"          CLASSE_RECEBER,",
						"          CONTA_CONTABIL,",
						"          DESCR_CONTA_CONTABIL,",
						"          NUMERO_FATURA,",
						"          VALOR_DOCTO_ORIGINAL,",
						"          MES_ANO_REFERENTE,",
						"          DATA_VENC_FATUR,",
						"          VALOR_PAGAMENTO,",
						"          DATA_ATRIBUICAO_PGTO,",
						"          FATU_ATRIBUIDA,",
						"          DT_EMISSAO_FATURA,",
						"          MES_ANO_FATURA,",
						"          VALOR_FATURA,",
						"          SALDO_DEVEDOR,",
						"          UF,",
						"          OPERADORA_REAL,",
						"          SALDO_FATURA_INI,",
						"          SALDO_FATURA_FIM,",
						"          SEQ_RECEBIVEL",
						"     )) ~> GravaArquivoAtlysCorrigido"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfLayoutAjustadoAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLayoutCorrigido"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_ATLYS_ADJ",
								"type": "DatasetReference"
							},
							"name": "GravaArquivoAtlysCorrigido"
						}
					],
					"transformations": [
						{
							"name": "SeparaEmColunas"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pIdLoteArquivo as string",
						"}",
						"source(output(",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"SELECT ID_LOTE_ARQUIVO, DS_LINHA_RECUPERADA FROM CONVENIO.CVTB_CARGA_ERRO_LAYOUT WHERE FL_CORRIGIDO='S' AND DS_LINHA_RECUPERADA IS NOT NULL AND ID_LOTE_ARQUIVO=CONVERT(NUMERIC(28),{$pIdLoteArquivo})\"),",
						"     format: 'query') ~> BuscaLayoutCorrigido",
						"BuscaLayoutCorrigido derive(ID_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[1],",
						"          NOTA_FISCAL = split(DS_LINHA_RECUPERADA, '|')[2],",
						"          DT_EMISSAO_NF = toDate(split(DS_LINHA_RECUPERADA, '|')[3], 'yyyyMMdd'),",
						"          VLR_ORIG_NFST = replace((split(DS_LINHA_RECUPERADA, '|')[4]), \",\", \".\"),",
						"          SERIE = split(DS_LINHA_RECUPERADA, '|')[5],",
						"          CONTA_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[6],",
						"          CNPJ_CPF = split(DS_LINHA_RECUPERADA, '|')[7],",
						"          NOM_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[8],",
						"          NUM_TERMINAL = split(DS_LINHA_RECUPERADA, '|')[9],",
						"          VLR_CONTEST_AJUSTE = replace((split(DS_LINHA_RECUPERADA, '|')[10]), \",\", \".\"),",
						"          VLR_ATRIBUIDO = replace((split(DS_LINHA_RECUPERADA, '|')[11]),\",\", \".\"),",
						"          DT_ATRIBUICAO = toDate(split(DS_LINHA_RECUPERADA, '|')[12], 'yyyyMMdd'),",
						"          HR_ATRIBUICAO = split(DS_LINHA_RECUPERADA, '|')[13],",
						"          DT_AJUSTE = toDate(split(DS_LINHA_RECUPERADA, '|')[14], 'yyyyMMdd'),",
						"          HR_AJUSTE = split(DS_LINHA_RECUPERADA, '|')[15],",
						"          OPERADORA = split(DS_LINHA_RECUPERADA, '|')[16],",
						"          CODIGO_OPERADORA = split(DS_LINHA_RECUPERADA, '|')[17],",
						"          COD_MOTIVO_AJUSTES = split(DS_LINHA_RECUPERADA, '|')[18],",
						"          DESC_MOTIVO_AJUSTE = split(DS_LINHA_RECUPERADA, '|')[19],",
						"          DATA_ABERTURA_IMPU = toDate(split(DS_LINHA_RECUPERADA, '|')[20], 'yyyyMMdd'),",
						"          DATA_FECH_IMPUG = toDate(split(DS_LINHA_RECUPERADA, '|')[21], 'yyyyMMdd'),",
						"          DSPUT_ID = split(DS_LINHA_RECUPERADA, '|')[22],",
						"          TP_NOTA_FISCAL = split(DS_LINHA_RECUPERADA, '|')[23],",
						"          CLASSE_RECEBER = split(DS_LINHA_RECUPERADA, '|')[24],",
						"          CONTA_CONTABIL = split(DS_LINHA_RECUPERADA, '|')[25],",
						"          DESCR_CONTA_CONTABIL = split(DS_LINHA_RECUPERADA, '|')[26],",
						"          NUMERO_FATURA = split(DS_LINHA_RECUPERADA, '|')[27],",
						"          VALOR_DOCTO_ORIGINAL = replace((split(DS_LINHA_RECUPERADA, '|')[28]), \",\", \".\"),",
						"          MES_ANO_REFERENTE = split(DS_LINHA_RECUPERADA, '|')[29],",
						"          DATA_VENC_FATUR = toDate(split(DS_LINHA_RECUPERADA, '|')[30], 'yyyyMMdd'),",
						"          VALOR_PAGAMENTO = replace((split(DS_LINHA_RECUPERADA, '|')[31]), \",\", \".\"),",
						"          DATA_ATRIBUICAO_PGTO = toDate(split(DS_LINHA_RECUPERADA, '|')[32], 'yyyyMMdd'),",
						"          FATU_ATRIBUIDA = split(DS_LINHA_RECUPERADA, '|')[33],",
						"          DT_EMISSAO_FATURA = toDate(split(DS_LINHA_RECUPERADA, '|')[34], 'yyyyMMdd'),",
						"          MES_ANO_FATURA = split(DS_LINHA_RECUPERADA, '|')[35],",
						"          VALOR_FATURA = replace((split(DS_LINHA_RECUPERADA, '|')[36]), \",\", \".\"),",
						"          SALDO_DEVEDOR = replace((split(DS_LINHA_RECUPERADA, '|')[37]), \",\", \".\"),",
						"          UF = split(DS_LINHA_RECUPERADA, '|')[38],",
						"          OPERADORA_REAL = split(DS_LINHA_RECUPERADA, '|')[39],",
						"          SALDO_FATURA_INI = replace((split(DS_LINHA_RECUPERADA, '|')[40]), \",\", \".\"),",
						"          SALDO_FATURA_FIM = replace((split(DS_LINHA_RECUPERADA, '|')[41]), \",\", \".\"),",
						"          SEQ_RECEBIVEL = split(DS_LINHA_RECUPERADA, '|')[42]) ~> SeparaEmColunas",
						"SeparaEmColunas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_ATLYS_ADJ as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          ID_CLIENTE as string,",
						"          NOTA_FISCAL as string,",
						"          DT_EMISSAO_NF as timestamp,",
						"          VLR_ORIG_NFST as decimal(10,2),",
						"          SERIE as string,",
						"          CONTA_CLIENTE as string,",
						"          CNPJ_CPF as string,",
						"          NOM_CLIENTE as string,",
						"          NUM_TERMINAL as string,",
						"          VLR_CONTEST_AJUSTE as decimal(10,2),",
						"          VLR_ATRIBUIDO as decimal(10,2),",
						"          DT_ATRIBUICAO as timestamp,",
						"          HR_ATRIBUICAO as string,",
						"          DT_AJUSTE as timestamp,",
						"          HR_AJUSTE as string,",
						"          OPERADORA as string,",
						"          CODIGO_OPERADORA as string,",
						"          COD_MOTIVO_AJUSTES as string,",
						"          DESC_MOTIVO_AJUSTE as string,",
						"          DATA_ABERTURA_IMPU as timestamp,",
						"          DATA_FECH_IMPUG as timestamp,",
						"          DSPUT_ID as string,",
						"          TP_NOTA_FISCAL as string,",
						"          CLASSE_RECEBER as string,",
						"          CONTA_CONTABIL as string,",
						"          DESCR_CONTA_CONTABIL as string,",
						"          NUMERO_FATURA as string,",
						"          VALOR_DOCTO_ORIGINAL as decimal(15,2),",
						"          MES_ANO_REFERENTE as string,",
						"          DATA_VENC_FATUR as timestamp,",
						"          VALOR_PAGAMENTO as decimal(15,2),",
						"          DATA_ATRIBUICAO_PGTO as timestamp,",
						"          FATU_ATRIBUIDA as string,",
						"          DT_EMISSAO_FATURA as timestamp,",
						"          MES_ANO_FATURA as string,",
						"          VALOR_FATURA as decimal(15,2),",
						"          SALDO_DEVEDOR as decimal(15,2),",
						"          UF as string,",
						"          OPERADORA_REAL as string,",
						"          SALDO_FATURA_INI as decimal(15,2),",
						"          SALDO_FATURA_FIM as decimal(15,2),",
						"          SEQ_RECEBIVEL as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          ID_CLIENTE,",
						"          NOTA_FISCAL,",
						"          DT_EMISSAO_NF,",
						"          VLR_ORIG_NFST,",
						"          SERIE,",
						"          CONTA_CLIENTE,",
						"          CNPJ_CPF,",
						"          NOM_CLIENTE,",
						"          NUM_TERMINAL,",
						"          VLR_CONTEST_AJUSTE,",
						"          VLR_ATRIBUIDO,",
						"          DT_ATRIBUICAO,",
						"          HR_ATRIBUICAO,",
						"          DT_AJUSTE,",
						"          HR_AJUSTE,",
						"          OPERADORA,",
						"          CODIGO_OPERADORA,",
						"          COD_MOTIVO_AJUSTES,",
						"          DESC_MOTIVO_AJUSTE,",
						"          DATA_ABERTURA_IMPU,",
						"          DATA_FECH_IMPUG,",
						"          DSPUT_ID,",
						"          TP_NOTA_FISCAL,",
						"          CLASSE_RECEBER,",
						"          CONTA_CONTABIL,",
						"          DESCR_CONTA_CONTABIL,",
						"          NUMERO_FATURA,",
						"          VALOR_DOCTO_ORIGINAL,",
						"          MES_ANO_REFERENTE,",
						"          DATA_VENC_FATUR,",
						"          VALOR_PAGAMENTO,",
						"          DATA_ATRIBUICAO_PGTO,",
						"          FATU_ATRIBUIDA,",
						"          DT_EMISSAO_FATURA,",
						"          MES_ANO_FATURA,",
						"          VALOR_FATURA,",
						"          SALDO_DEVEDOR,",
						"          UF,",
						"          OPERADORA_REAL,",
						"          SALDO_FATURA_INI,",
						"          SALDO_FATURA_FIM,",
						"          SEQ_RECEBIVEL",
						"     )) ~> GravaArquivoAtlysCorrigido"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Cadastral')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_Cadastral",
								"type": "DatasetReference"
							},
							"name": "EntradaArqCadastral"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_Cadastral_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaArqCadastral"
						}
					],
					"transformations": [
						{
							"name": "MapeamentoArqCadastral"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArq as string",
						"}",
						"source(output(",
						"          ArquivoCadastral as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['','originais']) ~> EntradaArqCadastral",
						"EntradaArqCadastral derive(CNPJ_CPF = trim(substring(ArquivoCadastral, 1, 14)),",
						"          IE = trim(substring(ArquivoCadastral, 15, 14)),",
						"          RazaoSocial = trim(substring(ArquivoCadastral, 29, 35)),",
						"          Logradouro = trim(substring(ArquivoCadastral, 64, 45)),",
						"          NumeroEnd = trim(substring(ArquivoCadastral, 109, 5)),",
						"          Complemento = trim(substring(ArquivoCadastral, 114, 15)),",
						"          CEP = trim(substring(ArquivoCadastral, 129, 8)),",
						"          Bairro = trim(substring(ArquivoCadastral, 137, 15)),",
						"          Municipio = trim(substring(ArquivoCadastral, 152, 30)),",
						"          UF = trim(substring(ArquivoCadastral, 182, 2)),",
						"          TelefoneContato = trim(substring(ArquivoCadastral, 184, 12)),",
						"          CodigoIdentificacaoConsumidor_Assinante = trim(substring(ArquivoCadastral, 196, 12)),",
						"          NroTerminaltelefonico_UnidadeConsumidora = trim(substring(ArquivoCadastral, 208, 12)),",
						"          UFHabilitacaoTerminalTelefonico = trim(substring(ArquivoCadastral, 220, 2)),",
						"          DataEmissao = trim(substring(ArquivoCadastral, 222, 8)),",
						"          Modelo = trim(substring(ArquivoCadastral, 230, 2)),",
						"          Serie = trim(substring(ArquivoCadastral, 232, 3)),",
						"          Numero = trim(substring(ArquivoCadastral, 235, 9)),",
						"          CodigoMunicipo = trim(substring(ArquivoCadastral, 244, 7)),",
						"          Brancos_reservadoparausofuturo = trim(substring(ArquivoCadastral, 251, 5)),",
						"          CodigoAutenticacaoDigital = trim(substring(ArquivoCadastral, 256, 32)),",
						"          AnoEmissaoNF = trim(substring(ArquivoCadastral, 222, 4)),",
						"          MesEmissaoNF = trim(substring(ArquivoCadastral, 226, 2)),",
						"          DiaEmissaoNF = trim(substring(ArquivoCadastral, 228, 2)),",
						"          UFNF = trim(substring(ArquivoCadastral, 182, 2)),",
						"          SerieNF = trim(substring(ArquivoCadastral, 232, 3))) ~> MapeamentoArqCadastral",
						"MapeamentoArqCadastral sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:($pNomeArq),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CNPJ_CPF,",
						"          IE,",
						"          RazaoSocial,",
						"          Logradouro,",
						"          NumeroEnd,",
						"          Complemento,",
						"          CEP,",
						"          Bairro,",
						"          Municipio,",
						"          UF,",
						"          TelefoneContato,",
						"          CodigoIdentificacaoConsumidor_Assinante,",
						"          NroTerminaltelefonico_UnidadeConsumidora,",
						"          UFHabilitacaoTerminalTelefonico,",
						"          DataEmissao,",
						"          Modelo,",
						"          Serie,",
						"          Numero,",
						"          CodigoMunicipo,",
						"          Brancos_reservadoparausofuturo,",
						"          CodigoAutenticacaoDigital,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF,",
						"          UFNF,",
						"          SerieNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          SerieNF,",
						"          UFNF,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     )) ~> SaidaArqCadastral"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Controle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_Controle",
								"type": "DatasetReference"
							},
							"name": "EntradaControleV3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_Controle_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaParquetArqControle"
						}
					],
					"transformations": [
						{
							"name": "ColunasDerivadas"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArq as string",
						"}",
						"source(output(",
						"          ControleV3 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['','originais']) ~> EntradaControleV3",
						"EntradaControleV3 derive(Cnpj = trim(substring(ControleV3, 1, 18)),",
						"          IE = trim(substring(ControleV3, 19, 15)),",
						"          RazaoSocial = trim(substring(ControleV3, 34, 50)),",
						"          Endereco = trim(substring(ControleV3, 84, 50)),",
						"          CEP = trim(substring(ControleV3, 134, 9)),",
						"          Bairro = trim(substring(ControleV3, 143, 30)),",
						"          Municipio = trim(substring(ControleV3, 173, 30)),",
						"          UF = trim(substring(ControleV3, 203, 2)),",
						"          Responsavel = trim(substring(ControleV3, 205, 30)),",
						"          Cargo = trim(substring(ControleV3, 235, 20)),",
						"          Telefone = trim(substring(ControleV3, 255, 12)),",
						"          Email = trim(substring(ControleV3, 267, 40)),",
						"          QtdeRegMestre = trim(substring(ControleV3, 307, 7)),",
						"          QtdeNFcanceladas = trim(substring(ControleV3, 314, 7)),",
						"          DataEmissaoPriDoc = trim(substring(ControleV3, 321, 8)),",
						"          DataEmissaoUltDoc = trim(substring(ControleV3, 329, 8)),",
						"          NumeroPriDoc = trim(substring(ControleV3, 337, 9)),",
						"          NumeroUltDoc = trim(substring(ControleV3, 346, 9)),",
						"          ValorTotal = trim(substring(ControleV3, 355, 14)),",
						"          BCIcms = trim(substring(ControleV3, 369, 14)),",
						"          ICMS = trim(substring(ControleV3, 383, 14)),",
						"          OpIsentas = trim(substring(ControleV3, 397, 14)),",
						"          ValoresNaoBC = trim(substring(ControleV3, 411, 14)),",
						"          NomeArqMestre = trim(substring(ControleV3, 425, 40)),",
						"          StatusRetificacao = trim(substring(ControleV3, 465, 1)),",
						"          CodAutenticacao = trim(substring(ControleV3, 466, 32)),",
						"          QtdeRegItem = trim(substring(ControleV3, 498, 9)),",
						"          QtdeItensCancelados = trim(substring(ControleV3, 507, 7)),",
						"          DataEmissaoPriDocItens = trim(substring(ControleV3, 514, 8)),",
						"          DataEmissaoUltDocItens = trim(substring(ControleV3, 522, 8)),",
						"          NumeroPriDocItens = trim(substring(ControleV3, 530, 9)),",
						"          NumeroUltDocItens = trim(substring(ControleV3, 539, 9)),",
						"          Total = trim(substring(ControleV3, 548, 14)),",
						"          Descontos = trim(substring(ControleV3, 562, 14)),",
						"          Acrescimos = trim(substring(ControleV3, 576, 14)),",
						"          BCIcmsTotal = trim(substring(ControleV3, 590, 14)),",
						"          ICMSTotal = trim(substring(ControleV3, 604, 14)),",
						"          OpIsentasTotal = trim(substring(ControleV3, 618, 14)),",
						"          ValoresNaoBCTotal = trim(substring(ControleV3, 632, 14)),",
						"          NomeArqItem = trim(substring(ControleV3, 646, 40)),",
						"          StatusRetificacaoItem = trim(substring(ControleV3, 686, 1)),",
						"          CodAutenticacaoItem = trim(substring(ControleV3, 687, 32)),",
						"          QtdeCadastroDest = trim(substring(ControleV3, 719, 7)),",
						"          NomeArqCadastro = trim(substring(ControleV3, 726, 40)),",
						"          StatusRetificacaoCadastro = trim(substring(ControleV3, 766, 1)),",
						"          CodAutenticacaoCadastro = trim(substring(ControleV3, 767, 32)),",
						"          VersaoValidador = trim(substring(ControleV3, 799, 3)),",
						"          ChaveReciboEntrega = trim(substring(ControleV3, 802, 6)),",
						"          QtdeAdvertencias = trim(substring(ControleV3, 808, 9)),",
						"          Referencia = trim(substring(ControleV3, 817, 4)),",
						"          Modelo = trim(substring(ControleV3, 821, 2)),",
						"          Serie = trim(substring(ControleV3, 823, 3)),",
						"          Volume = trim(substring(ControleV3, 826, 3)),",
						"          SituacaoVersao = trim(substring(ControleV3, 829, 3)),",
						"          NomeArqCompactado = trim(substring(ControleV3, 832, 60)),",
						"          QtdeTipoA = trim(substring(ControleV3, 892, 9)),",
						"          ValorTotalTipoA = trim(substring(ControleV3, 901, 14)),",
						"          BCIcmsA = trim(substring(ControleV3, 915, 14)),",
						"          ICMSA = trim(substring(ControleV3, 929, 14)),",
						"          IsentasNTA = trim(substring(ControleV3, 943, 14)),",
						"          OutrosValoresA = trim(substring(ControleV3, 957, 14)),",
						"          QtdeTipoB = trim(substring(ControleV3, 971, 9)),",
						"          ValorTotalB = trim(substring(ControleV3, 980, 14)),",
						"          BCIcmsB = trim(substring(ControleV3, 994, 14)),",
						"          ICMSB = trim(substring(ControleV3, 1008, 14)),",
						"          IsentasNTB = trim(substring(ControleV3, 1022, 14)),",
						"          OutrosValoresB = trim(substring(ControleV3, 1036, 14)),",
						"          QtdeTipoC = trim(substring(ControleV3, 1050, 9)),",
						"          ValorTotalC = trim(substring(ControleV3, 1059, 14)),",
						"          BCIcmsC = trim(substring(ControleV3, 1073, 14)),",
						"          ICMSC = trim(substring(ControleV3, 1087, 14)),",
						"          IsentasNTC = trim(substring(ControleV3, 1101, 14)),",
						"          OutrosValoresC = trim(substring(ControleV3, 1115, 14)),",
						"          QtdeTipoD = trim(substring(ControleV3, 1129, 9)),",
						"          ValorTotalD = trim(substring(ControleV3, 1138, 14)),",
						"          BCIcmsD = trim(substring(ControleV3, 1152, 14)),",
						"          ICMSD = trim(substring(ControleV3, 1166, 14)),",
						"          IsentasNTD = trim(substring(ControleV3, 1180, 14)),",
						"          OutrosValoresD = trim(substring(ControleV3, 1194, 14)),",
						"          ChaveControle = trim(substring(ControleV3, 1208, 32)),",
						"          Brancos = trim(substring(ControleV3, 1240, 64)),",
						"          CodAutenticacaoRegistro = trim(substring(ControleV3, 1304, 32)),",
						"          AnoEmissaoPriDoc = trim(substring(ControleV3, 321, 4)),",
						"          MesEmissaoPriDoc = trim(substring(ControleV3, 325, 2)),",
						"          DiaEmissaoPriDoc = trim(substring(ControleV3, 327, 2)),",
						"          UFNF = trim(substring(ControleV3, 203, 2)),",
						"          SerieNF = trim(substring(ControleV3, 823, 3))) ~> ColunasDerivadas",
						"ColunasDerivadas sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:($pNomeArq),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Cnpj,",
						"          IE,",
						"          RazaoSocial,",
						"          Endereco,",
						"          CEP,",
						"          Bairro,",
						"          Municipio,",
						"          UF,",
						"          Responsavel,",
						"          Cargo,",
						"          Telefone,",
						"          Email,",
						"          QtdeRegMestre,",
						"          QtdeNFcanceladas,",
						"          DataEmissaoPriDoc,",
						"          DataEmissaoUltDoc,",
						"          NumeroPriDoc,",
						"          NumeroUltDoc,",
						"          ValorTotal,",
						"          BCIcms,",
						"          ICMS,",
						"          OpIsentas,",
						"          ValoresNaoBC,",
						"          NomeArqMestre,",
						"          StatusRetificacao,",
						"          CodAutenticacao,",
						"          QtdeRegItem,",
						"          QtdeItensCancelados,",
						"          DataEmissaoPriDocItens,",
						"          DataEmissaoUltDocItens,",
						"          NumeroPriDocItens,",
						"          NumeroUltDocItens,",
						"          Total,",
						"          Descontos,",
						"          Acrescimos,",
						"          BCIcmsTotal,",
						"          ICMSTotal,",
						"          OpIsentasTotal,",
						"          ValoresNaoBCTotal,",
						"          NomeArqItem,",
						"          StatusRetificacaoItem,",
						"          CodAutenticacaoItem,",
						"          QtdeCadastroDest,",
						"          NomeArqCadastro,",
						"          StatusRetificacaoCadastro,",
						"          CodAutenticacaoCadastro,",
						"          VersaoValidador,",
						"          ChaveReciboEntrega,",
						"          QtdeAdvertencias,",
						"          Referencia,",
						"          Modelo,",
						"          Serie,",
						"          Volume,",
						"          SituacaoVersao,",
						"          NomeArqCompactado,",
						"          QtdeTipoA,",
						"          ValorTotalTipoA,",
						"          BCIcmsA,",
						"          ICMSA,",
						"          IsentasNTA,",
						"          OutrosValoresA,",
						"          QtdeTipoB,",
						"          ValorTotalB,",
						"          BCIcmsB,",
						"          ICMSB,",
						"          IsentasNTB,",
						"          OutrosValoresB,",
						"          QtdeTipoC,",
						"          ValorTotalC,",
						"          BCIcmsC,",
						"          ICMSC,",
						"          IsentasNTC,",
						"          OutrosValoresC,",
						"          QtdeTipoD,",
						"          ValorTotalD,",
						"          BCIcmsD,",
						"          ICMSD,",
						"          IsentasNTD,",
						"          OutrosValoresD,",
						"          ChaveControle,",
						"          Brancos,",
						"          CodAutenticacaoRegistro,",
						"          AnoEmissaoPriDoc,",
						"          MesEmissaoPriDoc,",
						"          DiaEmissaoPriDoc,",
						"          UFNF,",
						"          SerieNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          SerieNF,",
						"          UFNF,",
						"          AnoEmissaoPriDoc,",
						"          MesEmissaoPriDoc,",
						"          DiaEmissaoPriDoc",
						"     )) ~> SaidaParquetArqControle"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Item')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_ItemNF",
								"type": "DatasetReference"
							},
							"name": "EntradaArqItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_ItemNF_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaArqItem"
						}
					],
					"transformations": [
						{
							"name": "MapeamentoArqItem"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArq as string",
						"}",
						"source(output(",
						"          ArquivoItem as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['','originais']) ~> EntradaArqItem",
						"EntradaArqItem derive(CNPJ_CPF = trim(substring(ArquivoItem, 1, 14)),",
						"          UF = trim(substring(ArquivoItem, 15, 2)),",
						"          Classe_Consumo = trim(substring(ArquivoItem, 17, 1)),",
						"          Fase_TipoUtilizacao = trim(substring(ArquivoItem, 18, 1)),",
						"          GrupoTensao = trim(substring(ArquivoItem, 19, 2)),",
						"          DataEmissao = trim(substring(ArquivoItem, 21, 8)),",
						"          Modelo = trim(substring(ArquivoItem, 29, 2)),",
						"          Serie = trim(substring(ArquivoItem, 31, 3)),",
						"          Numero = trim(substring(ArquivoItem, 34, 9)),",
						"          CFOP = trim(substring(ArquivoItem, 43, 4)),",
						"          NroOrdemItem = trim(substring(ArquivoItem, 47, 3)),",
						"          CodigoItem = trim(substring(ArquivoItem, 50, 10)),",
						"          DescricaoItem = trim(substring(ArquivoItem, 60, 40)),",
						"          CodigoClassificacaoItem = trim(substring(ArquivoItem, 100, 4)),",
						"          Unidade = trim(substring(ArquivoItem, 104, 6)),",
						"          {QtdContratada(3decimais)} = trim(substring(ArquivoItem, 110, 12)),",
						"          {QtdMedida(3decimais)} = trim(substring(ArquivoItem, 122, 12)),",
						"          {Total(2decimais)} = trim(substring(ArquivoItem, 134, 11)),",
						"          {Desconto_Redutores(2decimais)} = trim(substring(ArquivoItem, 145, 11)),",
						"          {AcrescimosDespesasAcessorias(2decimais)} = trim(substring(ArquivoItem, 156, 11)),",
						"          {BC_ICMS(2decimais) } = trim(substring(ArquivoItem, 167, 11)),",
						"          {ICMS(2decimais) } = trim(substring(ArquivoItem, 178, 11)),",
						"          {OperacoesIsentas_ou_nao_tributadas(2decimais) } = trim(substring(ArquivoItem, 189, 11)),",
						"          {OutrosValores(2decimais) } = trim(substring(ArquivoItem, 200, 11)),",
						"          {AliquotadoICMS(2 decimais) } = trim(substring(ArquivoItem, 211, 4)),",
						"          {Situacao } = trim(substring(ArquivoItem, 215, 1)),",
						"          AnoMesReferenciaApuracao = trim(substring(ArquivoItem, 216, 4)),",
						"          {NumeroContrato } = trim(substring(ArquivoItem, 220, 15)),",
						"          {QuantidadeFaturada(3decimais) } = trim(substring(ArquivoItem, 235, 12)),",
						"          {TarifaAplicadaPrecoMedioEfetivo(6decimais) } = trim(substring(ArquivoItem, 247, 11)),",
						"          {AliquotaPISPASEP(4decimais) } = trim(substring(ArquivoItem, 258, 6)),",
						"          {PISPASEP(2decimais) } = trim(substring(ArquivoItem, 264, 11)),",
						"          {AliquotaCOFINS(4decimais) } = trim(substring(ArquivoItem, 275, 6)),",
						"          {COFINS(2decimais) } = trim(substring(ArquivoItem, 281, 11)),",
						"          {IndicadordeDescontoJudicial } = trim(substring(ArquivoItem, 292, 1)),",
						"          {TipoIsencao_ReducaoBaseCalculo } = trim(substring(ArquivoItem, 293, 2)),",
						"          BrancosReservadoparausoFuturo = trim(substring(ArquivoItem, 295, 5)),",
						"          CodigodeAutenticacaoDigital = trim(substring(ArquivoItem, 300, 32)),",
						"          AnoEmissaoNF = trim(substring(ArquivoItem, 21, 4)),",
						"          MesEmissaoNF = trim(substring(ArquivoItem, 25, 2)),",
						"          DiaEmissaoNF = trim(substring(ArquivoItem, 27, 2)),",
						"          UFNF = trim(substring(ArquivoItem, 15, 2)),",
						"          SerieNF = trim(substring(ArquivoItem, 31, 3))) ~> MapeamentoArqItem",
						"MapeamentoArqItem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:($pNomeArq),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CNPJ_CPF,",
						"          UF,",
						"          Classe_Consumo,",
						"          Fase_TipoUtilizacao,",
						"          GrupoTensao,",
						"          DataEmissao,",
						"          Modelo,",
						"          Serie,",
						"          Numero,",
						"          CFOP,",
						"          NroOrdemItem,",
						"          CodigoItem,",
						"          DescricaoItem,",
						"          CodigoClassificacaoItem,",
						"          Unidade,",
						"          QtdContratada = {QtdContratada(3decimais)},",
						"          QtdMedida = {QtdMedida(3decimais)},",
						"          Total = {Total(2decimais)},",
						"          Desconto_Redutores = {Desconto_Redutores(2decimais)},",
						"          AcrescimosDespesasAcessorias = {AcrescimosDespesasAcessorias(2decimais)},",
						"          BC_ICMS = {BC_ICMS(2decimais) },",
						"          ICMS = {ICMS(2decimais) },",
						"          OperacoesIsentas_ou_nao_tributadas = {OperacoesIsentas_ou_nao_tributadas(2decimais) },",
						"          OutrosValores = {OutrosValores(2decimais) },",
						"          AliquotadoICMS = {AliquotadoICMS(2 decimais) },",
						"          {Situacao },",
						"          AnoMesReferenciaApuracao,",
						"          {NumeroContrato },",
						"          QuantidadeFaturada = {QuantidadeFaturada(3decimais) },",
						"          TarifaAplicadaPrecoMedioEfetivo = {TarifaAplicadaPrecoMedioEfetivo(6decimais) },",
						"          AliquotaPISPASEP = {AliquotaPISPASEP(4decimais) },",
						"          PISPASEP = {PISPASEP(2decimais) },",
						"          AliquotaCOFINS = {AliquotaCOFINS(4decimais) },",
						"          COFINS = {COFINS(2decimais) },",
						"          {IndicadordeDescontoJudicial },",
						"          {TipoIsencao_ReducaoBaseCalculo },",
						"          BrancosReservadoparausoFuturo,",
						"          CodigodeAutenticacaoDigital,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF,",
						"          UFNF,",
						"          SerieNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          SerieNF,",
						"          UFNF,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     )) ~> SaidaArqItem"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Mestre')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_MestreNF",
								"type": "DatasetReference"
							},
							"name": "EntradaArqMestre"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_MestreNF_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaArqMestre"
						}
					],
					"transformations": [
						{
							"name": "MapeamentoArqMestre"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArq as string",
						"}",
						"source(output(",
						"          ArquivoMestre as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['','originais']) ~> EntradaArqMestre",
						"EntradaArqMestre derive(CNPJ_CPF = trim(substring(ArquivoMestre, 1, 14)),",
						"          IE = trim(substring(ArquivoMestre, 15, 14)),",
						"          RazaoSocial = trim(substring(ArquivoMestre, 29, 35)),",
						"          UF = trim(substring(ArquivoMestre, 64, 2)),",
						"          Classo_Consumo = trim(substring(ArquivoMestre, 66, 1)),",
						"          Frase_TipoUtilizacao = trim(substring(ArquivoMestre, 67, 1)),",
						"          GrupoTensao = trim(substring(ArquivoMestre, 68, 2)),",
						"          CodIdentificacaoConsumidor_Assinante = trim(substring(ArquivoMestre, 70, 12)),",
						"          DataEmissao = trim(substring(ArquivoMestre, 82, 8)),",
						"          Modelo = trim(substring(ArquivoMestre, 90, 2)),",
						"          Serie = trim(substring(ArquivoMestre, 92, 3)),",
						"          Numero = trim(substring(ArquivoMestre, 95, 9)),",
						"          CodAutenticacaoDigitalDocFiscal = trim(substring(ArquivoMestre, 104, 32)),",
						"          {ValorTotal(2decimais)} = trim(substring(ArquivoMestre, 136, 12)),",
						"          {BC_ICMS(2decimais)} = trim(substring(ArquivoMestre, 148, 12)),",
						"          {ICMSDestacado(2decimais)} = trim(substring(ArquivoMestre, 160, 12)),",
						"          {OperacoesIsentas_ou_naoTributadas(2decimais)} = trim(substring(ArquivoMestre, 172, 12)),",
						"          {OutrosValores(2decimais)} = trim(substring(ArquivoMestre, 184, 12)),",
						"          SituacaoDocumento = trim(substring(ArquivoMestre, 196, 1)),",
						"          AnoMesReferenciaApuracao = trim(substring(ArquivoMestre, 197, 4)),",
						"          ReferenciaItemNF = trim(substring(ArquivoMestre, 201, 9)),",
						"          NroTerminalTelefonico_UnidadeConsumidora = trim(substring(ArquivoMestre, 210, 12)),",
						"          IndicacaoInformacaoCampo1 = trim(substring(ArquivoMestre, 222, 1)),",
						"          TipoCliente = trim(substring(ArquivoMestre, 223, 2)),",
						"          SubclasseConsumo = trim(substring(ArquivoMestre, 225, 2)),",
						"          NroTerminalTefefonicoPrincial = trim(substring(ArquivoMestre, 227, 12)),",
						"          CNPJEmitente = trim(substring(ArquivoMestre, 239, 14)),",
						"          Nro_CodFaturaComercial = trim(substring(ArquivoMestre, 253, 20)),",
						"          ValorTotalFaturaComercial = trim(substring(ArquivoMestre, 273, 12)),",
						"          DataLeituraAnterior = trim(substring(ArquivoMestre, 285, 8)),",
						"          DataLeituraAtual = trim(substring(ArquivoMestre, 293, 8)),",
						"          Brancos1_reservadoparausofuturo = trim(substring(ArquivoMestre, 301, 50)),",
						"          Brancos2_reservadoparausofuturo = trim(substring(ArquivoMestre, 351, 8)),",
						"          InformacoesAdicionais = trim(substring(ArquivoMestre, 359, 30)),",
						"          Brancos3_reservadoparausofuturo = trim(substring(ArquivoMestre, 389, 5)),",
						"          CodigoAutenticacaoDigital = trim(substring(ArquivoMestre, 394, 32)),",
						"          AnoEmissaoNF = trim(substring(ArquivoMestre, 82, 4)),",
						"          MesEmissaoNF = trim(substring(ArquivoMestre, 86, 2)),",
						"          DiaEmissaoNF = trim(substring(ArquivoMestre, 88, 2)),",
						"          UFNF = trim(substring(ArquivoMestre, 64, 2)),",
						"          SerieNF = trim(substring(ArquivoMestre, 92, 3))) ~> MapeamentoArqMestre",
						"MapeamentoArqMestre sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:($pNomeArq),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CNPJ_CPF,",
						"          IE,",
						"          RazaoSocial,",
						"          UF,",
						"          Classo_Consumo,",
						"          Frase_TipoUtilizacao,",
						"          GrupoTensao,",
						"          CodIdentificacaoConsumidor_Assinante,",
						"          DataEmissao,",
						"          Modelo,",
						"          Serie,",
						"          Numero,",
						"          CodAutenticacaoDigitalDocFiscal,",
						"          ValorTotal = {ValorTotal(2decimais)},",
						"          BC_ICMS = {BC_ICMS(2decimais)},",
						"          ICMSDestacado = {ICMSDestacado(2decimais)},",
						"          OperacoesIsentas_ou_naoTributadas = {OperacoesIsentas_ou_naoTributadas(2decimais)},",
						"          OutrosValores = {OutrosValores(2decimais)},",
						"          SituacaoDocumento,",
						"          AnoMesReferenciaApuracao,",
						"          ReferenciaItemNF,",
						"          NroTerminalTelefonico_UnidadeConsumidora,",
						"          IndicacaoInformacaoCampo1,",
						"          TipoCliente,",
						"          SubclasseConsumo,",
						"          NroTerminalTefefonicoPrincial,",
						"          CNPJEmitente,",
						"          Nro_CodFaturaComercial,",
						"          ValorTotalFaturaComercial,",
						"          DataLeituraAnterior,",
						"          DataLeituraAtual,",
						"          Brancos1_reservadoparausofuturo,",
						"          Brancos2_reservadoparausofuturo,",
						"          InformacoesAdicionais,",
						"          Brancos3_reservadoparausofuturo,",
						"          CodigoAutenticacaoDigital,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF,",
						"          UFNF,",
						"          SerieNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          SerieNF,",
						"          UFNF,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     )) ~> SaidaArqMestre"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutAtisNaoPago')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atis_nao_pago_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqAtisNaoPago"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atis_nao_pago_corrigido",
								"type": "DatasetReference"
							},
							"name": "CriaArqValidosAtisNaoPago"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidasAtisNaoPago"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeCaracteres"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atis','atis/originais']) ~> BuscaLinhasArqAtisNaoPago",
						"BuscaLinhasArqAtisNaoPago derive(qtdcampos = length(value)) ~> CalcQdeCaracteres",
						"CalcQdeCaracteres split(qtdcampos== 356,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqValidosAtisNaoPago",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidasAtisNaoPago"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutAtisPago')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atis_pago_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqAtis"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atis_pago_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoAtisPago"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas",
							"description": "Insere linhas não válidas na tabela CVTB_CARGA_ERRO_LAYOUT, ainda sem correção."
						}
					],
					"transformations": [
						{
							"name": "CalcQdeCaracteres"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atis','atis/originais']) ~> BuscaLinhasArqAtis",
						"BuscaLinhasArqAtis derive(qtdcaracteres = length(value)) ~> CalcQdeCaracteres",
						"CalcQdeCaracteres split(qtdcaracteres== 477,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoAtisPago",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutContestacaoAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atlys_adj_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqAtlys"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atlys_adj_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoAtlys"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas",
							"description": "Insere linhas não válidas na tabela CVTB_CARGA_ERRO_LAYOUT, ainda sem correção."
						}
					],
					"transformations": [
						{
							"name": "CalcQdePipes"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						},
						{
							"name": "TrataAspasDuplas"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atlys','atlys/originais']) ~> BuscaLinhasArqAtlys",
						"TrataAspasDuplas derive(qtdcampos = length(value) - length(replace(value, \"|\", \"\"))) ~> CalcQdePipes",
						"CalcQdePipes split(qtdcampos== 41,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"BuscaLinhasArqAtlys derive(value = replace(value, '\\\"', '')) ~> TrataAspasDuplas",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoAtlys",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatCarFF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_fat_car_ff_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqFatFF"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_fat_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoFatFF"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeCaracteres"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['fat','fat/originais']) ~> BuscaLinhasArqFatFF",
						"BuscaLinhasArqFatFF derive(qtdcaracteres = length(value)) ~> CalcQdeCaracteres",
						"CalcQdeCaracteres split(qtdcaracteres== 426,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3)),",
						"          CD_CRIADO_POR = 'Carga ADF - CargaArqFat') ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoFatFF",
						"CriaColunasParaDestino sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatCarFNP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_fat_car_fnp_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqFatFNP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_fat_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoFatFNP"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['fat','fat/originais'],",
						"     mode: 'read') ~> BuscaLinhasArqFatFNP",
						"BuscaLinhasArqFatFNP derive(qtdcaracteres = length(value)) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(qtdcaracteres== 356,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3)),",
						"          DS_LINHA = value,",
						"          CD_CRIADO_POR = 'Carga ADF - CargaArqFat') ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoFatFNP",
						"CriaColunasParaDestino sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatContestadaKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_contestada_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqKenanFatContestada"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_kenan_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoKenanFatContestada"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['kenan','kenan/originais']) ~> BuscaLinhasArqKenanFatContestada",
						"BuscaLinhasArqKenanFatContestada derive(qtdcampos = length(value) - length(replace(value, \";\", \"\"))) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(or(qtdcampos== 16, startsWith(value, 'CONTA_COBRANCA')),",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoKenanFatContestada",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatDetalheKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_Detalhe_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqKenanFatDetalhe"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_kenan_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoKenanFatDetalhe"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['kenan','kenan/originais']) ~> BuscaLinhasArqKenanFatDetalhe",
						"BuscaLinhasArqKenanFatDetalhe derive(qtdcampos = length(value) - length(replace(value, \";\", \"\"))) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(or(qtdcampos== 27, startsWith(value, 'CONTA_COBRANCA')),",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoKenanFatDetalhe",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatItemKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_Item_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqKenanFatItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_kenan_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoKenanFatItem"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['kenan','kenan/originais']) ~> BuscaLinhasArqKenanFatItem",
						"BuscaLinhasArqKenanFatItem derive(qtdcampos = length(value) - length(replace(value, \";\", \"\"))) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(or(qtdcampos== 13, startsWith(value, 'CONTA_COBRANCA')),",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoKenanFatItem",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		}
	]
}