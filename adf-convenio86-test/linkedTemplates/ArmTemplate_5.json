{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-convenio86-test"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Item')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_ItemNF",
								"type": "DatasetReference"
							},
							"name": "EntradaArqItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_ItemNF_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaArqItem"
						}
					],
					"transformations": [
						{
							"name": "MapeamentoArqItem"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ArquivoItem as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EntradaArqItem",
						"EntradaArqItem derive(CNPJ_CPF = trim(substring(ArquivoItem, 1, 14)),",
						"          UF = trim(substring(ArquivoItem, 15, 2)),",
						"          Classe_Consumo = trim(substring(ArquivoItem, 17, 1)),",
						"          Fase_TipoUtilizacao = trim(substring(ArquivoItem, 18, 1)),",
						"          GrupoTensao = trim(substring(ArquivoItem, 19, 2)),",
						"          DataEmissao = trim(substring(ArquivoItem, 21, 8)),",
						"          Modelo = trim(substring(ArquivoItem, 29, 2)),",
						"          Serie = trim(substring(ArquivoItem, 31, 3)),",
						"          Numero = trim(substring(ArquivoItem, 34, 9)),",
						"          CFOP = trim(substring(ArquivoItem, 43, 4)),",
						"          NroOrdemItem = trim(substring(ArquivoItem, 47, 3)),",
						"          CodigoItem = trim(substring(ArquivoItem, 50, 10)),",
						"          DescricaoItem = trim(substring(ArquivoItem, 60, 40)),",
						"          CodigoClassificacaoItem = trim(substring(ArquivoItem, 100, 4)),",
						"          Unidade = trim(substring(ArquivoItem, 104, 6)),",
						"          {QtdContratada(3decimais)} = trim(substring(ArquivoItem, 110, 12)),",
						"          {QtdMedida(3decimais)} = trim(substring(ArquivoItem, 122, 12)),",
						"          {Total(2decimais)} = trim(substring(ArquivoItem, 134, 11)),",
						"          {Desconto_Redutores(2decimais)} = trim(substring(ArquivoItem, 145, 11)),",
						"          {AcrescimosDespesasAcessorias(2decimais)} = trim(substring(ArquivoItem, 156, 11)),",
						"          {BC_ICMS(2decimais) } = trim(substring(ArquivoItem, 167, 11)),",
						"          {ICMS(2decimais) } = trim(substring(ArquivoItem, 178, 11)),",
						"          {OperacoesIsentas_ou_nao_tributadas(2decimais) } = trim(substring(ArquivoItem, 189, 11)),",
						"          {OutrosValores(2decimais) } = trim(substring(ArquivoItem, 200, 11)),",
						"          {AliquotadoICMS(2 decimais) } = trim(substring(ArquivoItem, 211, 4)),",
						"          {Situacao } = trim(substring(ArquivoItem, 215, 1)),",
						"          AnoMesReferenciaApuracao = trim(substring(ArquivoItem, 216, 4)),",
						"          {NumeroContrato } = trim(substring(ArquivoItem, 220, 15)),",
						"          {QuantidadeFaturada(3decimais) } = trim(substring(ArquivoItem, 235, 12)),",
						"          {TarifaAplicadaPrecoMedioEfetivo(6decimais) } = trim(substring(ArquivoItem, 247, 11)),",
						"          {AliquotaPISPASEP(4decimais) } = trim(substring(ArquivoItem, 258, 6)),",
						"          {PISPASEP(2decimais) } = trim(substring(ArquivoItem, 264, 11)),",
						"          {AliquotaCOFINS(4decimais) } = trim(substring(ArquivoItem, 275, 6)),",
						"          {COFINS(2decimais) } = trim(substring(ArquivoItem, 281, 11)),",
						"          {IndicadordeDescontoJudicial } = trim(substring(ArquivoItem, 292, 1)),",
						"          {TipoIsencao_ReducaoBaseCalculo } = trim(substring(ArquivoItem, 293, 2)),",
						"          BrancosReservadoparausoFuturo = trim(substring(ArquivoItem, 295, 5)),",
						"          CodigodeAutenticacaoDigital = trim(substring(ArquivoItem, 300, 32)),",
						"          AnoEmissaoNF = trim(substring(ArquivoItem, 21, 4)),",
						"          MesEmissaoNF = trim(substring(ArquivoItem, 25, 2)),",
						"          DiaEmissaoNF = trim(substring(ArquivoItem, 27, 2)),",
						"          UFNF = trim(substring(ArquivoItem, 15, 2))) ~> MapeamentoArqItem",
						"MapeamentoArqItem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'convenio115ItemNF06',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CNPJ_CPF,",
						"          UF,",
						"          Classe_Consumo,",
						"          Fase_TipoUtilizacao,",
						"          GrupoTensao,",
						"          DataEmissao,",
						"          Modelo,",
						"          Serie,",
						"          Numero,",
						"          CFOP,",
						"          NroOrdemItem,",
						"          CodigoItem,",
						"          DescricaoItem,",
						"          CodigoClassificacaoItem,",
						"          Unidade,",
						"          QtdContratada = {QtdContratada(3decimais)},",
						"          QtdMedida = {QtdMedida(3decimais)},",
						"          Total = {Total(2decimais)},",
						"          Desconto_Redutores = {Desconto_Redutores(2decimais)},",
						"          AcrescimosDespesasAcessorias = {AcrescimosDespesasAcessorias(2decimais)},",
						"          BC_ICMS = {BC_ICMS(2decimais) },",
						"          ICMS = {ICMS(2decimais) },",
						"          OperacoesIsentas_ou_nao_tributadas = {OperacoesIsentas_ou_nao_tributadas(2decimais) },",
						"          OutrosValores = {OutrosValores(2decimais) },",
						"          AliquotadoICMS = {AliquotadoICMS(2 decimais) },",
						"          {Situacao },",
						"          AnoMesReferenciaApuracao,",
						"          {NumeroContrato },",
						"          QuantidadeFaturada = {QuantidadeFaturada(3decimais) },",
						"          TarifaAplicadaPrecoMedioEfetivo = {TarifaAplicadaPrecoMedioEfetivo(6decimais) },",
						"          AliquotaPISPASEP = {AliquotaPISPASEP(4decimais) },",
						"          PISPASEP = {PISPASEP(2decimais) },",
						"          AliquotaCOFINS = {AliquotaCOFINS(4decimais) },",
						"          COFINS = {COFINS(2decimais) },",
						"          {IndicadordeDescontoJudicial },",
						"          {TipoIsencao_ReducaoBaseCalculo },",
						"          BrancosReservadoparausoFuturo,",
						"          CodigodeAutenticacaoDigital,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF,",
						"          UFNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          UFNF,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     )) ~> SaidaArqItem"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Mestre')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_MestreNF",
								"type": "DatasetReference"
							},
							"name": "EntradaArqMestre"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_MestreNF_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaArqMestre"
						}
					],
					"transformations": [
						{
							"name": "MapeamentoArqMestre"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ArquivoMestre as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EntradaArqMestre",
						"EntradaArqMestre derive(CNPJ_CPF = trim(substring(ArquivoMestre, 1, 14)),",
						"          IE = trim(substring(ArquivoMestre, 15, 14)),",
						"          RazaoSocial = trim(substring(ArquivoMestre, 29, 35)),",
						"          UF = trim(substring(ArquivoMestre, 64, 2)),",
						"          Classo_Consumo = trim(substring(ArquivoMestre, 66, 1)),",
						"          Frase_TipoUtilizacao = trim(substring(ArquivoMestre, 67, 1)),",
						"          GrupoTensao = trim(substring(ArquivoMestre, 68, 2)),",
						"          CodIdentificacaoConsumidor_Assinante = trim(substring(ArquivoMestre, 70, 12)),",
						"          DataEmissao = trim(substring(ArquivoMestre, 82, 8)),",
						"          Modelo = trim(substring(ArquivoMestre, 90, 2)),",
						"          Serie = trim(substring(ArquivoMestre, 92, 3)),",
						"          Numero = trim(substring(ArquivoMestre, 95, 9)),",
						"          CodAutenticacaoDigitalDocFiscal = trim(substring(ArquivoMestre, 104, 32)),",
						"          {ValorTotal(2decimais)} = trim(substring(ArquivoMestre, 136, 12)),",
						"          {BC_ICMS(2decimais)} = trim(substring(ArquivoMestre, 148, 12)),",
						"          {ICMSDestacado(2decimais)} = trim(substring(ArquivoMestre, 160, 12)),",
						"          {OperacoesIsentas_ou_naoTributadas(2decimais)} = trim(substring(ArquivoMestre, 172, 12)),",
						"          {OutrosValores(2decimais)} = trim(substring(ArquivoMestre, 184, 12)),",
						"          SituacaoDocumento = trim(substring(ArquivoMestre, 196, 1)),",
						"          AnoMesReferenciaApuracao = trim(substring(ArquivoMestre, 197, 4)),",
						"          ReferenciaItemNF = trim(substring(ArquivoMestre, 201, 9)),",
						"          NroTerminalTelefonico_UnidadeConsumidora = trim(substring(ArquivoMestre, 210, 12)),",
						"          IndicacaoInformacaoCampo1 = trim(substring(ArquivoMestre, 222, 1)),",
						"          TipoCliente = trim(substring(ArquivoMestre, 223, 2)),",
						"          SubclasseConsumo = trim(substring(ArquivoMestre, 225, 2)),",
						"          NroTerminalTefefonicoPrincial = trim(substring(ArquivoMestre, 227, 12)),",
						"          CNPJEmitente = trim(substring(ArquivoMestre, 239, 14)),",
						"          Nro_CodFaturaComercial = trim(substring(ArquivoMestre, 253, 20)),",
						"          ValorTotalFaturaComercial = trim(substring(ArquivoMestre, 273, 12)),",
						"          DataLeituraAnterior = trim(substring(ArquivoMestre, 285, 8)),",
						"          DataLeituraAtual = trim(substring(ArquivoMestre, 293, 8)),",
						"          Brancos1_reservadoparausofuturo = trim(substring(ArquivoMestre, 301, 50)),",
						"          Brancos2_reservadoparausofuturo = trim(substring(ArquivoMestre, 351, 8)),",
						"          InformacoesAdicionais = trim(substring(ArquivoMestre, 359, 30)),",
						"          Brancos3_reservadoparausofuturo = trim(substring(ArquivoMestre, 389, 5)),",
						"          CodigoAutenticacaoDigital = trim(substring(ArquivoMestre, 394, 32)),",
						"          AnoEmissaoNF = trim(substring(ArquivoMestre, 82, 4)),",
						"          MesEmissaoNF = trim(substring(ArquivoMestre, 86, 2)),",
						"          DiaEmissaoNF = trim(substring(ArquivoMestre, 88, 2)),",
						"          UFNF = trim(substring(ArquivoMestre, 64, 2))) ~> MapeamentoArqMestre",
						"MapeamentoArqMestre sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'convenio115CMestreNF06',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CNPJ_CPF,",
						"          IE,",
						"          RazaoSocial,",
						"          UF,",
						"          Classo_Consumo,",
						"          Frase_TipoUtilizacao,",
						"          GrupoTensao,",
						"          CodIdentificacaoConsumidor_Assinante,",
						"          DataEmissao,",
						"          Modelo,",
						"          Serie,",
						"          Numero,",
						"          CodAutenticacaoDigitalDocFiscal,",
						"          ValorTotal = {ValorTotal(2decimais)},",
						"          BC_ICMS = {BC_ICMS(2decimais)},",
						"          ICMSDestacado = {ICMSDestacado(2decimais)},",
						"          OperacoesIsentas_ou_naoTributadas = {OperacoesIsentas_ou_naoTributadas(2decimais)},",
						"          OutrosValores = {OutrosValores(2decimais)},",
						"          SituacaoDocumento,",
						"          AnoMesReferenciaApuracao,",
						"          ReferenciaItemNF,",
						"          NroTerminalTelefonico_UnidadeConsumidora,",
						"          IndicacaoInformacaoCampo1,",
						"          TipoCliente,",
						"          SubclasseConsumo,",
						"          NroTerminalTefefonicoPrincial,",
						"          CNPJEmitente,",
						"          Nro_CodFaturaComercial,",
						"          ValorTotalFaturaComercial,",
						"          DataLeituraAnterior,",
						"          DataLeituraAtual,",
						"          Brancos1_reservadoparausofuturo,",
						"          Brancos2_reservadoparausofuturo,",
						"          InformacoesAdicionais,",
						"          Brancos3_reservadoparausofuturo,",
						"          CodigoAutenticacaoDigital,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF,",
						"          UFNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          UFNF,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     )) ~> SaidaArqMestre"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutAtisNaoPago')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atis_nao_pago_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqAtisNaoPago"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atis_nao_pago_corrigido",
								"type": "DatasetReference"
							},
							"name": "CriaArqValidosAtisNaoPago"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidasAtisNaoPago"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeCaracteres"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atis','atis/originais']) ~> BuscaLinhasArqAtisNaoPago",
						"BuscaLinhasArqAtisNaoPago derive(qtdcampos = length(value)) ~> CalcQdeCaracteres",
						"CalcQdeCaracteres split(qtdcampos== 356,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqValidosAtisNaoPago",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidasAtisNaoPago"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutAtisPago')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atis_pago_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqAtis"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atis_pago_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoAtisPago"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas",
							"description": "Insere linhas não válidas na tabela CVTB_CARGA_ERRO_LAYOUT, ainda sem correção."
						}
					],
					"transformations": [
						{
							"name": "CalcQdeCaracteres"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atis','atis/originais']) ~> BuscaLinhasArqAtis",
						"BuscaLinhasArqAtis derive(qtdcaracteres = length(value)) ~> CalcQdeCaracteres",
						"CalcQdeCaracteres split(qtdcaracteres== 477,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoAtisPago",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutContestacaoAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atlys_adj_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqAtlys"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atlys_adj_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoAtlys"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas",
							"description": "Insere linhas não válidas na tabela CVTB_CARGA_ERRO_LAYOUT, ainda sem correção."
						}
					],
					"transformations": [
						{
							"name": "CalcQdePipes"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atlys','atlys/originais']) ~> BuscaLinhasArqAtlys",
						"BuscaLinhasArqAtlys derive(qtdcampos = length(value) - length(replace(value, \"|\", \"\"))) ~> CalcQdePipes",
						"CalcQdePipes split(qtdcampos== 41,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoAtlys",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatCarFF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_fat_car_ff_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqFatFF"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_fat_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoFatFF"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeCaracteres"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['fat','fat/originais']) ~> BuscaLinhasArqFatFF",
						"BuscaLinhasArqFatFF derive(qtdcaracteres = length(value)) ~> CalcQdeCaracteres",
						"CalcQdeCaracteres split(qtdcaracteres== 426,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3)),",
						"          CD_CRIADO_POR = 'Carga ADF - CargaArqFat') ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoFatFF",
						"CriaColunasParaDestino sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatCarFNP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_fat_car_fnp_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqFatFNP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_fat_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoFatFNP"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['fat','fat/originais'],",
						"     mode: 'read') ~> BuscaLinhasArqFatFNP",
						"BuscaLinhasArqFatFNP derive(qtdcaracteres = length(value)) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(qtdcaracteres== 356,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3)),",
						"          DS_LINHA = value,",
						"          CD_CRIADO_POR = 'Carga ADF - CargaArqFat') ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoFatFNP",
						"CriaColunasParaDestino sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatContestadaKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_contestada_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqKenanFatContestada"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_kenan_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoKenanFatContestada"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['kenan','kenan/originais']) ~> BuscaLinhasArqKenanFatContestada",
						"BuscaLinhasArqKenanFatContestada derive(qtdcampos = length(value) - length(replace(value, \";\", \"\"))) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(or(qtdcampos== 16, startsWith(value, 'CONTA_COBRANCA')),",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoKenanFatContestada",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatDetalheKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_Detalhe_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqKenanFatDetalhe"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_kenan_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoKenanFatDetalhe"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['kenan','kenan/originais']) ~> BuscaLinhasArqKenanFatDetalhe",
						"BuscaLinhasArqKenanFatDetalhe derive(qtdcampos = length(value) - length(replace(value, \";\", \"\"))) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(or(qtdcampos== 27, startsWith(value, 'CONTA_COBRANCA')),",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoKenanFatDetalhe",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatItemKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_Item_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqKenanFatItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_kenan_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoKenanFatItem"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['kenan','kenan/originais']) ~> BuscaLinhasArqKenanFatItem",
						"BuscaLinhasArqKenanFatItem derive(qtdcampos = length(value) - length(replace(value, \";\", \"\"))) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(or(qtdcampos== 13, startsWith(value, 'CONTA_COBRANCA')),",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoKenanFatItem",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutRecebiveisAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atlys_rcbl_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqRcblAtlys"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atlys_rcbl_corrigido",
								"type": "DatasetReference"
							},
							"name": "CriaArqValidosRcblAtlys"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidasRcbl"
						}
					],
					"transformations": [
						{
							"name": "CalcQdePipes"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atlys','atlys/originais']) ~> BuscaLinhasArqRcblAtlys",
						"BuscaLinhasArqRcblAtlys derive(qtdcampos = length(value) - length(replace(value, \"|\", \"\"))) ~> CalcQdePipes",
						"CalcQdePipes split(qtdcampos== 20,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqValidosRcblAtlys",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidasRcbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutVivoNextK16')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VivoNext"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_vivo_next_K16_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqVivoNextK16"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_vivo_next_K16_corrigido",
								"type": "DatasetReference"
							},
							"name": "CriaArqValidosVivoNextK16"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidasVivoNextK16"
						}
					],
					"transformations": [
						{
							"name": "CalcQdePipes"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['vivonext','vivonext/originais']) ~> BuscaLinhasArqVivoNextK16",
						"BuscaLinhasArqVivoNextK16 derive(qtdcampos = length(value) - length(replace(value, \"|\", \"\"))) ~> CalcQdePipes",
						"CalcQdePipes split(qtdcampos== 34,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          {Prop_0|Prop_1|Prop_2|Prop_3|Prop_4|Prop_5|Prop_6|Prop_7|Prop_8|Prop_9|Prop_10|Prop_11|Prop_12|Prop_13|Prop_14|Prop_15|Prop_16|Prop_17|Prop_18|Prop_19|Prop_20|Prop_21|Prop_22|Prop_23|Prop_24|Prop_25|Prop_26|Prop_27|Prop_28|Prop_29|Prop_30|Prop_31|Prop_32|Prop_33} as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {Prop_0|Prop_1|Prop_2|Prop_3|Prop_4|Prop_5|Prop_6|Prop_7|Prop_8|Prop_9|Prop_10|Prop_11|Prop_12|Prop_13|Prop_14|Prop_15|Prop_16|Prop_17|Prop_18|Prop_19|Prop_20|Prop_21|Prop_22|Prop_23|Prop_24|Prop_25|Prop_26|Prop_27|Prop_28|Prop_29|Prop_30|Prop_31|Prop_32|Prop_33} = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqValidosVivoNextK16",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidasVivoNextK16"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutVivoNextK17')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VivoNext"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_vivo_next_K17_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqVivoNext17"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_vivo_next_K17_corrigido",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoVivoNextK17"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas",
							"description": "Insere linhas não válidas na tabela CVTB_CARGA_ERRO_LAYOUT, ainda sem correção."
						}
					],
					"transformations": [
						{
							"name": "CalcQdePipes"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['vivonext','vivonext/originais']) ~> BuscaLinhasArqVivoNext17",
						"BuscaLinhasArqVivoNext17 derive(qtdepipes = length(value) - length(replace(value, \"|\", \"\"))) ~> CalcQdePipes",
						"CalcQdePipes split(qtdepipes == 18,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoVivoNextK17",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosContestacaoAtis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set varNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ListaArquivosBlobsAtis_Originais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivosAtis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivosAtis').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Testa arquivo Atis",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set varNovoLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(item().Name, 'ATIS_PAGO')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "TrataArquivoAtisNaoPago",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteAtisNaoPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoAtisNaoPago",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqAtisNaoPago": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"BuscaLoteArqAtual": {},
															"GravaTabAtisNaoPago": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutAtisNaoPago",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutAtisNaoPago",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqAtisNaoPago": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqValidosAtisNaoPago": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidasAtisNaoPago": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasAtisNaoPago",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutAtisNaoPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_NaoPago",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutAtisNaoPago').output.runStatus.metrics.CriaArqValidosAtisNaoPago.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasAtisNaoPago",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutAtisNaoPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_NaoPago",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutAtisNaoPago').output.runStatus.metrics.CriaArqValidosAtisNaoPago.stages[0].streams.CalcQdeCaracteres.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteAtisNaoPago",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasValidasAtisNaoPago",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasLidasAtisNaoPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_NaoPago')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_NaoPago')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas),\n    QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)\nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "TrataArquivoContestacaoAtisPago",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivo",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoAtisPago",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqAtisPago": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"BuscaLoteArqAtual": {},
															"GravaTabAtis": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutAtisPago",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutAtisPago",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqAtis": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqCorrigidoAtisPago": {
																"NomeArquivoAtis": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidas": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasAtisPago",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutAtisPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_Pago",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutAtisPago').output.runStatus.metrics.CriaArqCorrigidoAtisPago.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasAtisPago",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutAtisPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_Pago",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutAtisPago').output.runStatus.metrics.CriaArqCorrigidoAtisPago.stages[0].streams.CalcQdeCaracteres.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivo",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasValidasAtisPago",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasLidasAtisPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_Pago')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_Pago')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo \nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)\n, QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais) \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"name": "Set varNomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set varPeriodoReferencia",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set varNomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varPeriodoReferencia",
										"value": {
											"value": "@substring(variables('varNomeArquivo'), sub(length(variables('varNomeArquivo')), 10),6)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "BuscaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GravaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "psNomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "SELECT CONVERT(VARCHAR(38), ID_LOTE_ARQUIVO) as ID_LA \nFROM CONVENIO.CVTB_LOTE_ARQUIVO \nWHERE NM_ARQUIVO = @psNomeArquivo;"
											}
										]
									}
								},
								{
									"name": "GravaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set varPeriodoReferencia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "NomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "NovoLote",
														"type": "String",
														"value": {
															"value": "@variables('varNovoLote')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": "DELETE from CONVENIO.CVTB_CARGA_ERRO_LAYOUT where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE FROM CONVENIO.CVTB_CONTESTACAO_CRITICA  WHERE ID_CONTESTACAO >= (SELECT MIN(c.ID_CONTESTACAO) FROM CONVENIO.CVTB_CONTESTACAO c, CONVENIO.CVTB_LOTE_ARQUIVO l, CONVENIO.CVTB_LOTE ll WHERE c.ID_LOTE_AJUSTE = l.ID_LOTE AND l.ID_LOTE = ll.ID_LOTE AND l.NM_ARQUIVO = @NomeArquivo AND ll.FL_STATUS <> 'PROCESSADO') AND ID_CONTESTACAO <= (SELECT MAX(z.ID_CONTESTACAO) FROM CONVENIO.CVTB_CONTESTACAO z,  CONVENIO.CVTB_LOTE_ARQUIVO la, CONVENIO.CVTB_LOTE t WHERE z.ID_LOTE_AJUSTE = la.ID_LOTE AND la.ID_LOTE = t.ID_LOTE AND la.NM_ARQUIVO = @NomeArquivo AND t.FL_STATUS <> 'PROCESSADO');\n\nDELETE from CONVENIO.CVTB_ATIS_PAGO where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_ATIS_NAO_PAGO where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_LOTE_ARQUIVO \n where NM_ARQUIVO = @NomeArquivo \n   and ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO');\n\nINSERT INTO CONVENIO.CVTB_LOTE_ARQUIVO \n(NM_ARQUIVO,ID_LOTE,ID_SISTEMA_ARQUIVO) \nVALUES (@NomeArquivo,CONVERT(NUMERIC(28), @NovoLote),CASE WHEN SUBSTRING(@NomeArquivo, 1, 9) = 'ATIS_PAGO' THEN 6 ELSE 7 END);"
											}
										]
									}
								},
								{
									"name": "Set varNovoLoteArquivo",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "BuscaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNovoLoteArquivo",
										"value": {
											"value": "@activity('BuscaLoteArquivo').output.resultSets[0].rows[0].ID_LA",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set varNovoLote",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varNovoLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote').output.firstRow.ID_LOTE)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CargaUnificadaAtis",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfCargaUnificadaAtis",
								"type": "DataFlowReference",
								"parameters": {
									"pLote": {
										"value": "'@{variables('varNovoLote')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TabelaAtis": {},
									"TabelaCONTESTACAO": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "qryGeraNovoLote",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "INSERT INTO CONVENIO.CVTB_LOTE\n(\nDT_INICIO_PROCESSAMENTO,\nTP_LOTE,\nFL_STATUS,\nID_SISTEMA,\nDT_CRIADO_EM,\nCD_CRIADO_POR\n)\nVALUES\n(\nDATEADD(HOUR, -3, sysdatetime()),\n'CONTESTACAO',\n'EM_PROCESSAMENTO',\n3,\nDATEADD(HOUR, -3, sysdatetime()),\n'Carga ADF - CargaArqAtis'\n)"
								}
							]
						}
					},
					{
						"name": "FiltraArquivosAtis",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'ATIS_PAGO'), startswith(item().Name, 'ATIS_NAOPAGO'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "AtualizaLoteQtdContestacoes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CargaUnificadaAtis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_Lote",
											"type": "String",
											"value": {
												"value": "@variables('varNovoLote')",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pVlr_QtdContestacoes",
											"type": "String",
											"value": {
												"value": "@activity('CargaUnificadaAtis').output.runStatus.metrics.TabelaCONTESTACAO.rowsWritten",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "UPDATE [CONVENIO].[CVTB_LOTE] SET QT_CONTESTACOES = CONVERT(NUMERIC(18), @pVlr_QtdContestacoes) WHERE ID_LOTE = CONVERT(NUMERIC(28), @pId_Lote)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "BuscaNovoLote",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "qryGeraNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqAtis' AND FL_STATUS = 'EM_PROCESSAMENTO';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "sp_elegibilidadeAtis",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "AtualizaLoteQtdContestacoes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CONVENIO].[sp_elegibilidade_atis]",
							"storedProcedureParameters": {
								"id_lote_ajuste": {
									"value": {
										"value": "@variables('varNovoLote')",
										"type": "Expression"
									},
									"type": "Decimal"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varNovoLote": {
						"type": "String"
					},
					"varNomeArquivo": {
						"type": "String"
					},
					"varNovoLoteArquivo": {
						"type": "String"
					},
					"varPeriodoReferencia": {
						"type": "String"
					},
					"varQdeLinhasValidas_Pago": {
						"type": "String"
					},
					"varQdeLinhasLidas_Pago": {
						"type": "String"
					},
					"varQdeLinhasValidas_NaoPago": {
						"type": "String"
					},
					"varQdeLinhasLidas_NaoPago": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosAtis"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-30T20:20:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutAtisNaoPago')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutAtisPago')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosContestacaoAtlys')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set varNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ListaArquivosBlobsAtlys_Originais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivosAtlys",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivosAtlys').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Testa arquivo Ajuste",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set varNovoLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(item().Name, 'adj')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "GravaArquivoRecebiveis",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivoRcbl",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoRecebiveisAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqAtlysRcbl": {
																"NomeArq": "@variables('varNomeArquivo')"
															},
															"BuscaLoteArqAtual": {},
															"GravaTabContestacoesAtlysRcbl": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutRecebiveis",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutRecebiveisAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqRcblAtlys": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqValidosRcblAtlys": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidasRcbl": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasRCBL",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutRecebiveis",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_rcbl",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutRecebiveis').output.runStatus.metrics.CriaArqValidosRcblAtlys.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasRCBL",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutRecebiveis",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_rcbl",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutRecebiveis').output.runStatus.metrics.InsereLinhasNaoValidasRcbl.stages[0].streams.CalcQdePipes.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivoRcbl",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasValidasRCBL",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasLidasRCBL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_rcbl')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_rcbl')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais) \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "TrataArquivoContestacaoAtlys",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivo",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoContestacaoAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqAtlysAdj": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"BuscaLoteArqAtual": {},
															"GravaTabContestacoesAtlysAdj": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutContestacao",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutContestacaoAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqAtlys": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqCorrigidoAtlys": {
																"NomeArquivoAtlys": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidas": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasADJ",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutContestacao",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_adj",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutContestacao').output.runStatus.metrics.CriaArqCorrigidoAtlys.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasADJ",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutContestacao",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_adj",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutContestacao').output.runStatus.metrics.InsereLinhasNaoValidas.stages[0].streams.CalcQdePipes.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivo",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasValidasADJ",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasLidasADJ",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_adj')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_adj')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais) \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											},
											{
												"name": "spCorrecaoAutomaticaArqAtlysAdj",
												"description": "Executa a correção do layuot do arquivo Atlys",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "TrataArquivoContestacaoAtlys",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[CONVENIO].[spCorrecaoAutomaticaArqAtlys]",
													"storedProcedureParameters": {
														"IdLoteArq": {
															"value": {
																"value": "@variables('varNovoLoteArquivo')",
																"type": "Expression"
															},
															"type": "String"
														},
														"LinhaCorrigida": {
															"value": "",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "dfInsereLinhaCorrigidaAtlysAdj",
												"description": "Busca os registros que tiveram o layout corrigido na tabela convenio.cvtb_carga_erro_layout",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "spCorrecaoAutomaticaArqAtlysAdj",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfLayoutAjustadoAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pIdLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLayoutCorrigido": {},
															"GravaArquivoAtlysCorrigido": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											}
										]
									}
								},
								{
									"name": "Set varNomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set varPeriodoReferencia",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set varNomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varPeriodoReferencia",
										"value": {
											"value": "@substring(variables('varNomeArquivo'), sub(length(variables('varNomeArquivo')), 21),6)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "BuscaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GravaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "psNomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "SELECT CONVERT(VARCHAR(38), ID_LOTE_ARQUIVO) as ID_LA \nFROM CONVENIO.CVTB_LOTE_ARQUIVO \nWHERE NM_ARQUIVO = @psNomeArquivo;"
											}
										]
									}
								},
								{
									"name": "GravaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set varPeriodoReferencia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "NomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "NovoLote",
														"type": "String",
														"value": {
															"value": "@variables('varNovoLote')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": "DELETE from CONVENIO.CVTB_CARGA_ERRO_LAYOUT where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE FROM CONVENIO.CVTB_CONTESTACAO_CRITICA  WHERE ID_CONTESTACAO >= (SELECT MIN(c.ID_CONTESTACAO) FROM CONVENIO.CVTB_CONTESTACAO c, CONVENIO.CVTB_LOTE_ARQUIVO l, CONVENIO.CVTB_LOTE ll WHERE c.ID_LOTE_AJUSTE = l.ID_LOTE AND l.ID_LOTE = ll.ID_LOTE AND l.NM_ARQUIVO = @NomeArquivo AND ll.FL_STATUS <> 'PROCESSADO') AND ID_CONTESTACAO <= (SELECT MAX(z.ID_CONTESTACAO) FROM CONVENIO.CVTB_CONTESTACAO z,  CONVENIO.CVTB_LOTE_ARQUIVO la, CONVENIO.CVTB_LOTE t WHERE z.ID_LOTE_AJUSTE = la.ID_LOTE AND la.ID_LOTE = t.ID_LOTE AND la.NM_ARQUIVO = @NomeArquivo AND t.FL_STATUS <> 'PROCESSADO');\n\nDELETE from CONVENIO.CVTB_ATLYS_ADJ where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_ATLYS_RCBL where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_LOTE_ARQUIVO \n where NM_ARQUIVO = @NomeArquivo \n   and ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO');\n\nINSERT INTO CONVENIO.CVTB_LOTE_ARQUIVO \n(NM_ARQUIVO,ID_LOTE,ID_SISTEMA_ARQUIVO) \nVALUES (@NomeArquivo,CONVERT(NUMERIC(28), @NovoLote),CASE WHEN SUBSTRING(@NomeArquivo, 1, 3) = 'adj' THEN 1 ELSE 2 END);"
											}
										]
									}
								},
								{
									"name": "Set varNovoLoteArquivo",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "BuscaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNovoLoteArquivo",
										"value": {
											"value": "@activity('BuscaLoteArquivo').output.resultSets[0].rows[0].ID_LA",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set varNovoLote",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varNovoLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote').output.firstRow.ID_LOTE)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CargaUnificadaAtlys",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfCargaUnificadaAtlys",
								"type": "DataFlowReference",
								"parameters": {
									"pLote": {
										"value": "'@{variables('varNovoLote')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TabelaADJ": {},
									"TabelaCONTESTACAO": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "qryGeraNovoLote",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "INSERT INTO CONVENIO.CVTB_LOTE\n(\nDT_INICIO_PROCESSAMENTO,\nTP_LOTE,\nFL_STATUS,\nID_SISTEMA,\nDT_CRIADO_EM,\nCD_CRIADO_POR\n)\nVALUES\n(\nDATEADD(HOUR, -3, sysdatetime()),\n'CONTESTACAO',\n'EM_PROCESSAMENTO',\n1,\nDATEADD(HOUR, -3, sysdatetime()),\n'Carga ADF - CargaArqAtlys'\n);"
								}
							]
						}
					},
					{
						"name": "FiltraArquivosAtlys",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'adj'), startswith(item().Name, 'rcvbl'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "AtualizaLoteQtdContestacoes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CargaUnificadaAtlys",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_Lote",
											"type": "String",
											"value": {
												"value": "@variables('varNovoLote')",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pVlr_QtdContestacoes",
											"type": "String",
											"value": {
												"value": "@activity('CargaUnificadaAtlys').output.runStatus.metrics.TabelaCONTESTACAO.rowsWritten",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "UPDATE [CONVENIO].[CVTB_LOTE] SET QT_CONTESTACOES = CONVERT(NUMERIC(18), @pVlr_QtdContestacoes) WHERE ID_LOTE = CONVERT(NUMERIC(28), @pId_Lote)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "BuscaNovoLote",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "qryGeraNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqAtlys' AND FL_STATUS = 'EM_PROCESSAMENTO';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ps_elegibilidadeAtlys",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "AtualizaLoteQtdContestacoes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CONVENIO].[sp_elegibilidade_atlys]",
							"storedProcedureParameters": {
								"id_lote_ajuste": {
									"value": {
										"value": "@variables('varNovoLote')",
										"type": "Expression"
									},
									"type": "Decimal"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varNovoLote": {
						"type": "String"
					},
					"varNomeArquivo": {
						"type": "String"
					},
					"varNovoLoteArquivo": {
						"type": "String"
					},
					"varPeriodoReferencia": {
						"type": "String"
					},
					"varQdeLinhasValidas_adj": {
						"type": "String"
					},
					"varQdeLinhasLidas_adj": {
						"type": "String"
					},
					"varQdeLinhasValidas_rcbl": {
						"type": "String"
					},
					"varQdeLinhasLidas_rcbl": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosAtlys"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-30T20:20:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutRecebiveisAtlys')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutContestacaoAtlys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosContestacaoFat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set varNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ListaArquivosBlobsFat_Originais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivosFat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivosFat').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set varNomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "BuscaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GravaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "psNomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "SELECT CONVERT(VARCHAR(38), ID_LOTE_ARQUIVO) as ID_LA FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = @psNomeArquivo;"
											}
										]
									}
								},
								{
									"name": "GravaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set varPeriodoReferencia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "NomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "NovoLote",
														"type": "String",
														"value": {
															"value": "@variables('varNovoLote')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": "DELETE from CONVENIO.CVTB_CARGA_ERRO_LAYOUT where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE FROM CONVENIO.CVTB_CONTESTACAO_CRITICA  WHERE ID_CONTESTACAO >= (SELECT MIN(c.ID_CONTESTACAO) FROM CONVENIO.CVTB_CONTESTACAO c, CONVENIO.CVTB_LOTE_ARQUIVO l, CONVENIO.CVTB_LOTE ll WHERE c.ID_LOTE_AJUSTE = l.ID_LOTE AND l.ID_LOTE = ll.ID_LOTE AND l.NM_ARQUIVO = @NomeArquivo AND ll.FL_STATUS <> 'PROCESSADO') AND ID_CONTESTACAO <= (SELECT MAX(z.ID_CONTESTACAO) FROM CONVENIO.CVTB_CONTESTACAO z,  CONVENIO.CVTB_LOTE_ARQUIVO la, CONVENIO.CVTB_LOTE t WHERE z.ID_LOTE_AJUSTE = la.ID_LOTE AND la.ID_LOTE = t.ID_LOTE AND la.NM_ARQUIVO = @NomeArquivo AND t.FL_STATUS <> 'PROCESSADO');\n\nDELETE from CONVENIO.CVTB_FAT_CAR_FF where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_FAT_CAR_FNP where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\n\nDELETE from CONVENIO.CVTB_LOTE_ARQUIVO \n where NM_ARQUIVO = @NomeArquivo \n   and ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO');\n\nINSERT INTO CONVENIO.CVTB_LOTE_ARQUIVO \n(NM_ARQUIVO,ID_LOTE,ID_SISTEMA_ARQUIVO) \nVALUES (@NomeArquivo,CONVERT(NUMERIC(28), @NovoLote),CASE WHEN SUBSTRING(@NomeArquivo, 1, 6) = 'CAR_FF' THEN 8  ELSE 9 END);"
											}
										]
									}
								},
								{
									"name": "Set varNovoLoteArquivo",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "BuscaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNovoLoteArquivo",
										"value": {
											"value": "@activity('BuscaLoteArquivo').output.resultSets[0].rows[0].ID_LA",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set varNovoLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@substring(variables('varNomeArquivo'),0,7)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "CAR_FNP",
												"activities": [
													{
														"name": "TrataArquivoCarFNP",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "IncluiEstatisticaTabLoteArquivo_CarFNP",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfGravaArquivoFatCarFNP",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"srcArqFatFNP": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"BuscaLoteArqAtual": {},
																	"GravaTabFatCarFNP": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "ValidacaoLayoutFatCarFNP",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfValidacaoLayoutFatCarFNP",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	},
																	"pLoteArquivo": {
																		"value": "'@{variables('varNovoLoteArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"BuscaLinhasArqFatFNP": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"CriaArqCorrigidoFatFNP": {
																		"NomeArquivoFAT": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"InsereLinhasNaoValidas": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "QdeLinhasValidasCarFNP",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatCarFNP",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasValidas_FNP",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatCarFNP').output.runStatus.metrics.CriaArqCorrigidoFatFNP.stages[0].recordsWritten)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "QdeLinhasLidasCarFNP",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatCarFNP",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasLidas_FNP",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatCarFNP').output.runStatus.metrics.InsereLinhasNaoValidas.stages[0].streams.CalcQdeSeparador.count)\n",
																"type": "Expression"
															}
														}
													},
													{
														"name": "IncluiEstatisticaTabLoteArquivo_CarFNP",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "QdeLinhasValidasCarFNP",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "QdeLinhasLidasCarFNP",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "AzureSqlDatabaseConv86",
															"type": "LinkedServiceReference"
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "LinhasTotais",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasLidas_FNP')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "LinhasValidas",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasValidas_FNP')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "ID_LOTE_ARQUIVO",
																			"type": "String",
																			"value": {
																				"value": "@variables('varNovoLoteArquivo')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		}
																	],
																	"type": "NonQuery",
																	"text": {
																		"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)\nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																		"type": "Expression"
																	}
																}
															]
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "TrataArquivoFatCarFF",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivo_CarFF",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoFatCarFF",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqFatFF": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"BuscaLoteArqAtual": {},
															"GravaTabFatCarFF": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutFatCarFF",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutFatCarFF",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqFatFF": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqCorrigidoFatFF": {
																"NomeArquivoFAT": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidas": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasCarFF",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutFatCarFF",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_FF",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutFatCarFF').output.runStatus.metrics.CriaArqCorrigidoFatFF.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasCarFF",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutFatCarFF",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_FF",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutFatCarFF').output.runStatus.metrics.CriaArqCorrigidoFatFF.stages[0].streams.CalcQdeCaracteres.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivo_CarFF",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasLidasCarFF",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasValidasCarFF",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_FF')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_FF')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)\nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"name": "Set varPeriodoReferencia",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set varNomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varPeriodoReferencia",
										"value": {
											"value": "@substring(variables('varNomeArquivo'), sub(length(variables('varNomeArquivo')), 10),6)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set varNovoLote",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varNovoLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CargaUnificadaFat",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfCargaUnificadaFat",
								"type": "DataFlowReference",
								"parameters": {
									"pLote": {
										"value": "'@{variables('varNovoLote')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TabelasFAT": {},
									"TabelaCONTESTACAO": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "qryGeraNovoLote",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "INSERT INTO CONVENIO.CVTB_LOTE (DT_INICIO_PROCESSAMENTO,TP_LOTE,FL_STATUS,ID_SISTEMA,DT_CRIADO_EM,CD_CRIADO_POR) VALUES ( DATEADD(HOUR, -3, sysdatetime()), 'CONTESTACAO','EM_PROCESSAMENTO',4,DATEADD(HOUR, -3, sysdatetime()),'Carga ADF - CargaArqFat');"
								}
							]
						}
					},
					{
						"name": "FiltraArquivosFat",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'CAR_FF'), startswith(item().Name, 'CAR_FNP'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLote",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "qryGeraNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqFat' AND FL_STATUS = 'EM_PROCESSAMENTO';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "AtualizaLoteQtdContestacoes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CargaUnificadaFat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_Lote",
											"type": "String",
											"value": {
												"value": "@variables('varNovoLote')",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pVlr_QtdContestacoes",
											"type": "String",
											"value": {
												"value": "@activity('CargaUnificadaFat').output.runStatus.metrics.TabelaCONTESTACAO.rowsWritten",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "UPDATE [CONVENIO].[CVTB_LOTE] SET QT_CONTESTACOES = CONVERT(NUMERIC(18), @pVlr_QtdContestacoes) WHERE ID_LOTE = CONVERT(NUMERIC(28),@pId_Lote)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "sp_elegibilidadeFAT",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "AtualizaLoteQtdContestacoes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CONVENIO].[sp_elegibilidade_fat]",
							"storedProcedureParameters": {
								"id_lote_ajuste": {
									"value": {
										"value": "@variables('varNovoLote')",
										"type": "Expression"
									},
									"type": "Decimal"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varNovoLote": {
						"type": "String"
					},
					"varNomeArquivo": {
						"type": "String"
					},
					"varNovoLoteArquivo": {
						"type": "String"
					},
					"varQdeLinhasValidas_FF": {
						"type": "String"
					},
					"varQdeLinhasLidas_FF": {
						"type": "String"
					},
					"varQdeLinhasValidas_FNP": {
						"type": "String"
					},
					"varQdeLinhasLidas_FNP": {
						"type": "String"
					},
					"varPeriodoReferencia": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosFat"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-30T20:20:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatCarFF')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatCarFNP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosContestacaoKenan')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set varNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ListaArquivosBlobsKenan_Originais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivosKenan",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivosKenan').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set varNomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "BuscaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GravaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "psNomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "SELECT CONVERT(VARCHAR(38), ID_LOTE_ARQUIVO) as ID_LA \nFROM CONVENIO.CVTB_LOTE_ARQUIVO \nWHERE NM_ARQUIVO = @psNomeArquivo;"
											}
										]
									}
								},
								{
									"name": "GravaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set varPeriodoReferencia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "NomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "NovoLote",
														"type": "String",
														"value": {
															"value": "@variables('varNovoLote')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": "DELETE from CONVENIO.CVTB_CARGA_ERRO_LAYOUT where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE FROM CONVENIO.CVTB_CONTESTACAO_CRITICA  WHERE ID_CONTESTACAO >= (SELECT MIN(c.ID_CONTESTACAO) FROM CONVENIO.CVTB_CONTESTACAO c, CONVENIO.CVTB_LOTE_ARQUIVO l, CONVENIO.CVTB_LOTE ll WHERE c.ID_LOTE_AJUSTE = l.ID_LOTE AND l.ID_LOTE = ll.ID_LOTE AND l.NM_ARQUIVO = @NomeArquivo AND ll.FL_STATUS <> 'PROCESSADO') AND ID_CONTESTACAO <= (SELECT MAX(z.ID_CONTESTACAO) FROM CONVENIO.CVTB_CONTESTACAO z,  CONVENIO.CVTB_LOTE_ARQUIVO la, CONVENIO.CVTB_LOTE t WHERE z.ID_LOTE_AJUSTE = la.ID_LOTE AND la.ID_LOTE = t.ID_LOTE AND la.NM_ARQUIVO = @NomeArquivo AND t.FL_STATUS <> 'PROCESSADO');\n\nDELETE from CONVENIO.CVTB_FATURA_CON_KENAN where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_FATURA_DET_KENAN where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_FATURA_ITEM_KENAN where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_LOTE_ARQUIVO \n where NM_ARQUIVO = @NomeArquivo \n   and ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO');\n\nINSERT INTO CONVENIO.CVTB_LOTE_ARQUIVO \n(NM_ARQUIVO,ID_LOTE,ID_SISTEMA_ARQUIVO) \nVALUES (@NomeArquivo,CONVERT(NUMERIC(28), @NovoLote),CASE WHEN SUBSTRING(@NomeArquivo, 1, 2) = '01' THEN 4  WHEN SUBSTRING(@NomeArquivo, 1, 2) = '02'  THEN 5 ELSE 3 END);"
											}
										]
									}
								},
								{
									"name": "Set varNovoLoteArquivo",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "BuscaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNovoLoteArquivo",
										"value": {
											"value": "@activity('BuscaLoteArquivo').output.resultSets[0].rows[0].ID_LA",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set varNovoLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@substring(variables('varNomeArquivo'),0,2)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "02",
												"activities": [
													{
														"name": "TrataArquivoFatItemKenan",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "IncluiEstatisticaTabLoteArquivo_FatItem",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfGravaArquivoKenanItem",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"srcArqKenanItem": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"BuscaLoteArqAtual": {},
																	"GravaTabContestacoesAtlysRcbl": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "ValidacaoLayoutFatItemKenan",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfValidacaoLayoutFatItemKenan",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	},
																	"pLoteArquivo": {
																		"value": "'@{variables('varNovoLoteArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"BuscaLinhasArqKenanFatItem": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"CriaArqCorrigidoKenanFatItem": {
																		"NomeArquivoKenan": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"InsereLinhasNaoValidas": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "QdeLinhasValidasFatItem",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatItemKenan",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasValidas_FatIte",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatItemKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatItem.stages[0].recordsWritten)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "QdeLinhasLidasFatItem",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatItemKenan",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasLidas_FatIte",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatItemKenan').output.runStatus.metrics.InsereLinhasNaoValidas.stages[0].streams.CalcQdeSeparador.count)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "IncluiEstatisticaTabLoteArquivo_FatItem",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "QdeLinhasValidasFatItem",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "QdeLinhasLidasFatItem",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "AzureSqlDatabaseConv86",
															"type": "LinkedServiceReference"
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "LinhasTotais",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasLidas_FatIte')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "LinhasValidas",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasValidas_FatIte')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "ID_LOTE_ARQUIVO",
																			"type": "String",
																			"value": {
																				"value": "@variables('varNovoLoteArquivo')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		}
																	],
																	"type": "NonQuery",
																	"text": {
																		"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)-1\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)-1 \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																		"type": "Expression"
																	}
																}
															]
														}
													}
												]
											},
											{
												"value": "03",
												"activities": [
													{
														"name": "TrataArquivoFatDetalheKenan",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "IncluiEstatisticaTabLoteArquivo_FatIDet",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfGravaArquivoKenanDetalhe",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"srcArqKenanDetalhe": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"BuscaLoteArqAtual": {},
																	"GravaTabContestacoesAtlysRcbl": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "ValidacaoLayoutFatDetalheKenan",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfValidacaoLayoutFatDetalheKenan",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	},
																	"pLoteArquivo": {
																		"value": "'@{variables('varNovoLoteArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"BuscaLinhasArqKenanFatDetalhe": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"CriaArqCorrigidoKenanFatDetalhe": {
																		"NomeArquivoKenan": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"InsereLinhasNaoValidas": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "QdeLinhasValidasFatDet",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatDetalheKenan",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasValidas_FatDet",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatDetalheKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatDetalhe.stages[0].recordsWritten)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "QdeLinhasLidaFatDet",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatDetalheKenan",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasLidas_FatDet",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatDetalheKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatDetalhe.stages[0].streams.CalcQdeSeparador.count)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "IncluiEstatisticaTabLoteArquivo_FatIDet",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "QdeLinhasValidasFatDet",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "QdeLinhasLidaFatDet",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "AzureSqlDatabaseConv86",
															"type": "LinkedServiceReference"
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "LinhasTotais",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasLidas_FatDet')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "LinhasValidas",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasValidas_FatDet')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "ID_LOTE_ARQUIVO",
																			"type": "String",
																			"value": {
																				"value": "@variables('varNovoLoteArquivo')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		}
																	],
																	"type": "NonQuery",
																	"text": {
																		"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)-1\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)-1 \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																		"type": "Expression"
																	}
																}
															]
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "TrataArquivoFatContestadaKenan",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivo_FatCon",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoKenanContestada",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqKenanContestada": {
																"NomeArq": "@variables('varNomeArquivo')"
															},
															"BuscaLoteArqAtual": {},
															"GravaTabFaturaConKenan": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutFatContestadaKenan",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutFatContestadaKenan",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqKenanFatContestada": {
																"NomeArq": "@variables('varNomeArquivo')"
															},
															"CriaArqCorrigidoKenanFatContestada": {
																"NomeArquivoKenan": "@variables('varNomeArquivo')"
															},
															"InsereLinhasNaoValidas": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasFatCon",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutFatContestadaKenan",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_FatCon",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutFatContestadaKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatContestada.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasFatCon",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutFatContestadaKenan",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_FatCon",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutFatContestadaKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatContestada.stages[0].streams.CalcQdeSeparador.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivo_FatCon",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasValidasFatCon",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasLidasFatCon",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_FatCon')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_FatCon')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)-1\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)-1 \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"name": "Set varPeriodoReferencia",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set varNomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varPeriodoReferencia",
										"value": {
											"value": "@substring(variables('varNomeArquivo'), sub(length(variables('varNomeArquivo')), 11),7)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set varNovoLote",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varNovoLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CargaUnificadaKenan",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfCargaUnificadaKenan",
								"type": "DataFlowReference",
								"parameters": {
									"pLote": {
										"value": "'@{variables('varNovoLote')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TabelasKenan": {},
									"TabelaCONTESTACAO": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "qryGeraNovoLote",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "INSERT INTO CONVENIO.CVTB_LOTE\n(\nDT_INICIO_PROCESSAMENTO,\nTP_LOTE,\nFL_STATUS,\nID_SISTEMA,\nDT_CRIADO_EM,\nCD_CRIADO_POR\n)\nVALUES\n(\nDATEADD(HOUR, -3, sysdatetime()),\n'CONTESTACAO',\n'EM_PROCESSAMENTO',\n2,\nDATEADD(HOUR, -3, sysdatetime()),\n'Carga ADF - CargaArqKenan'\n);"
								}
							]
						}
					},
					{
						"name": "FiltraArquivosKenan",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(or(startswith(item().Name, '01'), startswith(item().Name, '02')), startswith(item().Name, '03'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLote",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "qryGeraNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqKenan' AND FL_STATUS = 'EM_PROCESSAMENTO';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "AtualizaLoteQtdContestacoes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CargaUnificadaKenan",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_Lote",
											"type": "String",
											"value": {
												"value": "@variables('varNovoLote')",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pVlr_QtdContestacoes",
											"type": "String",
											"value": {
												"value": "@activity('CargaUnificadaKenan').output.runStatus.metrics.TabelaCONTESTACAO.rowsWritten",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "UPDATE [CONVENIO].[CVTB_LOTE] SET QT_CONTESTACOES = CONVERT(NUMERIC(18), @pVlr_QtdContestacoes) WHERE ID_LOTE = CONVERT(NUMERIC(28),@pId_Lote)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "sp_elegibilidadeKenan",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "AtualizaLoteQtdContestacoes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CONVENIO].[sp_elegibilidade_kenan]",
							"storedProcedureParameters": {
								"id_lote_ajuste": {
									"value": {
										"value": "@variables('varNovoLote')",
										"type": "Expression"
									},
									"type": "Decimal"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varNovoLote": {
						"type": "String"
					},
					"varNomeArquivo": {
						"type": "String"
					},
					"varNovoLoteArquivo": {
						"type": "String"
					},
					"varPeriodoReferencia": {
						"type": "String"
					},
					"varQdeLinhasValidas_FatCon": {
						"type": "String"
					},
					"varQdeLinhasLidas_FatCon": {
						"type": "String"
					},
					"varQdeLinhasValidas_FatDet": {
						"type": "String"
					},
					"varQdeLinhasLidas_FatDet": {
						"type": "String"
					},
					"varQdeLinhasValidas_FatIte": {
						"type": "String"
					},
					"varQdeLinhasLidas_FatIte": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosKenan"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-30T20:20:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatContestadaKenan')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatItemKenan')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatDetalheKenan')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosContestacaoVivoNext')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set varNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ListaArquivosBlobVivoNext_Originais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set varNovoLote",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varNovoLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "qryGeraNovoLote",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "INSERT INTO CONVENIO.CVTB_LOTE\n(\nDT_INICIO_PROCESSAMENTO,\nTP_LOTE,\nFL_STATUS,\nID_SISTEMA,\nDT_CRIADO_EM,\nCD_CRIADO_POR\n)\nVALUES\n(\nDATEADD(HOUR, -3, sysdatetime()),\n'CONTESTACAO',\n'EM_PROCESSAMENTO',\n5,\nDATEADD(HOUR, -3, sysdatetime()),\n'Carga ADF - CargaArqVivoNext'\n);"
								}
							]
						}
					},
					{
						"name": "FiltraArquivosVivoNext",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'Vivonext_K16_'), startswith(item().Name, 'Vivonext_K17_'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLote",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "qryGeraNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqVivoNext' AND FL_STATUS = 'EM_PROCESSAMENTO';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivosVivoNext",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivosVivoNext').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set varNomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "BuscaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GravaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "psNomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "SELECT CONVERT(VARCHAR(38), ID_LOTE_ARQUIVO) as ID_LA \nFROM CONVENIO.CVTB_LOTE_ARQUIVO \nWHERE NM_ARQUIVO = @psNomeArquivo;"
											}
										]
									}
								},
								{
									"name": "GravaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set varPeriodoReferencia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "NomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "NovoLote",
														"type": "String",
														"value": {
															"value": "@variables('varNovoLote')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "varPeriodoReferencia",
														"type": "String",
														"value": {
															"value": "@variables('varPeriodoReferencia')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": "DELETE from CONVENIO.CVTB_CARGA_ERRO_LAYOUT WITH (ROWLOCK) where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK)\nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_VIVO_NEXT_K16 WITH (ROWLOCK) where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK)\nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_VIVO_NEXT_K17 WITH (ROWLOCK) where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK)\nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\n\nDELETE from CONVENIO.CVTB_LOTE_ARQUIVO WITH (ROWLOCK)\n where NM_ARQUIVO = @NomeArquivo \n   and ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO');\n\nINSERT INTO CONVENIO.CVTB_LOTE_ARQUIVO (NM_ARQUIVO,ID_LOTE,ID_SISTEMA_ARQUIVO, DATA_REF_ARQUIVO) \nVALUES (@NomeArquivo, CONVERT(NUMERIC(28), @NovoLote),CASE WHEN SUBSTRING(@NomeArquivo, 10, 3) = 'K16' THEN 11   ELSE 12 END, @varPeriodoReferencia);"
											}
										]
									}
								},
								{
									"name": "Set varNovoLoteArquivo",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "BuscaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNovoLoteArquivo",
										"value": {
											"value": "@activity('BuscaLoteArquivo').output.resultSets[0].rows[0].ID_LA",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set varNovoLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@substring(variables('varNomeArquivo'),0,12)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Vivonext_K17",
												"activities": [
													{
														"name": "TrataArquivoVivoNextK17",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "IncluiEstatisticaTabLoteArquivoVivoNextK17",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfGravaArquivoVivoNextK17",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"srcArqVivoNextK17": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"BuscaLoteArqAtual": {},
																	"GravaTabVivoNextK17": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "ValidacaoLayoutVivoNextK17",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfValidacaoLayoutVivoNextK17",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	},
																	"pLoteArquivo": {
																		"value": "'@{variables('varNovoLoteArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"BuscaLinhasArqVivoNext17": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"CriaArqCorrigidoVivoNextK17": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"InsereLinhasNaoValidas": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "QdeLinhasValidasVivoNextK17",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutVivoNextK17",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasValidas_VivoK17",
															"value": {
																"value": "@string(activity('ValidacaoLayoutVivoNextK17').output.runStatus.metrics.CriaArqCorrigidoVivoNextK17.stages[0].recordsWritten)\n",
																"type": "Expression"
															}
														}
													},
													{
														"name": "QdeLinhasLidasVivoNextK17",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutVivoNextK17",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasLidas_VivoK17",
															"value": {
																"value": "@string(activity('ValidacaoLayoutVivoNextK17').output.runStatus.metrics.InsereLinhasNaoValidas.stages[0].streams.CalcQdePipes.count)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "IncluiEstatisticaTabLoteArquivoVivoNextK17",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "QdeLinhasValidasVivoNextK17",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "QdeLinhasLidasVivoNextK17",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "AzureSqlDatabaseConv86",
															"type": "LinkedServiceReference"
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "LinhasTotais",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasLidas_VivoK17')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "LinhasValidas",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasValidas_VivoK17')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "ID_LOTE_ARQUIVO",
																			"type": "String",
																			"value": {
																				"value": "@variables('varNovoLoteArquivo')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		}
																	],
																	"type": "NonQuery",
																	"text": {
																		"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)\nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																		"type": "Expression"
																	}
																}
															]
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "TrataArquivoVivoNextK16",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivo_VivoNextK16",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoVivoNextK16",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqVivoNextK16": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"BuscaLoteArqAtual": {},
															"GravaTabVivoNextK16": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutVivoNextK16",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutVivoNextK16",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqVivoNextK16": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqValidosVivoNextK16": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidasVivoNextK16": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasVivoNextK16",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutVivoNextK16",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_VivoK16",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutVivoNextK16').output.runStatus.metrics.CriaArqValidosVivoNextK16.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasVivoNextK16",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutVivoNextK16",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_VivoK16",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutVivoNextK16').output.runStatus.metrics.InsereLinhasNaoValidasVivoNextK16.stages[0].streams.CalcQdePipes.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivo_VivoNextK16",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasLidasVivoNextK16",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasValidasVivoNextK16",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_VivoK16')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_VivoK16')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)\nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"name": "Set varPeriodoReferencia",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set varNomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varPeriodoReferencia",
										"value": {
											"value": "@replace(substring(variables('varNomeArquivo'), 13, 7), '_', '')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "CargaUnificadaVivonext",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfCargaUnificadaVivoNext",
								"type": "DataFlowReference",
								"parameters": {
									"pLote": {
										"value": "'@{variables('varNovoLote')}'",
										"type": "Expression"
									},
									"pMesAnoRef": {
										"value": "'@{variables('varPeriodoReferencia')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TabelasVivoNext": {},
									"TabelaCONTESTACAO": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "AtualizaLoteQtdContestacoes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CargaUnificadaVivonext",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_Lote",
											"type": "String",
											"value": {
												"value": "@variables('varNovoLote')",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pVlr_QtdContestacoes",
											"type": "String",
											"value": {
												"value": "@activity('CargaUnificadaVivonext').output.runStatus.metrics.TabelaCONTESTACAO.rowsWritten",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "UPDATE [CONVENIO].[CVTB_LOTE] SET QT_CONTESTACOES = CONVERT(NUMERIC(18), @pVlr_QtdContestacoes) WHERE ID_LOTE = CONVERT(NUMERIC(28),@pId_Lote)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "sp_elegibilidadeVivonext",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "AtualizaLoteQtdContestacoes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CONVENIO].[sp_elegibilidade_vivonext]",
							"storedProcedureParameters": {
								"id_lote_ajuste": {
									"value": {
										"value": "@variables('varNovoLote')",
										"type": "Expression"
									},
									"type": "Decimal"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varNovoLote": {
						"type": "String"
					},
					"varNomeArquivo": {
						"type": "String"
					},
					"varNovoLoteArquivo": {
						"type": "String"
					},
					"varPeriodoReferencia": {
						"type": "String"
					},
					"varQdeLinhasValidas_VivoK16": {
						"type": "String"
					},
					"varQdeLinhasLidas_VivoK16": {
						"type": "String"
					},
					"varQdeLinhasValidas_VivoK17": {
						"type": "String"
					},
					"varQdeLinhasLidas_VivoK17": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivoVivoNext"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutVivoNextK16')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutVivoNextK17')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosConvenio115')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfMapeamento115Controle",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfMapeamento115Controle",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EntradaControleV3": {},
									"SaidaParquetArqControle": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dfMapeamento115Cadastral",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfMapeamento115Cadastral",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EntradaArqCadastral": {},
									"SaidaArqCadastral": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dfMapeamento115Item",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfMapeamento115Item",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EntradaArqItem": {},
									"SaidaArqItem": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dfMapeamento115Mestre",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfMapeamento115Mestre",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EntradaArqMestre": {},
									"SaidaArqMestre": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CargaArquivosConv115"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-30T20:20:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfMapeamento115Item')]",
				"[concat(variables('factoryId'), '/dataflows/dfMapeamento115Mestre')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCtrCargaArquivosContestacaoAtis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "plCargaArquivosContestacaoAtis",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plCargaArquivosContestacaoAtis",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BuscaNovoLoteOK",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "plCargaArquivosContestacaoAtis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqAtis';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set varNovoLoteOK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLoteOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLote",
							"value": {
								"value": "@string(activity('BuscaNovoLoteOK').output.firstRow.ID_LOTE)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FinalizaLoteOK",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set varNovoLoteOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_lote",
											"type": "String",
											"value": {
												"value": "@variables('varLote')",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": "UPDATE [CONVENIO].[CVTB_LOTE]\n    SET DT_FIM_PROCESSAMENTO = DATEADD(HOUR, -3, sysdatetime()),\n        FL_STATUS = 'PROCESSADO'\n    WHERE ID_LOTE = CAST(@pId_lote AS numeric(38));"
								}
							]
						}
					},
					{
						"name": "FinalizaLoteErro",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set varNovoLoteNOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_lote",
											"type": "String",
											"value": {
												"value": "@variables('varLote')",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": "UPDATE [CONVENIO].[CVTB_LOTE]\n    SET DT_FIM_PROCESSAMENTO = DATEADD(HOUR, -3, sysdatetime()),\n        FL_STATUS = 'ERRO'\n    WHERE ID_LOTE = CAST(@pId_lote AS numeric(38));"
								}
							]
						}
					},
					{
						"name": "BuscaNovoLote_NOK",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "plCargaArquivosContestacaoAtis",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqAtis';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set varNovoLoteNOK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote_NOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote_NOK').output.firstRow.ID_LOTE)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varLote": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosAtis"
				},
				"annotations": [],
				"lastPublishTime": "2022-08-30T20:20:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/plCargaArquivosContestacaoAtis')]"
			]
		}
	]
}