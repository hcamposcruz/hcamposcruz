{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-convenio86-test"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/connExecQry')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfCargaUnificadaAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CVTB_ATLYS_ADJ",
								"type": "DatasetReference"
							},
							"name": "TabelaADJ"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_CONTESTACAO",
								"type": "DatasetReference"
							},
							"name": "TabelaCONTESTACAO"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"script": "parameters{\n\tpLote as string\n}\nsource(output(\n\t\tID_LOTE as decimal(28,0),\n\t\tID_ATLYS_ADJ as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOTA_FISCAL as string,\n\t\tDT_EMISSAO_NF as timestamp,\n\t\tVLR_ORIG_NFST as decimal(10,2),\n\t\tSERIE as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tNOM_CLIENTE as string,\n\t\tNUM_TERMINAL as string,\n\t\tVLR_CONTEST_AJUSTE as decimal(10,2),\n\t\tVLR_ATRIBUIDO as decimal(10,2),\n\t\tDT_ATRIBUICAO as timestamp,\n\t\tHR_ATRIBUICAO as string,\n\t\tDT_AJUSTE as timestamp,\n\t\tHR_AJUSTE as string,\n\t\tOPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tCOD_MOTIVO_AJUSTES as string,\n\t\tDESC_MOTIVO_AJUSTE as string,\n\t\tDATA_ABERTURA_IMPU as timestamp,\n\t\tDATA_FECH_IMPUG as timestamp,\n\t\tDSPUT_ID as string,\n\t\tTP_NOTA_FISCAL as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTA_CONTABIL as string,\n\t\tDESCR_CONTA_CONTABIL as string,\n\t\tNUMERO_FATURA as string,\n\t\tVALOR_DOCTO_ORIGINAL as decimal(15,2),\n\t\tMES_ANO_REFERENTE as string,\n\t\tDATA_VENC_FATUR as timestamp,\n\t\tVALOR_PAGAMENTO as decimal(15,2),\n\t\tDATA_ATRIBUICAO_PGTO as timestamp,\n\t\tFATU_ATRIBUIDA as string,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tMES_ANO_FATURA as string,\n\t\tVALOR_FATURA as decimal(15,2),\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tUF as string,\n\t\tOPERADORA_REAL as string,\n\t\tSALDO_FATURA_INI as decimal(15,2),\n\t\tSALDO_FATURA_FIM as decimal(15,2),\n\t\tSEQ_RECEBIVEL as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT l.ID_LOTE, adj.ID_ATLYS_ADJ ,adj.ID_LOTE_ARQUIVO ,adj.ID_CLIENTE ,adj.NOTA_FISCAL ,adj.DT_EMISSAO_NF ,adj.VLR_ORIG_NFST ,adj.SERIE ,adj.CONTA_CLIENTE ,adj.CNPJ_CPF ,adj.NOM_CLIENTE ,adj.NUM_TERMINAL ,adj.VLR_CONTEST_AJUSTE ,adj.VLR_ATRIBUIDO ,adj.DT_ATRIBUICAO ,adj.HR_ATRIBUICAO ,adj.DT_AJUSTE ,adj.HR_AJUSTE ,adj.OPERADORA ,adj.CODIGO_OPERADORA ,adj.COD_MOTIVO_AJUSTES ,adj.DESC_MOTIVO_AJUSTE ,adj.DATA_ABERTURA_IMPU ,adj.DATA_FECH_IMPUG ,coalesce(adj.DSPUT_ID,concat(adj.SERIE,'123')) as DSPUT_ID ,adj.TP_NOTA_FISCAL ,adj.CLASSE_RECEBER ,adj.CONTA_CONTABIL ,adj.DESCR_CONTA_CONTABIL ,adj.NUMERO_FATURA ,adj.VALOR_DOCTO_ORIGINAL ,adj.MES_ANO_REFERENTE ,adj.DATA_VENC_FATUR ,adj.VALOR_PAGAMENTO ,adj.DATA_ATRIBUICAO_PGTO ,adj.FATU_ATRIBUIDA ,adj.DT_EMISSAO_FATURA ,adj.MES_ANO_FATURA ,adj.VALOR_FATURA ,adj.SALDO_DEVEDOR ,adj.UF ,adj.OPERADORA_REAL ,adj.SALDO_FATURA_INI ,adj.SALDO_FATURA_FIM ,adj.SEQ_RECEBIVEL FROM CONVENIO.CVTB_ATLYS_ADJ adj, CONVENIO.CVTB_LOTE_ARQUIVO la, CONVENIO.CVTB_LOTE l where adj.ID_LOTE_ARQUIVO = la.ID_LOTE_ARQUIVO and la.ID_LOTE = l.ID_LOTE and l.ID_LOTE = convert(numeric(38), {$pLote})\"),\n\tformat: 'query') ~> TabelaADJ\nTabelaADJ derive(NUM_CONTROLE_RECLAMACAO_NORMALIZADO = iif(isNull(DSPUT_ID), concat(SERIE, '123'), DSPUT_ID),\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO = NOTA_FISCAL) ~> derivedColumn1\nderivedColumn1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_CONTESTACAO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOTA_FISCAL_ORIG as string,\n\t\tDT_EMISSAO_NF_ORIG as timestamp,\n\t\tCD_ANOMES_DT_EMISSAO as decimal(6,0),\n\t\tVLR_ORIG_NSFT as decimal(15,2),\n\t\tSERIE_NF as string,\n\t\tCOD_IDENT_CLI as string,\n\t\tCPF_CNPJ as string,\n\t\tNOME_CLIENTE as string,\n\t\tTERMINAL as string,\n\t\tVLR_TOTAL_ATRIBUIDO as decimal(15,2),\n\t\tVLR_ATRIBUIDO as decimal(15,2),\n\t\tDT_ATRIBUICAO as timestamp,\n\t\tDT_AJUSTE as timestamp,\n\t\tDESCR_OPERADORA as string,\n\t\tCOD_OPERADORA as string,\n\t\tCOD_MOTIVO_AJUSTE as string,\n\t\tDESC_MOTIVO_AJUSTE as string,\n\t\tNUM_CONTROLE_RECLAMACAO as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTA_FINANCEIRA as string,\n\t\tDESC_CONTA_FINANCEIRA as string,\n\t\tNUM_FATURA_ORIGINAL as string,\n\t\tVLR_DOC_ORIGINAL as decimal(15,2),\n\t\tFATURA_ATRIBUIDA as string,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tUF_FATURA as string,\n\t\tSEQ_RECEBIVEL as string,\n\t\tDT_EMISSAO as timestamp,\n\t\tMODELO as string,\n\t\tNUMORDEMDOITEM as decimal(3,0),\n\t\tTOTAL as decimal(15,2),\n\t\tBC_ICMS as decimal(15,2),\n\t\tICMS as decimal(15,2),\n\t\tALIQUOTA_ICMS as decimal(15,2),\n\t\tBC_ICMS_RECALCULADA as decimal(15,2),\n\t\tICMS_RECALCULADO as decimal(15,2),\n\t\tICMS_PARA_RESSARCIMENTO as decimal(15,2),\n\t\tSITUACAO as string,\n\t\tMES_APURACAO as string,\n\t\tTIPO_DOC as decimal(1,0),\n\t\tCOD_CONSUMIDOR as string,\n\t\tCHAVE_AUTENTICACAO as string,\n\t\tTOTAL_MESTRE as decimal(15,2),\n\t\tBC_ICMS_MESTRE as decimal(15,2),\n\t\tICMS_DESTACADO as decimal(15,2),\n\t\tINSCRICAO_ESTADUAL as string,\n\t\tRAZAO_SOCIAL as string,\n\t\tFL_STATUS_GERAL as string,\n\t\tID_LOTE_AJUSTE as decimal(28,0),\n\t\tID_LOTE_CONVENIO as decimal(28,0),\n\t\tCD_ITEM as string,\n\t\tDS_ITEM as string,\n\t\tHR_AJUSTE as string,\n\t\tHR_ATRIBUICAO as string,\n\t\tNOME_BILLING as string,\n\t\tTIPO_CLIENTE as string,\n\t\tDT_ABERTURA_IMPUG as timestamp,\n\t\tDT_FECHA_IMPUG as timestamp,\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tSALDO_FATURA_INI as decimal(15,2),\n\t\tSALDO_FATURA_FIM as decimal(15,2),\n\t\tCOD_CLIENTE as string,\n\t\tTIPO_DOCUMENTO as string,\n\t\tNOME_FANTASIA as string,\n\t\tCOD_GRUPO as string,\n\t\tNOME_GRUPO_ECONOMICO as string,\n\t\tSEGMENTO_CLIENTE as string,\n\t\tSUB_SEGMENTO_CLIENTE as string,\n\t\tSEGMENTO_VALOR as string,\n\t\tCLASSE_ELEGIBILIDADE as string,\n\t\tDESCR_SERV_AJUSTE as string,\n\t\tDESCR_SERV as string,\n\t\tCONTACONTABIL_DB as string,\n\t\tCONTACONTABIL_CR as string,\n\t\tDESCR_CONTACONTABIL_DB as string,\n\t\tDESCR_CONTACONTABIL_CR as string,\n\t\tSALDO_POS_AJUSTE as decimal(15,2),\n\t\tTIPO_OPERACAO as string,\n\t\tTIPO_TERMINAL as string,\n\t\tDONO_RECEITA as string,\n\t\tSUBTYPE_CODE as decimal(19,0),\n\t\tTIPO_DESCR_SERV as string,\n\t\tDT_VENCTO_FAT_FUTURA as timestamp,\n\t\tVLR_IMPOSTO_CONTESTADO as decimal(15,2),\n\t\tVLR_IMPOSTO_ICMS as decimal(15,2),\n\t\tVLR_BRUTO_ITEM as decimal(15,2),\n\t\tVLR_OUTROS_IMPOSTOS as decimal(15,2),\n\t\tVLR_AJUSTE_ITEM as decimal(15,2),\n\t\tVLR_CREDITO_AJUSTE as decimal(15,2),\n\t\tVLR_CREDITO_ITEM as decimal(15,2),\n\t\tVLR_DEVOLUCAO as decimal(15,2),\n\t\tVLR_FATURA_FUTURA as decimal(15,2),\n\t\tVLR_CONTESTADO_FUTURO as decimal(15,2),\n\t\tLOGIN_ATENDIMENTO as string,\n\t\tDT_VENC_FATURA_ORIGINAL as timestamp,\n\t\tDT_ATRIBUICAO_PGTO as timestamp,\n\t\tNUM_ITEM_ESTORNADO as decimal(10,0),\n\t\tFLG_RETIFICADO as string,\n\t\tTERMINAL_115 as string,\n\t\tVALOR_ITEM_115 as decimal(15,2),\n\t\tDT_CRIADO_EM as timestamp,\n\t\tCD_CRIADO_POR as string,\n\t\tDT_ATUALIZADO_EM as timestamp,\n\t\tCD_ATUALIZADO_POR as string,\n\t\tTP_INELEGIBILIDADE as string,\n\t\tMES_ANO_ORIGINAL as string,\n\t\tMES_ANO_FATURA as string,\n\t\tVLR_PAGAMENTO_ORIGINAL as decimal(15,2),\n\t\tID_CRITICA_CONTESTACAO as decimal(28,0),\n\t\tID_ITEM_CONVENIO_115 as decimal(28,0),\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO as string,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_CLIENTE,\n\t\tNOTA_FISCAL_ORIG = NOTA_FISCAL,\n\t\tDT_EMISSAO_NF_ORIG = DT_EMISSAO_NF,\n\t\tVLR_ORIG_NSFT = VLR_ORIG_NFST,\n\t\tSERIE_NF = SERIE,\n\t\tCOD_IDENT_CLI = CONTA_CLIENTE,\n\t\tCPF_CNPJ = CNPJ_CPF,\n\t\tNOME_CLIENTE = NOM_CLIENTE,\n\t\tTERMINAL = NUM_TERMINAL,\n\t\tVLR_TOTAL_ATRIBUIDO = VLR_CONTEST_AJUSTE,\n\t\tVLR_ATRIBUIDO,\n\t\tDT_ATRIBUICAO,\n\t\tHR_ATRIBUICAO,\n\t\tDT_AJUSTE,\n\t\tHR_AJUSTE,\n\t\tDESCR_OPERADORA = OPERADORA,\n\t\tCOD_OPERADORA = CODIGO_OPERADORA,\n\t\tCOD_MOTIVO_AJUSTE = COD_MOTIVO_AJUSTES,\n\t\tDESC_MOTIVO_AJUSTE,\n\t\tNUM_CONTROLE_RECLAMACAO = DSPUT_ID,\n\t\tCLASSE_RECEBER,\n\t\tCONTA_FINANCEIRA = CONTA_CONTABIL,\n\t\tDESC_CONTA_FINANCEIRA = DESCR_CONTA_CONTABIL,\n\t\tNUM_FATURA_ORIGINAL = NUMERO_FATURA,\n\t\tVLR_DOC_ORIGINAL = VALOR_DOCTO_ORIGINAL,\n\t\tMES_ANO_ORIGINAL = MES_ANO_REFERENTE,\n\t\tVLR_PAGAMENTO_ORIGINAL = VALOR_PAGAMENTO,\n\t\tFATURA_ATRIBUIDA = FATU_ATRIBUIDA,\n\t\tDT_EMISSAO_FATURA,\n\t\tMES_ANO_FATURA,\n\t\tVLR_FATURA = VALOR_FATURA,\n\t\tUF_FATURA = UF,\n\t\tSEQ_RECEBIVEL,\n\t\tDT_ABERTURA_IMPUG = DATA_ABERTURA_IMPU,\n\t\tDT_FECHA_IMPUG = DATA_FECH_IMPUG,\n\t\tSALDO_DEVEDOR,\n\t\tSALDO_FATURA_INI,\n\t\tSALDO_FATURA_FIM,\n\t\tTIPO_DOCUMENTO = CNPJ_CPF,\n\t\tDT_VENC_FATURA_ORIGINAL = DATA_VENC_FATUR,\n\t\tDT_ATRIBUICAO_PGTO = DATA_ATRIBUICAO_PGTO,\n\t\tID_LOTE_AJUSTE = ID_LOTE,\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO\n\t)) ~> TabelaCONTESTACAO"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfCargaUnificadaKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "TabelasKenan"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_CONTESTACAO",
								"type": "DatasetReference"
							},
							"name": "TabelaCONTESTACAO"
						}
					],
					"transformations": [
						{
							"name": "AdaptaPontuacao"
						}
					],
					"script": "parameters{\n\tpLote as string\n}\nsource(output(\n\t\taccount_no as string,\n\t\tid_fatura as string,\n\t\tid_open_item as string,\n\t\tnota_fiscal as string,\n\t\tvlr_item as decimal(15,2),\n\t\tserie_nf as string,\n\t\tconta_cobranca as string,\n\t\tvlr_total_atribuido as decimal(15,2),\n\t\tvlr_atribuido as decimal(15,2),\n\t\tdt_ajuste as timestamp,\n\t\thr_ajuste as string,\n\t\tdesc_operadora as string,\n\t\tid_operadora as string,\n\t\tdesc_motivo as string,\n\t\tid_fatura_origem as string,\n\t\tvlr_pagamento as decimal(15,2),\n\t\tdt_emissao as timestamp,\n\t\tvlr_fatura as decimal(15,2),\n\t\tuf_nf as string,\n\t\tcpf_cnpj as string,\n\t\ttipo_documento as string,\n\t\tdesc_contestacao as string,\n\t\tdesc_detalhe as string,\n\t\tcc_db_ajuste as string,\n\t\tcc_cr_ajuste as string,\n\t\ttipo_instancia as string,\n\t\tsubtype_code as decimal(19,0),\n\t\ttipo_detalhe as string,\n\t\tvlr_imposto_constestado as decimal(15,2),\n\t\tvlr_imposto_icms as decimal(15,2),\n\t\tvlr_bruto as decimal(15,2),\n\t\tvlr_outros_impostos as decimal(15,2),\n\t\tdt_vencto_original as date,\n\t\tdt_pagamento as date,\n\t\tid_detalhe as decimal(10,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT d.account_no,i.id_fatura,i.id_open_item,i.nota_fiscal,i.vlr_item,i.serie_nf,c.conta_cobranca,c.vlr_contestado as vlr_total_atribuido,d.vlr_contestado as vlr_atribuido,d.dt_contestacao as dt_ajuste,CONVERT(VARCHAR, d.dt_contestacao, 8) as hr_ajuste,d.desc_operadora,d.id_operadora,d.desc_motivo,c.id_fatura_origem,c.vlr_pagamento,c.dt_emissao,c.vlr_fatura,i.uf_nf,d.cpf_cnpj,case when len(d.cpf_cnpj) = 11 then 'CPF' when len(d.cpf_cnpj) = 14 then 'CNPJ' else null end as tipo_documento,d.desc_contestacao,d.desc_detalhe,d.cc_db_ajuste,d.cc_cr_ajuste,d.tipo_instancia,d.subtype_code,d.tipo_detalhe,d.vlr_imposto_constestado,d.vlr_imposto_icms,d.vlr_bruto,d.vlr_outros_impostos,c.dt_vencto_original,c.dt_pagamento,d.id_detalhe FROM [convenio].[CVTB_FATURA_CON_KENAN] c, [convenio].[CVTB_FATURA_ITEM_KENAN] i, [convenio].[CVTB_FATURA_DET_KENAN] d  WHERE c.id_fatura_origem = i.id_fatura AND c.id_fatura_origem = d.id_fatura AND convert(numeric, c.cpf_cnpj)  = convert(numeric, i.cpf_cnpj) AND convert(numeric, c.cpf_cnpj)  = convert(numeric, d.cpf_cnpj) AND c.conta_cobranca = i.conta_cobranca AND c.conta_cobranca = d.conta_cobranca AND d.id_open_item = i.id_open_item AND c.id_lote_arquivo in (SELECT id_lote_arquivo FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE ID_LOTE = {$pLote}) AND i.id_lote_arquivo in (SELECT id_lote_arquivo FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE ID_LOTE = {$pLote}) AND d.id_lote_arquivo in (SELECT id_lote_arquivo FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE id_lote = {$pLote})\"),\n\tformat: 'query') ~> TabelasKenan\nTabelasKenan derive(vlr_item = replace(toString(vlr_item), ',' , '.'),\n\t\tvlr_total_atribuido = replace(toString(vlr_total_atribuido), ',' , '.'),\n\t\tvlr_atribuido = replace(toString(vlr_atribuido), ',' , '.'),\n\t\tvlr_pagamento = replace(toString(vlr_pagamento), ',' , '.'),\n\t\tvlr_fatura = replace(toString(vlr_fatura), ',' , '.'),\n\t\tvlr_imposto_constestado = replace(toString(vlr_imposto_constestado), ',' , '.'),\n\t\tvlr_imposto_icms = replace(toString(vlr_imposto_icms), ',' , '.'),\n\t\tvlr_bruto = replace(toString(vlr_bruto), ',' , '.'),\n\t\tvlr_outros_impostos = replace(toString(vlr_outros_impostos), ',' , '.'),\n\t\tid_lote_ajuste = $pLote,\n\t\tnome_billing = 'Kenan',\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO = replace(nota_fiscal, substring(trim(nota_fiscal), length(trim(nota_fiscal)) - 2, 3), ''),\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO = concat(trim(serie_nf), '123')) ~> AdaptaPontuacao\nAdaptaPontuacao sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_CONTESTACAO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOTA_FISCAL_ORIG as string,\n\t\tDT_EMISSAO_NF_ORIG as timestamp,\n\t\tCD_ANOMES_DT_EMISSAO as decimal(6,0),\n\t\tVLR_ORIG_NSFT as decimal(15,2),\n\t\tSERIE_NF as string,\n\t\tCOD_IDENT_CLI as string,\n\t\tCPF_CNPJ as string,\n\t\tNOME_CLIENTE as string,\n\t\tTERMINAL as string,\n\t\tVLR_TOTAL_ATRIBUIDO as decimal(15,2),\n\t\tVLR_ATRIBUIDO as decimal(15,2),\n\t\tDT_ATRIBUICAO as timestamp,\n\t\tDT_AJUSTE as timestamp,\n\t\tDESCR_OPERADORA as string,\n\t\tCOD_OPERADORA as string,\n\t\tCOD_MOTIVO_AJUSTE as string,\n\t\tDESC_MOTIVO_AJUSTE as string,\n\t\tNUM_CONTROLE_RECLAMACAO as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTA_FINANCEIRA as string,\n\t\tDESC_CONTA_FINANCEIRA as string,\n\t\tNUM_FATURA_ORIGINAL as string,\n\t\tVLR_DOC_ORIGINAL as decimal(15,2),\n\t\tFATURA_ATRIBUIDA as string,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tUF_FATURA as string,\n\t\tSEQ_RECEBIVEL as string,\n\t\tDT_EMISSAO as timestamp,\n\t\tMODELO as string,\n\t\tNUMORDEMDOITEM as decimal(3,0),\n\t\tTOTAL as decimal(15,2),\n\t\tBC_ICMS as decimal(15,2),\n\t\tICMS as decimal(15,2),\n\t\tALIQUOTA_ICMS as decimal(15,2),\n\t\tBC_ICMS_RECALCULADA as decimal(15,2),\n\t\tICMS_RECALCULADO as decimal(15,2),\n\t\tICMS_PARA_RESSARCIMENTO as decimal(15,2),\n\t\tSITUACAO as string,\n\t\tMES_APURACAO as string,\n\t\tTIPO_DOC as decimal(1,0),\n\t\tCOD_CONSUMIDOR as string,\n\t\tCHAVE_AUTENTICACAO as string,\n\t\tTOTAL_MESTRE as decimal(15,2),\n\t\tBC_ICMS_MESTRE as decimal(15,2),\n\t\tICMS_DESTACADO as decimal(15,2),\n\t\tINSCRICAO_ESTADUAL as string,\n\t\tRAZAO_SOCIAL as string,\n\t\tFL_STATUS_GERAL as string,\n\t\tID_LOTE_AJUSTE as decimal(28,0),\n\t\tID_LOTE_CONVENIO as decimal(28,0),\n\t\tCD_ITEM as string,\n\t\tDS_ITEM as string,\n\t\tHR_AJUSTE as string,\n\t\tHR_ATRIBUICAO as string,\n\t\tNOME_BILLING as string,\n\t\tTIPO_CLIENTE as string,\n\t\tDT_ABERTURA_IMPUG as timestamp,\n\t\tDT_FECHA_IMPUG as timestamp,\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tSALDO_FATURA_INI as decimal(15,2),\n\t\tSALDO_FATURA_FIM as decimal(15,2),\n\t\tCOD_CLIENTE as string,\n\t\tTIPO_DOCUMENTO as string,\n\t\tNOME_FANTASIA as string,\n\t\tCOD_GRUPO as string,\n\t\tNOME_GRUPO_ECONOMICO as string,\n\t\tSEGMENTO_CLIENTE as string,\n\t\tSUB_SEGMENTO_CLIENTE as string,\n\t\tSEGMENTO_VALOR as string,\n\t\tCLASSE_ELEGIBILIDADE as string,\n\t\tDESCR_SERV_AJUSTE as string,\n\t\tDESCR_SERV as string,\n\t\tCONTACONTABIL_DB as string,\n\t\tCONTACONTABIL_CR as string,\n\t\tDESCR_CONTACONTABIL_DB as string,\n\t\tDESCR_CONTACONTABIL_CR as string,\n\t\tSALDO_POS_AJUSTE as decimal(15,2),\n\t\tTIPO_OPERACAO as string,\n\t\tTIPO_TERMINAL as string,\n\t\tDONO_RECEITA as string,\n\t\tSUBTYPE_CODE as decimal(19,0),\n\t\tTIPO_DESCR_SERV as string,\n\t\tDT_VENCTO_FAT_FUTURA as timestamp,\n\t\tVLR_IMPOSTO_CONTESTADO as decimal(15,2),\n\t\tVLR_IMPOSTO_ICMS as decimal(15,2),\n\t\tVLR_BRUTO_ITEM as decimal(15,2),\n\t\tVLR_OUTROS_IMPOSTOS as decimal(15,2),\n\t\tVLR_AJUSTE_ITEM as decimal(15,2),\n\t\tVLR_CREDITO_AJUSTE as decimal(15,2),\n\t\tVLR_CREDITO_ITEM as decimal(15,2),\n\t\tVLR_DEVOLUCAO as decimal(15,2),\n\t\tVLR_FATURA_FUTURA as decimal(15,2),\n\t\tVLR_CONTESTADO_FUTURO as decimal(15,2),\n\t\tLOGIN_ATENDIMENTO as string,\n\t\tDT_VENC_FATURA_ORIGINAL as timestamp,\n\t\tDT_ATRIBUICAO_PGTO as timestamp,\n\t\tNUM_ITEM_ESTORNADO as decimal(10,0),\n\t\tFLG_RETIFICADO as string,\n\t\tTERMINAL_115 as string,\n\t\tVALOR_ITEM_115 as decimal(15,2),\n\t\tDT_CRIADO_EM as timestamp,\n\t\tCD_CRIADO_POR as string,\n\t\tDT_ATUALIZADO_EM as timestamp,\n\t\tCD_ATUALIZADO_POR as string,\n\t\tTP_INELEGIBILIDADE as string,\n\t\tMES_ANO_ORIGINAL as string,\n\t\tMES_ANO_FATURA as string,\n\t\tVLR_PAGAMENTO_ORIGINAL as decimal(15,2),\n\t\tID_CRITICA_CONTESTACAO as decimal(28,0),\n\t\tID_ITEM_CONVENIO_115 as decimal(28,0),\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO as string,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_CLIENTE = account_no,\n\t\tNOTA_FISCAL_ORIG = nota_fiscal,\n\t\tVLR_ORIG_NSFT = vlr_item,\n\t\tSERIE_NF = serie_nf,\n\t\tCOD_IDENT_CLI = conta_cobranca,\n\t\tCPF_CNPJ = cpf_cnpj,\n\t\tTERMINAL = tipo_instancia,\n\t\tVLR_TOTAL_ATRIBUIDO = vlr_total_atribuido,\n\t\tVLR_ATRIBUIDO = vlr_atribuido,\n\t\tDT_AJUSTE = dt_ajuste,\n\t\tHR_AJUSTE = hr_ajuste,\n\t\tDESCR_OPERADORA = desc_operadora,\n\t\tCOD_OPERADORA = id_operadora,\n\t\tDESC_MOTIVO_AJUSTE = desc_motivo,\n\t\tNUM_FATURA_ORIGINAL = id_fatura_origem,\n\t\tVLR_PAGAMENTO_ORIGINAL = vlr_pagamento,\n\t\tDT_EMISSAO_FATURA = dt_emissao,\n\t\tVLR_FATURA = vlr_fatura,\n\t\tUF_FATURA = uf_nf,\n\t\tTIPO_DOCUMENTO = tipo_documento,\n\t\tDESCR_SERV_AJUSTE = desc_contestacao,\n\t\tDESCR_SERV = desc_detalhe,\n\t\tCONTACONTABIL_DB = cc_db_ajuste,\n\t\tCONTACONTABIL_CR = cc_cr_ajuste,\n\t\tTIPO_TERMINAL = tipo_instancia,\n\t\tSUBTYPE_CODE = subtype_code,\n\t\tTIPO_DESCR_SERV = tipo_detalhe,\n\t\tVLR_IMPOSTO_CONTESTADO = vlr_imposto_constestado,\n\t\tVLR_IMPOSTO_ICMS = vlr_imposto_icms,\n\t\tVLR_BRUTO_ITEM = vlr_bruto,\n\t\tVLR_OUTROS_IMPOSTOS = vlr_outros_impostos,\n\t\tNOME_BILLING = nome_billing,\n\t\tDT_VENC_FATURA_ORIGINAL = dt_vencto_original,\n\t\tDT_ATRIBUICAO_PGTO = dt_pagamento,\n\t\tNUM_ITEM_ESTORNADO = id_detalhe,\n\t\tID_LOTE_AJUSTE = id_lote_ajuste,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO,\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO\n\t)) ~> TabelaCONTESTACAO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoContestacaoAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atlys_adj",
								"type": "DatasetReference"
							},
							"name": "srcArqAtlysAdj"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_ATLYS_ADJ",
								"type": "DatasetReference"
							},
							"name": "GravaTabContestacoesAtlysAdj"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCLIENTE_ID as string,\n\t\tNOTA_FISCAL as string,\n\t\tDTEMISSAONF as date 'yyyyMMdd',\n\t\tVALOR_ORIG_NFST as string,\n\t\tSERIE as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tNOMECLIENTE as string,\n\t\tTERMINAL as string,\n\t\tVALOR_CONTEST_AJUSTE as string,\n\t\tVALOR_ATRIBUIDO as string,\n\t\tDATA_ATRIBUICAO as date 'yyyyMMdd',\n\t\tHORA_ATRIBUICAO as string,\n\t\tDATA_AJUSTE as date 'yyyyMMdd',\n\t\tHORA_AJUSTE as string,\n\t\tOPERADORA as string,\n\t\t{CODIGO OPERADORA} as string,\n\t\tCODMOTIVOAJUSTES as string,\n\t\tDESCMOTIVOAJUSTE as string,\n\t\tDATAABERTURAIMPU as date 'yyyyMMdd',\n\t\tDATAFECHIMPUG as date 'yyyyMMdd',\n\t\tDSPUT_ID as string,\n\t\tTP_NOTA_FISCAL as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTACONTABIL as string,\n\t\tDESCRCONTACONTABIL as string,\n\t\tNUMERO_FATURA as string,\n\t\tVALOR_DOCTO_ORIGINAL as string,\n\t\tMES_ANO_REFERENTE as string,\n\t\tDATAVENCFATUR as date 'yyyyMMdd',\n\t\tVALOR_PAGAMENTO as string,\n\t\tDATA_ATRIBUICAO_PGTO as date 'yyyyMMdd',\n\t\tFATU_ATRIBUIDA as string,\n\t\tDTEMISSAOFATURA as date 'yyyyMMdd',\n\t\tMESANOFATURA as string,\n\t\tVALOR_FATURA as string,\n\t\tSALDO_DEVEDOR as string,\n\t\tUF as string,\n\t\tOPERADORA_REAL as string,\n\t\tSALDO_FATURA_INI as string,\n\t\tSALDO_FATURA_FIM as string,\n\t\tSEQ_RECEBIVEL as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['atlys/validados_a_processar','atlys/processados']) ~> srcArqAtlysAdj\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(28,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqAtlysAdj derive(SyntheticKey = 1,\n\t\tNEW_VLR_ORIG_NFST = replace(VALOR_ORIG_NFST, \",\", \".\"),\n\t\tNEW_VALOR_CONTEST_AJUSTE = replace(VALOR_CONTEST_AJUSTE, \",\", \".\"),\n\t\tNEW_VALOR_ATRIBUIDO = replace(VALOR_ATRIBUIDO, \",\", \".\"),\n\t\tNEW_VALOR_DOCTO_ORIGINAL = replace(VALOR_DOCTO_ORIGINAL, \",\", \".\"),\n\t\tNEW_VALOR_PAGAMENTO = replace(VALOR_PAGAMENTO, \",\", \".\"),\n\t\tNEW_VALOR_FATURA = replace(VALOR_FATURA, \",\", \".\"),\n\t\tNEW_SALDO_DEVEDOR = replace(SALDO_DEVEDOR, \",\", \".\"),\n\t\tNEW_SALDO_FATURA_INI = replace(SALDO_FATURA_INI, \",\", \".\"),\n\t\tNEW_SALDO_FATURA_FIM = replace(SALDO_FATURA_FIM, \",\", \".\")) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_ATLYS_ADJ as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOTA_FISCAL as string,\n\t\tDT_EMISSAO_NF as timestamp,\n\t\tVLR_ORIG_NFST as decimal(10,2),\n\t\tSERIE as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tNOM_CLIENTE as string,\n\t\tNUM_TERMINAL as string,\n\t\tVLR_CONTEST_AJUSTE as decimal(10,2),\n\t\tVLR_ATRIBUIDO as decimal(10,2),\n\t\tDT_ATRIBUICAO as timestamp,\n\t\tHR_ATRIBUICAO as string,\n\t\tDT_AJUSTE as timestamp,\n\t\tHR_AJUSTE as string,\n\t\tOPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tCOD_MOTIVO_AJUSTES as string,\n\t\tDESC_MOTIVO_AJUSTE as string,\n\t\tDATA_ABERTURA_IMPU as timestamp,\n\t\tDATA_FECH_IMPUG as timestamp,\n\t\tDSPUT_ID as string,\n\t\tTP_NOTA_FISCAL as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTA_CONTABIL as string,\n\t\tDESCR_CONTA_CONTABIL as string,\n\t\tNUMERO_FATURA as string,\n\t\tVALOR_DOCTO_ORIGINAL as decimal(15,2),\n\t\tMES_ANO_REFERENTE as string,\n\t\tDATA_VENC_FATUR as timestamp,\n\t\tVALOR_PAGAMENTO as decimal(15,2),\n\t\tDATA_ATRIBUICAO_PGTO as timestamp,\n\t\tFATU_ATRIBUIDA as string,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tMES_ANO_FATURA as string,\n\t\tVALOR_FATURA as decimal(15,2),\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tUF as string,\n\t\tOPERADORA_REAL as string,\n\t\tSALDO_FATURA_INI as decimal(15,2),\n\t\tSALDO_FATURA_FIM as decimal(15,2),\n\t\tSEQ_RECEBIVEL as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tID_CLIENTE = CLIENTE_ID,\n\t\tNOTA_FISCAL,\n\t\tDT_EMISSAO_NF = DTEMISSAONF,\n\t\tVLR_ORIG_NFST = NEW_VLR_ORIG_NFST,\n\t\tSERIE,\n\t\tCONTA_CLIENTE,\n\t\tCNPJ_CPF,\n\t\tNOM_CLIENTE = NOMECLIENTE,\n\t\tNUM_TERMINAL = TERMINAL,\n\t\tVLR_CONTEST_AJUSTE = NEW_VALOR_CONTEST_AJUSTE,\n\t\tVLR_ATRIBUIDO = NEW_VALOR_ATRIBUIDO,\n\t\tDT_ATRIBUICAO = DATA_ATRIBUICAO,\n\t\tHR_ATRIBUICAO = HORA_ATRIBUICAO,\n\t\tDT_AJUSTE = DATA_AJUSTE,\n\t\tHR_AJUSTE = HORA_AJUSTE,\n\t\tOPERADORA,\n\t\tCODIGO_OPERADORA = {CODIGO OPERADORA},\n\t\tCOD_MOTIVO_AJUSTES = CODMOTIVOAJUSTES,\n\t\tDESC_MOTIVO_AJUSTE = DESCMOTIVOAJUSTE,\n\t\tDATA_ABERTURA_IMPU = DATAABERTURAIMPU,\n\t\tDATA_FECH_IMPUG = DATAFECHIMPUG,\n\t\tDSPUT_ID,\n\t\tTP_NOTA_FISCAL,\n\t\tCLASSE_RECEBER,\n\t\tCONTA_CONTABIL = CONTACONTABIL,\n\t\tDESCR_CONTA_CONTABIL = DESCRCONTACONTABIL,\n\t\tNUMERO_FATURA,\n\t\tVALOR_DOCTO_ORIGINAL = NEW_VALOR_DOCTO_ORIGINAL,\n\t\tMES_ANO_REFERENTE,\n\t\tDATA_VENC_FATUR = DATAVENCFATUR,\n\t\tVALOR_PAGAMENTO = NEW_VALOR_PAGAMENTO,\n\t\tDATA_ATRIBUICAO_PGTO,\n\t\tFATU_ATRIBUIDA,\n\t\tDT_EMISSAO_FATURA = DTEMISSAOFATURA,\n\t\tMES_ANO_FATURA = MESANOFATURA,\n\t\tVALOR_FATURA = NEW_VALOR_FATURA,\n\t\tSALDO_DEVEDOR = NEW_SALDO_DEVEDOR,\n\t\tUF,\n\t\tOPERADORA_REAL,\n\t\tSALDO_FATURA_INI = NEW_SALDO_FATURA_INI,\n\t\tSALDO_FATURA_FIM = NEW_SALDO_FATURA_FIM,\n\t\tSEQ_RECEBIVEL\n\t)) ~> GravaTabContestacoesAtlysAdj"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoKenanContestada')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_contestada",
								"type": "DatasetReference"
							},
							"name": "srcArqKenanContestada"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_FATURA_CON_KENAN",
								"type": "DatasetReference"
							},
							"name": "GravaTabFaturaConKenan"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCONTA_COBRANCA as string,\n\t\tCNPJ_CPF as string,\n\t\tCATEGORIA_CLIENTE as string,\n\t\t{UF_COBRANÃ‡A} as string,\n\t\tID_FATURA as string,\n\t\tID_FATURA_ORIGEM as string,\n\t\tDATA_VENCTO_ORIGINAL as date 'dd/MM/yyyy',\n\t\tDATA_VENCTO_BOLETO_OU_BAIXA as date 'dd/MM/yyyy',\n\t\tVALOR_FATURA as string,\n\t\tVALOR_CONTESTADO as string,\n\t\tVALOR_PAGAMENTO as string,\n\t\tVALOR_PAGTO_CREDITO_ANTERIOR as string,\n\t\tDATA_PAGTO as date 'dd/MM/yyyy',\n\t\tDATA_FECHAMENTO_FATURA as timestamp 'dd/MM/yyyy HH:mm:ss',\n\t\tDATA_EMISSAO as timestamp 'dd/MM/yyyy HH:mm:ss',\n\t\tDATA_AJUSTE as date 'dd/MM/yyyy'\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['kenan/validados_a_processar','kenan/processados']) ~> srcArqKenanContestada\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(28,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqKenanContestada derive(SyntheticKey = 1,\n\t\tVALOR_FATURA = toDecimal(VALOR_FATURA),\n\t\tVALOR_CONTESTADO = toDecimal(VALOR_CONTESTADO),\n\t\tVALOR_PAGAMENTO = toDecimal(VALOR_PAGAMENTO),\n\t\tVALOR_PAGTO_CREDITO_ANTERIOR = toDecimal(VALOR_PAGTO_CREDITO_ANTERIOR)) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_FATURA_CON_KENAN as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCONTA_COBRANCA as string,\n\t\tCPF_CNPJ as string,\n\t\tCATEGORIA_CLIENTE as string,\n\t\tUF_COBRANCA as string,\n\t\tID_FATURA as string,\n\t\tID_FATURA_ORIGEM as string,\n\t\tDT_VENCTO_ORIGINAL as date,\n\t\tDT_VENCTO_BOLETO_BAIXA as date,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tVLR_CONTESTADO as decimal(15,2),\n\t\tVLR_PAGAMENTO as decimal(15,2),\n\t\tVLR_PGTO_CREDITO_ANT as decimal(15,2),\n\t\tDT_PAGAMENTO as date,\n\t\tDT_FECHA_FATURA as date,\n\t\tDT_EMISSAO as date,\n\t\tDT_AJUSTE as date,\n\t\tSTEP_EXECUTION_ID as decimal(19,0),\n\t\tJOB_EXECUTION_ID as decimal(19,0),\n\t\tDT_REFERENCIA as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCONTA_COBRANCA,\n\t\tCPF_CNPJ = CNPJ_CPF,\n\t\tCATEGORIA_CLIENTE,\n\t\tUF_COBRANCA = {UF_COBRANÃ‡A},\n\t\tID_FATURA,\n\t\tID_FATURA_ORIGEM,\n\t\tDT_VENCTO_ORIGINAL = DATA_VENCTO_ORIGINAL,\n\t\tDT_VENCTO_BOLETO_BAIXA = DATA_VENCTO_BOLETO_OU_BAIXA,\n\t\tVLR_FATURA = VALOR_FATURA,\n\t\tVLR_CONTESTADO = VALOR_CONTESTADO,\n\t\tVLR_PAGAMENTO = VALOR_PAGAMENTO,\n\t\tVLR_PGTO_CREDITO_ANT = VALOR_PAGTO_CREDITO_ANTERIOR,\n\t\tDT_PAGAMENTO = DATA_PAGTO,\n\t\tDT_FECHA_FATURA = DATA_FECHAMENTO_FATURA,\n\t\tDT_EMISSAO = DATA_EMISSAO,\n\t\tDT_AJUSTE = DATA_AJUSTE\n\t)) ~> GravaTabFaturaConKenan"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoKenanDetalhe')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_detalhe",
								"type": "DatasetReference"
							},
							"name": "srcArqKenanDetalhe"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_FATURA_DET_KENAN",
								"type": "DatasetReference"
							},
							"name": "GravaTabContestacoesAtlysRcbl"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCONTA_COBRANCA as string,\n\t\tCNPJ_CPF as string,\n\t\tID_FATURA as string,\n\t\tOPEN_ITEM_ID as string,\n\t\tID_DETALHE as string,\n\t\tID_OPERADORA as string,\n\t\tDESCR_OPERADORA as string,\n\t\tTIPO_DETALHE as string,\n\t\tDESCR_DETALHE as string,\n\t\tTIPO_INSTANCIA as string,\n\t\tINSTANCIA as string,\n\t\tVALOR_BRUTO as string,\n\t\tVALOR_CONTESTADO as string,\n\t\tVALOR_IMPOSTO_ICMS as string,\n\t\tVALOR_OUTROS_IMPOSTOS as string,\n\t\tVALOR_IMPOSTO_CONTESTADO as string,\n\t\tCC_CR_AJUSTE as string,\n\t\tCC_DB_AJUSTE as string,\n\t\tCC_CREDITO_FAT as string,\n\t\tCC_DEBITO_FAT as string,\n\t\tCC_CREDITO_IMPOSTO as string,\n\t\tCC_DEBITO_IMPOSTO as string,\n\t\tDESCR_CONTESTACAO as string,\n\t\tDESCR_MOTIVO as string,\n\t\tDATA_CONTESTACAO as timestamp 'dd/MM/yyyy HH:mm:ss',\n\t\tACCOUNT_NO as string,\n\t\tSUBTYPE_CODE as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['kenan/validados_a_processar','kenan/processados']) ~> srcArqKenanDetalhe\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqKenanDetalhe derive(SyntheticKey = 1,\n\t\tID_DETALHE = toDecimal(ID_DETALHE),\n\t\tVALOR_BRUTO = toDecimal(VALOR_BRUTO),\n\t\tVALOR_CONTESTADO = toDecimal(VALOR_CONTESTADO),\n\t\tVALOR_IMPOSTO_ICMS = toDecimal(VALOR_IMPOSTO_ICMS),\n\t\tVALOR_OUTROS_IMPOSTOS = toDecimal(VALOR_OUTROS_IMPOSTOS),\n\t\tVALOR_IMPOSTO_CONTESTADO = toDecimal(VALOR_IMPOSTO_CONTESTADO),\n\t\tSUBTYPE_CODE = toDecimal(SUBTYPE_CODE)) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_FATURA_DET_KENAN as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCONTA_COBRANCA as string,\n\t\tCPF_CNPJ as string,\n\t\tID_FATURA as string,\n\t\tID_OPEN_ITEM as string,\n\t\tID_DETALHE as decimal(10,0),\n\t\tID_OPERADORA as string,\n\t\tDESC_OPERADORA as string,\n\t\tTIPO_DETALHE as string,\n\t\tDESC_DETALHE as string,\n\t\tTIPO_INSTANCIA as string,\n\t\tNUM_INSTANCIA as string,\n\t\tVLR_BRUTO as decimal(15,2),\n\t\tVLR_CONTESTADO as decimal(15,2),\n\t\tVLR_IMPOSTO_ICMS as decimal(15,2),\n\t\tVLR_OUTROS_IMPOSTOS as decimal(15,2),\n\t\tVLR_IMPOSTO_CONSTESTADO as decimal(15,2),\n\t\tCC_CR_AJUSTE as string,\n\t\tCC_DB_AJUSTE as string,\n\t\tCC_CREDITO_FAT as string,\n\t\tCC_DEBITO_FAT as string,\n\t\tCC_CREDITO_IMPOSTO as string,\n\t\tCC_DEBITO_IMPOSTO as string,\n\t\tDESC_CONTESTACAO as string,\n\t\tDESC_MOTIVO as string,\n\t\tDT_CONTESTACAO as date,\n\t\tACCOUNT_NO as string,\n\t\tSUBTYPE_CODE as decimal(19,0),\n\t\tSTEP_EXECUTION_ID as decimal(19,0),\n\t\tJOB_EXECUTION_ID as decimal(19,0)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCONTA_COBRANCA,\n\t\tCPF_CNPJ = CNPJ_CPF,\n\t\tID_FATURA,\n\t\tID_OPEN_ITEM = OPEN_ITEM_ID,\n\t\tID_DETALHE,\n\t\tID_OPERADORA,\n\t\tDESC_OPERADORA = DESCR_OPERADORA,\n\t\tTIPO_DETALHE,\n\t\tDESC_DETALHE = DESCR_DETALHE,\n\t\tTIPO_INSTANCIA,\n\t\tNUM_INSTANCIA = INSTANCIA,\n\t\tVLR_BRUTO = VALOR_BRUTO,\n\t\tVLR_CONTESTADO = VALOR_CONTESTADO,\n\t\tVLR_IMPOSTO_ICMS = VALOR_IMPOSTO_ICMS,\n\t\tVLR_OUTROS_IMPOSTOS = VALOR_OUTROS_IMPOSTOS,\n\t\tVLR_IMPOSTO_CONSTESTADO = VALOR_IMPOSTO_CONTESTADO,\n\t\tCC_CR_AJUSTE,\n\t\tCC_DB_AJUSTE,\n\t\tCC_CREDITO_FAT,\n\t\tCC_DEBITO_FAT,\n\t\tCC_CREDITO_IMPOSTO,\n\t\tCC_DEBITO_IMPOSTO,\n\t\tDESC_CONTESTACAO = DESCR_CONTESTACAO,\n\t\tDESC_MOTIVO = DESCR_MOTIVO,\n\t\tDT_CONTESTACAO = DATA_CONTESTACAO,\n\t\tACCOUNT_NO,\n\t\tSUBTYPE_CODE\n\t)) ~> GravaTabContestacoesAtlysRcbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoKenanItem')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_Item",
								"type": "DatasetReference"
							},
							"name": "srcArqKenanItem"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_FATURA_ITEM_KENAN",
								"type": "DatasetReference"
							},
							"name": "GravaTabContestacoesAtlysRcbl"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCONTA_COBRANCA as string,\n\t\tCNPJ_CPF as string,\n\t\tNUMERO_FATURA as string,\n\t\tOPEN_ITEM_ID as string,\n\t\tDESCR_OPEN_ITEM as string,\n\t\tVALOR_ITEM as string,\n\t\tVALOR_CONTESTADO as string,\n\t\tVALOR_PAGO_ITEM as string,\n\t\tFECHAMENTO_SALDO_ABERTO_ITEM as timestamp 'dd/MM/yyyy HH:mm:ss',\n\t\tNOTA_FISCAL as string,\n\t\tUF_NF as string,\n\t\tSERIE_NF as string,\n\t\tSUBSERIE_NF as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['kenan/validados_a_processar','kenan/processados']) ~> srcArqKenanItem\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqKenanItem derive(SyntheticKey = 1,\n\t\tVALOR_ITEM = toDecimal(VALOR_ITEM),\n\t\tVALOR_CONTESTADO = toDecimal(VALOR_CONTESTADO),\n\t\tVALOR_PAGO_ITEM = toDecimal(VALOR_PAGO_ITEM)) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_FATURA_ITEM_KENAN as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCONTA_COBRANCA as string,\n\t\tCPF_CNPJ as string,\n\t\tID_FATURA as string,\n\t\tID_OPEN_ITEM as string,\n\t\tDESC_OPEN_ITEM as string,\n\t\tVLR_ITEM as decimal(15,2),\n\t\tVLR_CONTESTADO as decimal(15,2),\n\t\tVLR_PAGO_ITEM as decimal(15,2),\n\t\tDT_FECHA_SALDO_ITEM as date,\n\t\tNOTA_FISCAL as string,\n\t\tUF_NF as string,\n\t\tSERIE_NF as string,\n\t\tSUBSERIE_NF as string,\n\t\tSTEP_EXECUTION_ID as decimal(19,0),\n\t\tJOB_EXECUTION_ID as decimal(19,0)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCONTA_COBRANCA,\n\t\tCPF_CNPJ = CNPJ_CPF,\n\t\tID_FATURA = NUMERO_FATURA,\n\t\tID_OPEN_ITEM = OPEN_ITEM_ID,\n\t\tDESC_OPEN_ITEM = DESCR_OPEN_ITEM,\n\t\tVLR_ITEM = VALOR_ITEM,\n\t\tVLR_CONTESTADO = VALOR_CONTESTADO,\n\t\tVLR_PAGO_ITEM = VALOR_PAGO_ITEM,\n\t\tDT_FECHA_SALDO_ITEM = FECHAMENTO_SALDO_ABERTO_ITEM,\n\t\tNOTA_FISCAL,\n\t\tUF_NF,\n\t\tSERIE_NF,\n\t\tSUBSERIE_NF\n\t)) ~> GravaTabContestacoesAtlysRcbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoRecebiveisAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atlys_rcbl",
								"type": "DatasetReference"
							},
							"name": "srcArqAtlysRcbl"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_ATLYS_RCBL",
								"type": "DatasetReference"
							},
							"name": "GravaTabContestacoesAtlysRcbl"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCLIENTE_ID as string,\n\t\tNOMECLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCLASSE_RECEBER as string,\n\t\tOPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tNUMERO_FATURA as string,\n\t\tMES_ANO_REFERENTE as string,\n\t\tVALOR_DOCTO_ORIGINAL as string,\n\t\tFATURA_ATRIBUIDA as string,\n\t\tMESANOFATURA as string,\n\t\tVALOR_FATURA as string,\n\t\tSALDO_DEVIDO_ORIG as string,\n\t\tDATA_EMISSAO_FATURA as date 'yyyyMMdd',\n\t\tVALOR_TOTAL_PAGAMENTO as string,\n\t\tDATA_FEBRABAN as date 'yyyyMMdd',\n\t\tVALOR_ATRIBUICAO as string,\n\t\tUF as string,\n\t\tDATA_ATRIBUICAO_PGTO as date 'yyyyMMdd',\n\t\tHORA_ATRIBUICAO_PGTO as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['atlys/validados_a_processar','atlys/processados']) ~> srcArqAtlysRcbl\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqAtlysRcbl derive(SyntheticKey = 1,\n\t\tNEW_VALOR_DOCTO_ORIGINAL = replace(VALOR_DOCTO_ORIGINAL, ',' , '.'),\n\t\tNEW_VALOR_FATURA = replace(VALOR_FATURA, ',' , '.'),\n\t\tNEW_SALDO_DEVIDO_ORIG = replace(SALDO_DEVIDO_ORIG, ',' , '.'),\n\t\tNEW_VALOR_TOTAL_PAGAMENTO = replace(VALOR_TOTAL_PAGAMENTO, ',' , '.'),\n\t\tNEW_VALOR_ATRIBUICAO = replace(VALOR_ATRIBUICAO, ',' , '.')) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_ATLYS_RCBL as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOME_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCLASSE_RECEBER as string,\n\t\tOPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tNUMERO_FATURA as string,\n\t\tMES_ANO_REFERENTE as string,\n\t\tVALOR_DOCTO_ORIGINAL as decimal(15,2),\n\t\tFATURA_ATRIBUIDA as string,\n\t\tMES_ANO_FATURA as string,\n\t\tVALOR_FATURA as decimal(15,2),\n\t\tSALDO_DEVIDO_ORIG as decimal(15,2),\n\t\tDATA_EMISSAO_FATURA as timestamp,\n\t\tVALOR_TOTAL_PAGAMENTO as decimal(15,2),\n\t\tDATA_FEBRABAN as timestamp,\n\t\tVALOR_ATRIBUICAO as decimal(15,2),\n\t\tUF as string,\n\t\tDATA_ATRIBUICAO_PGTO as timestamp,\n\t\tHORA_ATRIBUICAO_PGTO as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tID_CLIENTE = CLIENTE_ID,\n\t\tNOME_CLIENTE = NOMECLIENTE,\n\t\tCNPJ_CPF,\n\t\tCONTA_CLIENTE,\n\t\tCLASSE_RECEBER,\n\t\tOPERADORA,\n\t\tCODIGO_OPERADORA,\n\t\tNUMERO_FATURA,\n\t\tMES_ANO_REFERENTE,\n\t\tVALOR_DOCTO_ORIGINAL = NEW_VALOR_DOCTO_ORIGINAL,\n\t\tFATURA_ATRIBUIDA,\n\t\tMES_ANO_FATURA = MESANOFATURA,\n\t\tVALOR_FATURA = NEW_VALOR_FATURA,\n\t\tSALDO_DEVIDO_ORIG = NEW_SALDO_DEVIDO_ORIG,\n\t\tDATA_EMISSAO_FATURA,\n\t\tVALOR_TOTAL_PAGAMENTO = NEW_VALOR_TOTAL_PAGAMENTO,\n\t\tDATA_FEBRABAN,\n\t\tVALOR_ATRIBUICAO = NEW_VALOR_ATRIBUICAO,\n\t\tUF,\n\t\tDATA_ATRIBUICAO_PGTO,\n\t\tHORA_ATRIBUICAO_PGTO\n\t)) ~> GravaTabContestacoesAtlysRcbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfLayoutAjustadoAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLayoutCorrigido"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_ATLYS_ADJ",
								"type": "DatasetReference"
							},
							"name": "GravaArquivoAtlysCorrigido"
						}
					],
					"transformations": [
						{
							"name": "SeparaEmColunas"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pIdLoteArquivo as string",
						"}",
						"source(output(",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"SELECT ID_LOTE_ARQUIVO, DS_LINHA_RECUPERADA FROM CONVENIO.CVTB_CARGA_ERRO_LAYOUT WHERE FL_CORRIGIDO='S' AND DS_LINHA_RECUPERADA IS NOT NULL AND ID_LOTE_ARQUIVO=CONVERT(NUMERIC(28),{$pIdLoteArquivo})\"),",
						"     format: 'query') ~> BuscaLayoutCorrigido",
						"BuscaLayoutCorrigido derive(ID_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[1],",
						"          NOTA_FISCAL = split(DS_LINHA_RECUPERADA, '|')[2],",
						"          DT_EMISSAO_NF = toDate(split(DS_LINHA_RECUPERADA, '|')[3], 'yyyyMMdd'),",
						"          VLR_ORIG_NFST = replace((split(DS_LINHA_RECUPERADA, '|')[4]), \",\", \".\"),",
						"          SERIE = split(DS_LINHA_RECUPERADA, '|')[5],",
						"          CONTA_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[6],",
						"          CNPJ_CPF = split(DS_LINHA_RECUPERADA, '|')[7],",
						"          NOM_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[8],",
						"          NUM_TERMINAL = split(DS_LINHA_RECUPERADA, '|')[9],",
						"          VLR_CONTEST_AJUSTE = replace((split(DS_LINHA_RECUPERADA, '|')[10]), \",\", \".\"),",
						"          VLR_ATRIBUIDO = replace((split(DS_LINHA_RECUPERADA, '|')[11]),\",\", \".\"),",
						"          DT_ATRIBUICAO = toDate(split(DS_LINHA_RECUPERADA, '|')[12], 'yyyyMMdd'),",
						"          HR_ATRIBUICAO = split(DS_LINHA_RECUPERADA, '|')[13],",
						"          DT_AJUSTE = toDate(split(DS_LINHA_RECUPERADA, '|')[14], 'yyyyMMdd'),",
						"          HR_AJUSTE = split(DS_LINHA_RECUPERADA, '|')[15],",
						"          OPERADORA = split(DS_LINHA_RECUPERADA, '|')[16],",
						"          CODIGO_OPERADORA = split(DS_LINHA_RECUPERADA, '|')[17],",
						"          COD_MOTIVO_AJUSTES = split(DS_LINHA_RECUPERADA, '|')[18],",
						"          DESC_MOTIVO_AJUSTE = split(DS_LINHA_RECUPERADA, '|')[19],",
						"          DATA_ABERTURA_IMPU = toDate(split(DS_LINHA_RECUPERADA, '|')[20], 'yyyyMMdd'),",
						"          DATA_FECH_IMPUG = toDate(split(DS_LINHA_RECUPERADA, '|')[21], 'yyyyMMdd'),",
						"          DSPUT_ID = split(DS_LINHA_RECUPERADA, '|')[22],",
						"          TP_NOTA_FISCAL = split(DS_LINHA_RECUPERADA, '|')[23],",
						"          CLASSE_RECEBER = split(DS_LINHA_RECUPERADA, '|')[24],",
						"          CONTA_CONTABIL = split(DS_LINHA_RECUPERADA, '|')[25],",
						"          DESCR_CONTA_CONTABIL = split(DS_LINHA_RECUPERADA, '|')[26],",
						"          NUMERO_FATURA = split(DS_LINHA_RECUPERADA, '|')[27],",
						"          VALOR_DOCTO_ORIGINAL = replace((split(DS_LINHA_RECUPERADA, '|')[28]), \",\", \".\"),",
						"          MES_ANO_REFERENTE = split(DS_LINHA_RECUPERADA, '|')[29],",
						"          DATA_VENC_FATUR = toDate(split(DS_LINHA_RECUPERADA, '|')[30], 'yyyyMMdd'),",
						"          VALOR_PAGAMENTO = replace((split(DS_LINHA_RECUPERADA, '|')[31]), \",\", \".\"),",
						"          DATA_ATRIBUICAO_PGTO = toDate(split(DS_LINHA_RECUPERADA, '|')[32], 'yyyyMMdd'),",
						"          FATU_ATRIBUIDA = split(DS_LINHA_RECUPERADA, '|')[33],",
						"          DT_EMISSAO_FATURA = toDate(split(DS_LINHA_RECUPERADA, '|')[34], 'yyyyMMdd'),",
						"          MES_ANO_FATURA = split(DS_LINHA_RECUPERADA, '|')[35],",
						"          VALOR_FATURA = replace((split(DS_LINHA_RECUPERADA, '|')[36]), \",\", \".\"),",
						"          SALDO_DEVEDOR = replace((split(DS_LINHA_RECUPERADA, '|')[37]), \",\", \".\"),",
						"          UF = split(DS_LINHA_RECUPERADA, '|')[38],",
						"          OPERADORA_REAL = split(DS_LINHA_RECUPERADA, '|')[39],",
						"          SALDO_FATURA_INI = replace((split(DS_LINHA_RECUPERADA, '|')[40]), \",\", \".\"),",
						"          SALDO_FATURA_FIM = replace((split(DS_LINHA_RECUPERADA, '|')[41]), \",\", \".\"),",
						"          SEQ_RECEBIVEL = split(DS_LINHA_RECUPERADA, '|')[42]) ~> SeparaEmColunas",
						"SeparaEmColunas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_ATLYS_ADJ as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          ID_CLIENTE as string,",
						"          NOTA_FISCAL as string,",
						"          DT_EMISSAO_NF as timestamp,",
						"          VLR_ORIG_NFST as decimal(10,2),",
						"          SERIE as string,",
						"          CONTA_CLIENTE as string,",
						"          CNPJ_CPF as string,",
						"          NOM_CLIENTE as string,",
						"          NUM_TERMINAL as string,",
						"          VLR_CONTEST_AJUSTE as decimal(10,2),",
						"          VLR_ATRIBUIDO as decimal(10,2),",
						"          DT_ATRIBUICAO as timestamp,",
						"          HR_ATRIBUICAO as string,",
						"          DT_AJUSTE as timestamp,",
						"          HR_AJUSTE as string,",
						"          OPERADORA as string,",
						"          CODIGO_OPERADORA as string,",
						"          COD_MOTIVO_AJUSTES as string,",
						"          DESC_MOTIVO_AJUSTE as string,",
						"          DATA_ABERTURA_IMPU as timestamp,",
						"          DATA_FECH_IMPUG as timestamp,",
						"          DSPUT_ID as string,",
						"          TP_NOTA_FISCAL as string,",
						"          CLASSE_RECEBER as string,",
						"          CONTA_CONTABIL as string,",
						"          DESCR_CONTA_CONTABIL as string,",
						"          NUMERO_FATURA as string,",
						"          VALOR_DOCTO_ORIGINAL as decimal(15,2),",
						"          MES_ANO_REFERENTE as string,",
						"          DATA_VENC_FATUR as timestamp,",
						"          VALOR_PAGAMENTO as decimal(15,2),",
						"          DATA_ATRIBUICAO_PGTO as timestamp,",
						"          FATU_ATRIBUIDA as string,",
						"          DT_EMISSAO_FATURA as timestamp,",
						"          MES_ANO_FATURA as string,",
						"          VALOR_FATURA as decimal(15,2),",
						"          SALDO_DEVEDOR as decimal(15,2),",
						"          UF as string,",
						"          OPERADORA_REAL as string,",
						"          SALDO_FATURA_INI as decimal(15,2),",
						"          SALDO_FATURA_FIM as decimal(15,2),",
						"          SEQ_RECEBIVEL as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          ID_CLIENTE,",
						"          NOTA_FISCAL,",
						"          DT_EMISSAO_NF,",
						"          VLR_ORIG_NFST,",
						"          SERIE,",
						"          CONTA_CLIENTE,",
						"          CNPJ_CPF,",
						"          NOM_CLIENTE,",
						"          NUM_TERMINAL,",
						"          VLR_CONTEST_AJUSTE,",
						"          VLR_ATRIBUIDO,",
						"          DT_ATRIBUICAO,",
						"          HR_ATRIBUICAO,",
						"          DT_AJUSTE,",
						"          HR_AJUSTE,",
						"          OPERADORA,",
						"          CODIGO_OPERADORA,",
						"          COD_MOTIVO_AJUSTES,",
						"          DESC_MOTIVO_AJUSTE,",
						"          DATA_ABERTURA_IMPU,",
						"          DATA_FECH_IMPUG,",
						"          DSPUT_ID,",
						"          TP_NOTA_FISCAL,",
						"          CLASSE_RECEBER,",
						"          CONTA_CONTABIL,",
						"          DESCR_CONTA_CONTABIL,",
						"          NUMERO_FATURA,",
						"          VALOR_DOCTO_ORIGINAL,",
						"          MES_ANO_REFERENTE,",
						"          DATA_VENC_FATUR,",
						"          VALOR_PAGAMENTO,",
						"          DATA_ATRIBUICAO_PGTO,",
						"          FATU_ATRIBUIDA,",
						"          DT_EMISSAO_FATURA,",
						"          MES_ANO_FATURA,",
						"          VALOR_FATURA,",
						"          SALDO_DEVEDOR,",
						"          UF,",
						"          OPERADORA_REAL,",
						"          SALDO_FATURA_INI,",
						"          SALDO_FATURA_FIM,",
						"          SEQ_RECEBIVEL",
						"     )) ~> GravaArquivoAtlysCorrigido"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Cadastral')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_Cadastral",
								"type": "DatasetReference"
							},
							"name": "EntradaArqCadastral"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_Cadastral_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaArqCadastral"
						}
					],
					"transformations": [
						{
							"name": "MapeamentoArqCadastral"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ArquivoCadastral as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EntradaArqCadastral",
						"EntradaArqCadastral derive(CNPJ_CPF = trim(substring(ArquivoCadastral, 1, 14)),",
						"          IE = trim(substring(ArquivoCadastral, 15, 14)),",
						"          RazaoSocial = trim(substring(ArquivoCadastral, 29, 35)),",
						"          Logradouro = trim(substring(ArquivoCadastral, 64, 45)),",
						"          NumeroEnd = trim(substring(ArquivoCadastral, 109, 5)),",
						"          Complemento = trim(substring(ArquivoCadastral, 114, 15)),",
						"          CEP = trim(substring(ArquivoCadastral, 129, 8)),",
						"          Bairro = trim(substring(ArquivoCadastral, 137, 15)),",
						"          Municipio = trim(substring(ArquivoCadastral, 152, 30)),",
						"          UF = trim(substring(ArquivoCadastral, 182, 2)),",
						"          TelefoneContato = trim(substring(ArquivoCadastral, 184, 12)),",
						"          CodigoIdentificacaoConsumidor_Assinante = trim(substring(ArquivoCadastral, 196, 12)),",
						"          NroTerminaltelefonico_UnidadeConsumidora = trim(substring(ArquivoCadastral, 208, 12)),",
						"          UFHabilitacaoTerminalTelefonico = trim(substring(ArquivoCadastral, 220, 2)),",
						"          DataEmissao = trim(substring(ArquivoCadastral, 222, 8)),",
						"          Modelo = trim(substring(ArquivoCadastral, 230, 2)),",
						"          Serie = trim(substring(ArquivoCadastral, 232, 3)),",
						"          Numero = trim(substring(ArquivoCadastral, 235, 9)),",
						"          CodigoMunicipo = trim(substring(ArquivoCadastral, 244, 7)),",
						"          Brancos_reservadoparausofuturo = trim(substring(ArquivoCadastral, 251, 5)),",
						"          CodigoAutenticacaoDigital = trim(substring(ArquivoCadastral, 256, 32)),",
						"          AnoEmissaoNF = trim(substring(ArquivoCadastral, 222, 4)),",
						"          MesEmissaoNF = trim(substring(ArquivoCadastral, 226, 2)),",
						"          DiaEmissaoNF = trim(substring(ArquivoCadastral, 228, 2))) ~> MapeamentoArqCadastral",
						"MapeamentoArqCadastral sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'convenio115Cadastral06',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CNPJ_CPF,",
						"          IE,",
						"          RazaoSocial,",
						"          Logradouro,",
						"          NumeroEnd,",
						"          Complemento,",
						"          CEP,",
						"          Bairro,",
						"          Municipio,",
						"          UF,",
						"          TelefoneContato,",
						"          CodigoIdentificacaoConsumidor_Assinante,",
						"          NroTerminaltelefonico_UnidadeConsumidora,",
						"          UFHabilitacaoTerminalTelefonico,",
						"          DataEmissao,",
						"          Modelo,",
						"          Serie,",
						"          Numero,",
						"          CodigoMunicipo,",
						"          Brancos_reservadoparausofuturo,",
						"          CodigoAutenticacaoDigital,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          UF,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     )) ~> SaidaArqCadastral"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Controle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_Controle",
								"type": "DatasetReference"
							},
							"name": "EntradaControleV3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_Controle_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaParquetArqControle"
						}
					],
					"transformations": [
						{
							"name": "ColunasDerivadas"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ControleV3 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EntradaControleV3",
						"EntradaControleV3 derive(Cnpj = trim(substring(ControleV3, 1, 18)),",
						"          IE = trim(substring(ControleV3, 19, 15)),",
						"          RazaoSocial = trim(substring(ControleV3, 34, 50)),",
						"          Endereco = trim(substring(ControleV3, 84, 50)),",
						"          CEP = trim(substring(ControleV3, 134, 9)),",
						"          Bairro = trim(substring(ControleV3, 143, 30)),",
						"          Municipio = trim(substring(ControleV3, 173, 30)),",
						"          UF = trim(substring(ControleV3, 203, 2)),",
						"          Responsavel = trim(substring(ControleV3, 205, 30)),",
						"          Cargo = trim(substring(ControleV3, 235, 20)),",
						"          Telefone = trim(substring(ControleV3, 255, 12)),",
						"          Email = trim(substring(ControleV3, 267, 40)),",
						"          QtdeRegMestre = trim(substring(ControleV3, 307, 7)),",
						"          QtdeNFcanceladas = trim(substring(ControleV3, 314, 7)),",
						"          DataEmissaoPriDoc = trim(substring(ControleV3, 321, 8)),",
						"          DataEmissaoUltDoc = trim(substring(ControleV3, 329, 8)),",
						"          NumeroPriDoc = trim(substring(ControleV3, 337, 9)),",
						"          NumeroUltDoc = trim(substring(ControleV3, 346, 9)),",
						"          ValorTotal = trim(substring(ControleV3, 355, 14)),",
						"          BCIcms = trim(substring(ControleV3, 369, 14)),",
						"          ICMS = trim(substring(ControleV3, 383, 14)),",
						"          OpIsentas = trim(substring(ControleV3, 397, 14)),",
						"          ValoresNaoBC = trim(substring(ControleV3, 411, 14)),",
						"          NomeArqMestre = trim(substring(ControleV3, 425, 40)),",
						"          StatusRetificacao = trim(substring(ControleV3, 465, 1)),",
						"          CodAutenticacao = trim(substring(ControleV3, 466, 32)),",
						"          QtdeRegItem = trim(substring(ControleV3, 498, 9)),",
						"          QtdeItensCancelados = trim(substring(ControleV3, 507, 7)),",
						"          DataEmissaoPriDocItens = trim(substring(ControleV3, 514, 8)),",
						"          DataEmissaoUltDocItens = trim(substring(ControleV3, 522, 8)),",
						"          NumeroPriDocItens = trim(substring(ControleV3, 530, 9)),",
						"          NumeroUltDocItens = trim(substring(ControleV3, 539, 9)),",
						"          Total = trim(substring(ControleV3, 548, 14)),",
						"          Descontos = trim(substring(ControleV3, 562, 14)),",
						"          Acrescimos = trim(substring(ControleV3, 576, 14)),",
						"          BCIcmsTotal = trim(substring(ControleV3, 590, 14)),",
						"          ICMSTotal = trim(substring(ControleV3, 604, 14)),",
						"          OpIsentasTotal = trim(substring(ControleV3, 618, 14)),",
						"          ValoresNaoBCTotal = trim(substring(ControleV3, 632, 14)),",
						"          NomeArqItem = trim(substring(ControleV3, 646, 40)),",
						"          StatusRetificacaoItem = trim(substring(ControleV3, 686, 1)),",
						"          CodAutenticacaoItem = trim(substring(ControleV3, 687, 32)),",
						"          QtdeCadastroDest = trim(substring(ControleV3, 719, 7)),",
						"          NomeArqCadastro = trim(substring(ControleV3, 726, 40)),",
						"          StatusRetificacaoCadastro = trim(substring(ControleV3, 766, 1)),",
						"          CodAutenticacaoCadastro = trim(substring(ControleV3, 767, 32)),",
						"          VersaoValidador = trim(substring(ControleV3, 799, 3)),",
						"          ChaveReciboEntrega = trim(substring(ControleV3, 802, 6)),",
						"          QtdeAdvertencias = trim(substring(ControleV3, 808, 9)),",
						"          Referencia = trim(substring(ControleV3, 817, 4)),",
						"          Modelo = trim(substring(ControleV3, 821, 2)),",
						"          Serie = trim(substring(ControleV3, 823, 3)),",
						"          Volume = trim(substring(ControleV3, 826, 3)),",
						"          SituacaoVersao = trim(substring(ControleV3, 829, 3)),",
						"          NomeArqCompactado = trim(substring(ControleV3, 832, 60)),",
						"          QtdeTipoA = trim(substring(ControleV3, 892, 9)),",
						"          ValorTotalTipoA = trim(substring(ControleV3, 901, 14)),",
						"          BCIcmsA = trim(substring(ControleV3, 915, 14)),",
						"          ICMSA = trim(substring(ControleV3, 929, 14)),",
						"          IsentasNTA = trim(substring(ControleV3, 943, 14)),",
						"          OutrosValoresA = trim(substring(ControleV3, 957, 14)),",
						"          QtdeTipoB = trim(substring(ControleV3, 971, 9)),",
						"          ValorTotalB = trim(substring(ControleV3, 980, 14)),",
						"          BCIcmsB = trim(substring(ControleV3, 994, 14)),",
						"          ICMSB = trim(substring(ControleV3, 1008, 14)),",
						"          IsentasNTB = trim(substring(ControleV3, 1022, 14)),",
						"          OutrosValoresB = trim(substring(ControleV3, 1036, 14)),",
						"          QtdeTipoC = trim(substring(ControleV3, 1050, 9)),",
						"          ValorTotalC = trim(substring(ControleV3, 1059, 14)),",
						"          BCIcmsC = trim(substring(ControleV3, 1073, 14)),",
						"          ICMSC = trim(substring(ControleV3, 1087, 14)),",
						"          IsentasNTC = trim(substring(ControleV3, 1101, 14)),",
						"          OutrosValoresC = trim(substring(ControleV3, 1115, 14)),",
						"          QtdeTipoD = trim(substring(ControleV3, 1129, 9)),",
						"          ValorTotalD = trim(substring(ControleV3, 1138, 14)),",
						"          BCIcmsD = trim(substring(ControleV3, 1152, 14)),",
						"          ICMSD = trim(substring(ControleV3, 1166, 14)),",
						"          IsentasNTD = trim(substring(ControleV3, 1180, 14)),",
						"          OutrosValoresD = trim(substring(ControleV3, 1194, 14)),",
						"          ChaveControle = trim(substring(ControleV3, 1208, 32)),",
						"          Brancos = trim(substring(ControleV3, 1240, 64)),",
						"          CodAutenticacaoRegistro = trim(substring(ControleV3, 1304, 32)),",
						"          AnoEmissaoPriDoc = trim(substring(ControleV3, 321, 4)),",
						"          MesEmissaoPriDoc = trim(substring(ControleV3, 325, 2)),",
						"          DiaEmissaoPriDoc = trim(substring(ControleV3, 327, 2))) ~> ColunasDerivadas",
						"ColunasDerivadas sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'convenio115Controle06',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Cnpj,",
						"          IE,",
						"          RazaoSocial,",
						"          Endereco,",
						"          CEP,",
						"          Bairro,",
						"          Municipio,",
						"          UF,",
						"          Responsavel,",
						"          Cargo,",
						"          Telefone,",
						"          Email,",
						"          QtdeRegMestre,",
						"          QtdeNFcanceladas,",
						"          DataEmissaoPriDoc,",
						"          DataEmissaoUltDoc,",
						"          NumeroPriDoc,",
						"          NumeroUltDoc,",
						"          ValorTotal,",
						"          BCIcms,",
						"          ICMS,",
						"          OpIsentas,",
						"          ValoresNaoBC,",
						"          NomeArqMestre,",
						"          StatusRetificacao,",
						"          CodAutenticacao,",
						"          QtdeRegItem,",
						"          QtdeItensCancelados,",
						"          DataEmissaoPriDocItens,",
						"          DataEmissaoUltDocItens,",
						"          NumeroPriDocItens,",
						"          NumeroUltDocItens,",
						"          Total,",
						"          Descontos,",
						"          Acrescimos,",
						"          BCIcmsTotal,",
						"          ICMSTotal,",
						"          OpIsentasTotal,",
						"          ValoresNaoBCTotal,",
						"          NomeArqItem,",
						"          StatusRetificacaoItem,",
						"          CodAutenticacaoItem,",
						"          QtdeCadastroDest,",
						"          NomeArqCadastro,",
						"          StatusRetificacaoCadastro,",
						"          CodAutenticacaoCadastro,",
						"          VersaoValidador,",
						"          ChaveReciboEntrega,",
						"          QtdeAdvertencias,",
						"          Referencia,",
						"          Modelo,",
						"          Serie,",
						"          Volume,",
						"          SituacaoVersao,",
						"          NomeArqCompactado,",
						"          QtdeTipoA,",
						"          ValorTotalTipoA,",
						"          BCIcmsA,",
						"          ICMSA,",
						"          IsentasNTA,",
						"          OutrosValoresA,",
						"          QtdeTipoB,",
						"          ValorTotalB,",
						"          BCIcmsB,",
						"          ICMSB,",
						"          IsentasNTB,",
						"          OutrosValoresB,",
						"          QtdeTipoC,",
						"          ValorTotalC,",
						"          BCIcmsC,",
						"          ICMSC,",
						"          IsentasNTC,",
						"          OutrosValoresC,",
						"          QtdeTipoD,",
						"          ValorTotalD,",
						"          BCIcmsD,",
						"          ICMSD,",
						"          IsentasNTD,",
						"          OutrosValoresD,",
						"          ChaveControle,",
						"          Brancos,",
						"          CodAutenticacaoRegistro,",
						"          AnoEmissaoPriDoc,",
						"          MesEmissaoPriDoc,",
						"          DiaEmissaoPriDoc",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          UF,",
						"          AnoEmissaoPriDoc,",
						"          MesEmissaoPriDoc,",
						"          DiaEmissaoPriDoc",
						"     )) ~> SaidaParquetArqControle"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Item')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_ItemNF",
								"type": "DatasetReference"
							},
							"name": "EntradaArqItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_ItemNF_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaArqItem"
						}
					],
					"transformations": [
						{
							"name": "MapeamentoArqItem"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ArquivoItem as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EntradaArqItem",
						"EntradaArqItem derive(CNPJ_CPF = trim(substring(ArquivoItem, 1, 14)),",
						"          UF = trim(substring(ArquivoItem, 15, 2)),",
						"          Classe_Consumo = trim(substring(ArquivoItem, 17, 1)),",
						"          Fase_TipoUtilizacao = trim(substring(ArquivoItem, 18, 1)),",
						"          GrupoTensao = trim(substring(ArquivoItem, 19, 2)),",
						"          DataEmissao = trim(substring(ArquivoItem, 21, 8)),",
						"          Modelo = trim(substring(ArquivoItem, 29, 2)),",
						"          Serie = trim(substring(ArquivoItem, 31, 3)),",
						"          Numero = trim(substring(ArquivoItem, 34, 9)),",
						"          CFOP = trim(substring(ArquivoItem, 43, 4)),",
						"          NroOrdemItem = trim(substring(ArquivoItem, 47, 3)),",
						"          CodigoItem = trim(substring(ArquivoItem, 50, 10)),",
						"          DescricaoItem = trim(substring(ArquivoItem, 60, 40)),",
						"          CodigoClassificacaoItem = trim(substring(ArquivoItem, 100, 4)),",
						"          Unidade = trim(substring(ArquivoItem, 104, 6)),",
						"          {QtdContratada(3decimais)} = trim(substring(ArquivoItem, 110, 12)),",
						"          {QtdMedida(3decimais)} = trim(substring(ArquivoItem, 122, 12)),",
						"          {Total(2decimais)} = trim(substring(ArquivoItem, 134, 11)),",
						"          {Desconto_Redutores(2decimais)} = trim(substring(ArquivoItem, 145, 11)),",
						"          {AcrescimosDespesasAcessorias(2decimais)} = trim(substring(ArquivoItem, 156, 11)),",
						"          {BC_ICMS(2decimais) } = trim(substring(ArquivoItem, 167, 11)),",
						"          {ICMS(2decimais) } = trim(substring(ArquivoItem, 178, 11)),",
						"          {OperacoesIsentas_ou_nao_tributadas(2decimais) } = trim(substring(ArquivoItem, 189, 11)),",
						"          {OutrosValores(2decimais) } = trim(substring(ArquivoItem, 200, 11)),",
						"          {AliquotadoICMS(2 decimais) } = trim(substring(ArquivoItem, 211, 4)),",
						"          {Situacao } = trim(substring(ArquivoItem, 215, 1)),",
						"          AnoMesReferenciaApuracao = trim(substring(ArquivoItem, 216, 4)),",
						"          {NumeroContrato } = trim(substring(ArquivoItem, 220, 15)),",
						"          {QuantidadeFaturada(3decimais) } = trim(substring(ArquivoItem, 235, 12)),",
						"          {TarifaAplicadaPrecoMedioEfetivo(6decimais) } = trim(substring(ArquivoItem, 247, 11)),",
						"          {AliquotaPISPASEP(4decimais) } = trim(substring(ArquivoItem, 258, 6)),",
						"          {PISPASEP(2decimais) } = trim(substring(ArquivoItem, 264, 11)),",
						"          {AliquotaCOFINS(4decimais) } = trim(substring(ArquivoItem, 275, 6)),",
						"          {COFINS(2decimais) } = trim(substring(ArquivoItem, 281, 11)),",
						"          {IndicadordeDescontoJudicial } = trim(substring(ArquivoItem, 292, 1)),",
						"          {TipoIsencao_ReducaoBaseCalculo } = trim(substring(ArquivoItem, 293, 2)),",
						"          BrancosReservadoparausoFuturo = trim(substring(ArquivoItem, 295, 5)),",
						"          CodigodeAutenticacaoDigital = trim(substring(ArquivoItem, 300, 32)),",
						"          AnoEmissaoNF = trim(substring(ArquivoItem, 21, 4)),",
						"          MesEmissaoNF = trim(substring(ArquivoItem, 25, 2)),",
						"          DiaEmissaoNF = trim(substring(ArquivoItem, 27, 2))) ~> MapeamentoArqItem",
						"MapeamentoArqItem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'convenio115ItemNF06',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CNPJ_CPF,",
						"          UF,",
						"          Classe_Consumo,",
						"          Fase_TipoUtilizacao,",
						"          GrupoTensao,",
						"          DataEmissao,",
						"          Modelo,",
						"          Serie,",
						"          Numero,",
						"          CFOP,",
						"          NroOrdemItem,",
						"          CodigoItem,",
						"          DescricaoItem,",
						"          CodigoClassificacaoItem,",
						"          Unidade,",
						"          QtdContratada = {QtdContratada(3decimais)},",
						"          QtdMedida = {QtdMedida(3decimais)},",
						"          Total = {Total(2decimais)},",
						"          Desconto_Redutores = {Desconto_Redutores(2decimais)},",
						"          AcrescimosDespesasAcessorias = {AcrescimosDespesasAcessorias(2decimais)},",
						"          BC_ICMS = {BC_ICMS(2decimais) },",
						"          ICMS = {ICMS(2decimais) },",
						"          OperacoesIsentas_ou_nao_tributadas = {OperacoesIsentas_ou_nao_tributadas(2decimais) },",
						"          OutrosValores = {OutrosValores(2decimais) },",
						"          AliquotadoICMS = {AliquotadoICMS(2 decimais) },",
						"          {Situacao },",
						"          AnoMesReferenciaApuracao,",
						"          {NumeroContrato },",
						"          QuantidadeFaturada = {QuantidadeFaturada(3decimais) },",
						"          TarifaAplicadaPrecoMedioEfetivo = {TarifaAplicadaPrecoMedioEfetivo(6decimais) },",
						"          AliquotaPISPASEP = {AliquotaPISPASEP(4decimais) },",
						"          PISPASEP = {PISPASEP(2decimais) },",
						"          AliquotaCOFINS = {AliquotaCOFINS(4decimais) },",
						"          COFINS = {COFINS(2decimais) },",
						"          {IndicadordeDescontoJudicial },",
						"          {TipoIsencao_ReducaoBaseCalculo },",
						"          BrancosReservadoparausoFuturo,",
						"          CodigodeAutenticacaoDigital,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          UF,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     )) ~> SaidaArqItem"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Mestre')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_MestreNF",
								"type": "DatasetReference"
							},
							"name": "EntradaArqMestre"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_MestreNF_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaArqMestre"
						}
					],
					"transformations": [
						{
							"name": "MapeamentoArqMestre"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ArquivoMestre as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EntradaArqMestre",
						"EntradaArqMestre derive(CNPJ_CPF = trim(substring(ArquivoMestre, 1, 14)),",
						"          IE = trim(substring(ArquivoMestre, 15, 14)),",
						"          RazaoSocial = trim(substring(ArquivoMestre, 29, 35)),",
						"          UF = trim(substring(ArquivoMestre, 64, 2)),",
						"          Classo_Consumo = trim(substring(ArquivoMestre, 66, 1)),",
						"          Frase_TipoUtilizacao = trim(substring(ArquivoMestre, 67, 1)),",
						"          GrupoTensao = trim(substring(ArquivoMestre, 68, 2)),",
						"          CodIdentificacaoConsumidor_Assinante = trim(substring(ArquivoMestre, 70, 12)),",
						"          DataEmissao = trim(substring(ArquivoMestre, 82, 8)),",
						"          Modelo = trim(substring(ArquivoMestre, 90, 2)),",
						"          Serie = trim(substring(ArquivoMestre, 92, 3)),",
						"          Numero = trim(substring(ArquivoMestre, 95, 9)),",
						"          CodAutenticacaoDigitalDocFiscal = trim(substring(ArquivoMestre, 104, 32)),",
						"          {ValorTotal(2decimais)} = trim(substring(ArquivoMestre, 136, 12)),",
						"          {BC_ICMS(2decimais)} = trim(substring(ArquivoMestre, 148, 12)),",
						"          {ICMSDestacado(2decimais)} = trim(substring(ArquivoMestre, 160, 12)),",
						"          {OperacoesIsentas_ou_naoTributadas(2decimais)} = trim(substring(ArquivoMestre, 172, 12)),",
						"          {OutrosValores(2decimais)} = trim(substring(ArquivoMestre, 184, 12)),",
						"          SituacaoDocumento = trim(substring(ArquivoMestre, 196, 1)),",
						"          AnoMesReferenciaApuracao = trim(substring(ArquivoMestre, 197, 4)),",
						"          ReferenciaItemNF = trim(substring(ArquivoMestre, 201, 9)),",
						"          NroTerminalTelefonico_UnidadeConsumidora = trim(substring(ArquivoMestre, 210, 12)),",
						"          IndicacaoInformacaoCampo1 = trim(substring(ArquivoMestre, 222, 1)),",
						"          TipoCliente = trim(substring(ArquivoMestre, 223, 2)),",
						"          SubclasseConsumo = trim(substring(ArquivoMestre, 225, 2)),",
						"          NroTerminalTefefonicoPrincial = trim(substring(ArquivoMestre, 227, 12)),",
						"          CNPJEmitente = trim(substring(ArquivoMestre, 239, 14)),",
						"          Nro_CodFaturaComercial = trim(substring(ArquivoMestre, 253, 20)),",
						"          ValorTotalFaturaComercial = trim(substring(ArquivoMestre, 273, 12)),",
						"          DataLeituraAnterior = trim(substring(ArquivoMestre, 285, 8)),",
						"          DataLeituraAtual = trim(substring(ArquivoMestre, 293, 8)),",
						"          Brancos1_reservadoparausofuturo = trim(substring(ArquivoMestre, 301, 50)),",
						"          Brancos2_reservadoparausofuturo = trim(substring(ArquivoMestre, 351, 8)),",
						"          InformacoesAdicionais = trim(substring(ArquivoMestre, 359, 30)),",
						"          Brancos3_reservadoparausofuturo = trim(substring(ArquivoMestre, 389, 5)),",
						"          CodigoAutenticacaoDigital = trim(substring(ArquivoMestre, 394, 32)),",
						"          AnoEmissaoNF = trim(substring(ArquivoMestre, 82, 4)),",
						"          MesEmissaoNF = trim(substring(ArquivoMestre, 86, 2)),",
						"          DiaEmissaoNF = trim(substring(ArquivoMestre, 88, 2))) ~> MapeamentoArqMestre",
						"MapeamentoArqMestre sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:'convenio115CMestreNF06',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CNPJ_CPF,",
						"          IE,",
						"          RazaoSocial,",
						"          UF,",
						"          Classo_Consumo,",
						"          Frase_TipoUtilizacao,",
						"          GrupoTensao,",
						"          CodIdentificacaoConsumidor_Assinante,",
						"          DataEmissao,",
						"          Modelo,",
						"          Serie,",
						"          Numero,",
						"          CodAutenticacaoDigitalDocFiscal,",
						"          ValorTotal = {ValorTotal(2decimais)},",
						"          BC_ICMS = {BC_ICMS(2decimais)},",
						"          ICMSDestacado = {ICMSDestacado(2decimais)},",
						"          OperacoesIsentas_ou_naoTributadas = {OperacoesIsentas_ou_naoTributadas(2decimais)},",
						"          OutrosValores = {OutrosValores(2decimais)},",
						"          SituacaoDocumento,",
						"          AnoMesReferenciaApuracao,",
						"          ReferenciaItemNF,",
						"          NroTerminalTelefonico_UnidadeConsumidora,",
						"          IndicacaoInformacaoCampo1,",
						"          TipoCliente,",
						"          SubclasseConsumo,",
						"          NroTerminalTefefonicoPrincial,",
						"          CNPJEmitente,",
						"          Nro_CodFaturaComercial,",
						"          ValorTotalFaturaComercial,",
						"          DataLeituraAnterior,",
						"          DataLeituraAtual,",
						"          Brancos1_reservadoparausofuturo,",
						"          Brancos2_reservadoparausofuturo,",
						"          InformacoesAdicionais,",
						"          Brancos3_reservadoparausofuturo,",
						"          CodigoAutenticacaoDigital,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          UF,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     )) ~> SaidaArqMestre"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutContestacaoAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atlys_adj_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqAtlys"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atlys_adj_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoAtlys"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas",
							"description": "Insere linhas não válidas na tabela CVTB_CARGA_ERRO_LAYOUT, ainda sem correção."
						}
					],
					"transformations": [
						{
							"name": "CalcQdePipes"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atlys','atlys/originais']) ~> BuscaLinhasArqAtlys",
						"BuscaLinhasArqAtlys derive(qtdcampos = length(value) - length(replace(value, \"|\", \"\"))) ~> CalcQdePipes",
						"CalcQdePipes split(qtdcampos== 41,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoAtlys",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatContestadaKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_contestada_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqKenanFatContestada"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_kenan_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoKenanFatContestada"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['kenan','kenan/originais']) ~> BuscaLinhasArqKenanFatContestada",
						"BuscaLinhasArqKenanFatContestada derive(qtdcampos = length(value) - length(replace(value, \";\", \"\"))) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(or(qtdcampos== 16, startsWith(value, 'CONTA_COBRANCA')),",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoKenanFatContestada",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatDetalheKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_Detalhe_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqKenanFatDetalhe"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_kenan_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoKenanFatDetalhe"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['kenan','kenan/originais']) ~> BuscaLinhasArqKenanFatDetalhe",
						"BuscaLinhasArqKenanFatDetalhe derive(qtdcampos = length(value) - length(replace(value, \";\", \"\"))) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(or(qtdcampos== 27, startsWith(value, 'CONTA_COBRANCA')),",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoKenanFatDetalhe",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatItemKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_Item_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqKenanFatItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_kenan_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoKenanFatItem"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['kenan','kenan/originais']) ~> BuscaLinhasArqKenanFatItem",
						"BuscaLinhasArqKenanFatItem derive(qtdcampos = length(value) - length(replace(value, \";\", \"\"))) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(or(qtdcampos== 13, startsWith(value, 'CONTA_COBRANCA')),",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoKenanFatItem",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutRecebiveisAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atlys_rcbl_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqRcblAtlys"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atlys_rcbl_corrigido",
								"type": "DatasetReference"
							},
							"name": "CriaArqValidosRcblAtlys"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidasRcbl"
						}
					],
					"transformations": [
						{
							"name": "CalcQdePipes"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atlys','atlys/originais']) ~> BuscaLinhasArqRcblAtlys",
						"BuscaLinhasArqRcblAtlys derive(qtdcampos = length(value) - length(replace(value, \"|\", \"\"))) ~> CalcQdePipes",
						"CalcQdePipes split(qtdcampos== 20,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqValidosRcblAtlys",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidasRcbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosContestacaoAtlys')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set varNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ListaArquivosBlobsAtlys_Originais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivosAtlys",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivosAtlys').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Testa arquivo Ajuste",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set varNovoLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(item().Name, 'adj')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "GravaArquivoRecebiveis",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivoRcbl",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoRecebiveisAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqAtlysRcbl": {
																"NomeArq": "@variables('varNomeArquivo')"
															},
															"BuscaLoteArqAtual": {},
															"GravaTabContestacoesAtlysRcbl": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutRecebiveis",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutRecebiveisAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqRcblAtlys": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqValidosRcblAtlys": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidasRcbl": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasRCBL",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutRecebiveis",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_rcbl",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutRecebiveis').output.runStatus.metrics.CriaArqValidosRcblAtlys.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasRCBL",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutRecebiveis",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_rcbl",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutRecebiveis').output.runStatus.metrics.InsereLinhasNaoValidasRcbl.stages[0].streams.CalcQdePipes.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivoRcbl",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasValidasRCBL",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasLidasRCBL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_rcbl')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_rcbl')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)-1\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)-1 \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "TrataArquivoContestacaoAtlys",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivo",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoContestacaoAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqAtlysAdj": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"BuscaLoteArqAtual": {},
															"GravaTabContestacoesAtlysAdj": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutContestacao",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutContestacaoAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqAtlys": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqCorrigidoAtlys": {
																"NomeArquivoAtlys": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidas": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasADJ",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutContestacao",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_adj",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutContestacao').output.runStatus.metrics.CriaArqCorrigidoAtlys.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasADJ",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutContestacao",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_adj",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutContestacao').output.runStatus.metrics.InsereLinhasNaoValidas.stages[0].streams.CalcQdePipes.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivo",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasValidasADJ",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasLidasADJ",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_adj')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_adj')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)-1\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)-1 \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											},
											{
												"name": "spCorrecaoAutomaticaArqAtlysAdj",
												"description": "Executa a correção do layuot do arquivo Atlys",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "TrataArquivoContestacaoAtlys",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[CONVENIO].[spCorrecaoAutomaticaArqAtlys]",
													"storedProcedureParameters": {
														"IdLoteArq": {
															"value": {
																"value": "@variables('varNovoLoteArquivo')",
																"type": "Expression"
															},
															"type": "String"
														},
														"LinhaCorrigida": {
															"value": "",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "dfInsereLinhaCorrigidaAtlysAdj",
												"description": "Busca os registros que tiveram o layout corrigido na tabela convenio.cvtb_carga_erro_layout",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "spCorrecaoAutomaticaArqAtlysAdj",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfLayoutAjustadoAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pIdLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLayoutCorrigido": {},
															"GravaArquivoAtlysCorrigido": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											}
										]
									}
								},
								{
									"name": "Set varNomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set varPeriodoReferencia",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set varNomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varPeriodoReferencia",
										"value": {
											"value": "@substring(variables('varNomeArquivo'), 7, 8)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "BuscaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GravaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "psNomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "SELECT CONVERT(VARCHAR(38), ID_LOTE_ARQUIVO) as ID_LA \nFROM CONVENIO.CVTB_LOTE_ARQUIVO \nWHERE NM_ARQUIVO = @psNomeArquivo;"
											}
										]
									}
								},
								{
									"name": "GravaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set varPeriodoReferencia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "NomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "NovoLote",
														"type": "String",
														"value": {
															"value": "@variables('varNovoLote')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": "DELETE from CONVENIO.CVTB_CARGA_ERRO_LAYOUT where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_ATLYS_ADJ where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_ATLYS_RCBL where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_LOTE_ARQUIVO \n where NM_ARQUIVO = @NomeArquivo \n   and ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO');\n\nINSERT INTO CONVENIO.CVTB_LOTE_ARQUIVO \n(NM_ARQUIVO,ID_LOTE,ID_SISTEMA_ARQUIVO) \nVALUES (@NomeArquivo,CONVERT(NUMERIC(28), @NovoLote),CASE WHEN SUBSTRING(@NomeArquivo, 1, 3) = 'adj' THEN 1 ELSE 2 END);"
											}
										]
									}
								},
								{
									"name": "Set varNovoLoteArquivo",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "BuscaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNovoLoteArquivo",
										"value": {
											"value": "@activity('BuscaLoteArquivo').output.resultSets[0].rows[0].ID_LA",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set varNovoLote",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varNovoLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote').output.firstRow.ID_LOTE)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CargaUnificadaAtlys",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfCargaUnificadaAtlys",
								"type": "DataFlowReference",
								"parameters": {
									"pLote": {
										"value": "'@{variables('varNovoLote')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TabelaADJ": {},
									"TabelaCONTESTACAO": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "qryGeraNovoLote",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "INSERT INTO CONVENIO.CVTB_LOTE\n(\nDT_INICIO_PROCESSAMENTO,\nTP_LOTE,\nFL_STATUS,\nID_SISTEMA,\nDT_CRIADO_EM,\nCD_CRIADO_POR\n)\nVALUES\n(\nDATEADD(HOUR, -3, sysdatetime()),\n'CONTESTACAO',\n'EM_PROCESSAMENTO',\n1,\nDATEADD(HOUR, -3, sysdatetime()),\n'Carga ADF - CargaArqAtlys'\n);"
								}
							]
						}
					},
					{
						"name": "FiltraArquivosAtlys",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'adj'), startswith(item().Name, 'rcvbl'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "AtualizaLoteQtdContestacoes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CargaUnificadaAtlys",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_Lote",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.pLote",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pVlr_QtdContestacoes",
											"type": "Decimal",
											"value": {
												"value": "@activity('CargaUnificadaAtlys').output.runStatus.metrics.TabelaCONTESTACAO.rowsWritten",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "UPDATE [CONVENIO].[CVTB_LOTE] SET QT_CONTESTACOES = CONVERT(NUMERIC(18), @pVlr_QtdContestacoes) WHERE ID_LOTE = @pId_Lote",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "BuscaNovoLote",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "qryGeraNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqAtlys' AND FL_STATUS = 'EM_PROCESSAMENTO';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pLote": {
						"type": "string"
					}
				},
				"variables": {
					"varNovoLote": {
						"type": "String"
					},
					"varNomeArquivo": {
						"type": "String"
					},
					"varNovoLoteArquivo": {
						"type": "String"
					},
					"varPeriodoReferencia": {
						"type": "String"
					},
					"varQdeLinhasValidas_adj": {
						"type": "String"
					},
					"varQdeLinhasLidas_adj": {
						"type": "String"
					},
					"varQdeLinhasValidas_rcbl": {
						"type": "String"
					},
					"varQdeLinhasLidas_rcbl": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosAtlys"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-26T17:49:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfCargaUnificadaAtlys')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoRecebiveisAtlys')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutRecebiveisAtlys')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoContestacaoAtlys')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutContestacaoAtlys')]",
				"[concat(variables('factoryId'), '/dataflows/dfLayoutAjustadoAtlys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosContestacaoKenan')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set varNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ListaArquivosBlobsKenan_Originais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivosKenan",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivosKenan').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set varNomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set varPeriodoReferencia",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set varNomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varPeriodoReferencia",
										"value": {
											"value": "@substring(variables('varNomeArquivo'), 7, 8)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "BuscaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GravaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "psNomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "SELECT CONVERT(VARCHAR(38), ID_LOTE_ARQUIVO) as ID_LA \nFROM CONVENIO.CVTB_LOTE_ARQUIVO \nWHERE NM_ARQUIVO = @psNomeArquivo;"
											}
										]
									}
								},
								{
									"name": "GravaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set varPeriodoReferencia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "NomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "NovoLote",
														"type": "String",
														"value": {
															"value": "@variables('varNovoLote')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": "DELETE from CONVENIO.CVTB_CARGA_ERRO_LAYOUT where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_FATURA_CON_KENAN where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_FATURA_DET_KENAN where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_FATURA_ITEM_KENAN where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_LOTE_ARQUIVO \n where NM_ARQUIVO = @NomeArquivo \n   and ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO');\n\nINSERT INTO CONVENIO.CVTB_LOTE_ARQUIVO \n(NM_ARQUIVO,ID_LOTE,ID_SISTEMA_ARQUIVO) \nVALUES (@NomeArquivo,CONVERT(NUMERIC(28), @NovoLote),CASE WHEN SUBSTRING(@NomeArquivo, 1, 2) = '01' THEN 3  WHEN SUBSTRING(@NomeArquivo, 1, 2) = '02'  THEN 4 ELSE 5 END);"
											}
										]
									}
								},
								{
									"name": "Set varNovoLoteArquivo",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "BuscaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNovoLoteArquivo",
										"value": {
											"value": "@activity('BuscaLoteArquivo').output.resultSets[0].rows[0].ID_LA",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set varNovoLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@substring(variables('varNomeArquivo'),0,2)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "02",
												"activities": [
													{
														"name": "TrataArquivoFatItemKenan",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "IncluiEstatisticaTabLoteArquivo_FatItem",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfGravaArquivoKenanItem",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"srcArqKenanItem": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"BuscaLoteArqAtual": {},
																	"GravaTabContestacoesAtlysRcbl": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "ValidacaoLayoutFatItemKenan",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfValidacaoLayoutFatItemKenan",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	},
																	"pLoteArquivo": {
																		"value": "'@{variables('varNovoLoteArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"BuscaLinhasArqKenanFatItem": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"CriaArqCorrigidoKenanFatItem": {
																		"NomeArquivoKenan": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"InsereLinhasNaoValidas": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "QdeLinhasValidasFatItem",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatItemKenan",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasValidas_FatIte",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatItemKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatItem.stages[0].recordsWritten)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "QdeLinhasLidasFatItem",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatItemKenan",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasLidas_FatIte",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatItemKenan').output.runStatus.metrics.InsereLinhasNaoValidas.stages[0].streams.CalcQdeSeparador.count)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "IncluiEstatisticaTabLoteArquivo_FatItem",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "QdeLinhasValidasFatItem",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "QdeLinhasLidasFatItem",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "AzureSqlDatabaseConv86",
															"type": "LinkedServiceReference"
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "LinhasTotais",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasLidas_FatIte')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "LinhasValidas",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasValidas_FatIte')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "ID_LOTE_ARQUIVO",
																			"type": "String",
																			"value": {
																				"value": "@variables('varNovoLoteArquivo')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		}
																	],
																	"type": "NonQuery",
																	"text": {
																		"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = (CONVERT(NUMERIC(28), @LinhasValidas)-1)\n  , QT_REGISTROS = (CONVERT(NUMERIC(28), @LinhasTotais)-1) \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																		"type": "Expression"
																	}
																}
															]
														}
													}
												]
											},
											{
												"value": "03",
												"activities": [
													{
														"name": "TrataArquivoFatDetalheKenan",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "IncluiEstatisticaTabLoteArquivo_FatIDet",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfGravaArquivoKenanDetalhe",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"srcArqKenanDetalhe": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"BuscaLoteArqAtual": {},
																	"GravaTabContestacoesAtlysRcbl": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "ValidacaoLayoutFatDetalheKenan",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfValidacaoLayoutFatDetalheKenan",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	},
																	"pLoteArquivo": {
																		"value": "'@{variables('varNovoLoteArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"BuscaLinhasArqKenanFatDetalhe": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"CriaArqCorrigidoKenanFatDetalhe": {
																		"NomeArquivoKenan": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"InsereLinhasNaoValidas": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "QdeLinhasValidasFatDet",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatDetalheKenan",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasValidas_FatDet",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatDetalheKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatDetalhe.stages[0].recordsWritten)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "QdeLinhasLidaFatDet",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatDetalheKenan",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasLidas_FatDet",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatDetalheKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatDetalhe.stages[0].streams.CalcQdeSeparador.count)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "IncluiEstatisticaTabLoteArquivo_FatIDet",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "QdeLinhasValidasFatDet",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "QdeLinhasLidaFatDet",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "AzureSqlDatabaseConv86",
															"type": "LinkedServiceReference"
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "LinhasTotais",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasLidas_FatDet')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "LinhasValidas",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasValidas_FatDet')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "ID_LOTE_ARQUIVO",
																			"type": "String",
																			"value": {
																				"value": "@variables('varNovoLoteArquivo')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		}
																	],
																	"type": "NonQuery",
																	"text": {
																		"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = (CONVERT(NUMERIC(28), @LinhasValidas)-1)\n  , QT_REGISTROS = (CONVERT(NUMERIC(28), @LinhasTotais)-1) \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																		"type": "Expression"
																	}
																}
															]
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "TrataArquivoFatContestadaKenan",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivo_FatCon",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoKenanContestada",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqKenanContestada": {
																"NomeArq": "@variables('varNomeArquivo')"
															},
															"BuscaLoteArqAtual": {},
															"GravaTabFaturaConKenan": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutFatContestadaKenan",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutFatContestadaKenan",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqKenanFatContestada": {
																"NomeArq": "@variables('varNomeArquivo')"
															},
															"CriaArqCorrigidoKenanFatContestada": {
																"NomeArquivoKenan": "@variables('varNomeArquivo')"
															},
															"InsereLinhasNaoValidas": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasFatCon",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutFatContestadaKenan",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_FatCon",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutFatContestadaKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatContestada.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasFatCon",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutFatContestadaKenan",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_FatCon",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutFatContestadaKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatContestada.stages[0].streams.CalcQdeSeparador.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivo_FatCon",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasLidasFatCon",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasValidasFatCon",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_FatCon')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_FatCon')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)-1\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)-1 \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Set varNovoLote",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varNovoLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CargaUnificadaKenan",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfCargaUnificadaKenan",
								"type": "DataFlowReference",
								"parameters": {
									"pLote": {
										"value": "'@{variables('varNovoLote')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TabelasKenan": {},
									"TabelaCONTESTACAO": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "qryGeraNovoLote",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "INSERT INTO CONVENIO.CVTB_LOTE\n(\nDT_INICIO_PROCESSAMENTO,\nTP_LOTE,\nFL_STATUS,\nID_SISTEMA,\nDT_CRIADO_EM,\nCD_CRIADO_POR\n)\nVALUES\n(\nDATEADD(HOUR, -3, sysdatetime()),\n'CONTESTACAO',\n'EM_PROCESSAMENTO',\n2,\nDATEADD(HOUR, -3, sysdatetime()),\n'Carga ADF - CargaArqKenan'\n);"
								}
							]
						}
					},
					{
						"name": "FiltraArquivosKenan",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(or(startswith(item().Name, '01'), startswith(item().Name, '02')), startswith(item().Name, '03'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLote",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "qryGeraNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqKenan' AND FL_STATUS = 'EM_PROCESSAMENTO';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "AtualizaLoteQtdContestacoes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CargaUnificadaKenan",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_Lote",
											"type": "String",
											"value": {
												"value": "@variables('varNovoLote')",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pVlr_QtdContestacoes",
											"type": "Decimal",
											"value": {
												"value": "@activity('CargaUnificadaKenan').output.runStatus.metrics.TabelaCONTESTACAO.rowsWritten",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "UPDATE [CONVENIO].[CVTB_LOTE] SET QT_CONTESTACOES = CONVERT(NUMERIC(18), @pVlr_QtdContestacoes) WHERE ID_LOTE = @pId_Lote",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varNovoLote": {
						"type": "String"
					},
					"varNomeArquivo": {
						"type": "String"
					},
					"varNovoLoteArquivo": {
						"type": "String"
					},
					"varPeriodoReferencia": {
						"type": "String"
					},
					"varQdeLinhasValidas_FatCon": {
						"type": "String"
					},
					"varQdeLinhasLidas_FatCon": {
						"type": "String"
					},
					"varQdeLinhasValidas_FatDet": {
						"type": "String"
					},
					"varQdeLinhasLidas_FatDet": {
						"type": "String"
					},
					"varQdeLinhasValidas_FatIte": {
						"type": "String"
					},
					"varQdeLinhasLidas_FatIte": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosKenan"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-26T17:49:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfCargaUnificadaKenan')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoKenanContestada')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatContestadaKenan')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoKenanItem')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatItemKenan')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoKenanDetalhe')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatDetalheKenan')]"
			]
		}
	]
}