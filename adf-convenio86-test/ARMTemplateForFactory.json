{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-convenio86-test"
		},
		"AzureSqlDatabaseConv86_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseConv86'"
		},
		"blob_storage_conv86_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'blob_storage_conv86'"
		},
		"AzureBlobStorage1_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/76461b8e-edbd-464c-ad30-b13ba994709c/resourceGroups/rg-convenio86-development/providers/Microsoft.Storage/storageAccounts/stconvenio86dev"
		},
		"AzureBlobStorage1_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"AzureBlobStorage1_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"stconvenio86dev.blob.core.windows.net"
			]
		},
		"AzureBlobStorage1_pe_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/cd4ed2c4-eb6d-48d7-98b7-e6db50218b71/resourceGroups/rg-convenio86-test/providers/Microsoft.Storage/storageAccounts/stconvenio86test"
		},
		"AzureBlobStorage1_pe_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"AzureBlobStorage1_pe_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"stconvenio86test.blob.core.windows.net"
			]
		},
		"AzureSqlDatabaseConv86_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/cd4ed2c4-eb6d-48d7-98b7-e6db50218b71/resourceGroups/rg-convenio86-test/providers/Microsoft.Sql/servers/sql-convenio86-test"
		},
		"AzureSqlDatabaseConv86_properties_groupId": {
			"type": "string",
			"defaultValue": "sqlServer"
		},
		"AzureSqlDatabaseConv86_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"sql-convenio86-test.database.windows.net"
			]
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosContestacaoAtis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set varNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ListaArquivosBlobsAtis_Originais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivosAtis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivosAtis').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Testa arquivo Atis",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set varNovoLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(item().Name, 'ATIS_PAGO')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "TrataArquivoAtisNaoPago",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteAtisNaoPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoAtisNaoPago",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqAtisNaoPago": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"BuscaLoteArqAtual": {},
															"GravaTabAtisNaoPago": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutAtisNaoPago",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutAtisNaoPago",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqAtisNaoPago": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqValidosAtisNaoPago": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidasAtisNaoPago": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasAtisNaoPago",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutAtisNaoPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_NaoPago",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutAtisNaoPago').output.runStatus.metrics.CriaArqValidosAtisNaoPago.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasAtisNaoPago",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutAtisNaoPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_NaoPago",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutAtisNaoPago').output.runStatus.metrics.CriaArqValidosAtisNaoPago.stages[0].streams.CalcQdeCaracteres.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteAtisNaoPago",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasValidasAtisNaoPago",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasLidasAtisNaoPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_NaoPago')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_NaoPago')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas),\n    QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)\nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "TrataArquivoContestacaoAtisPago",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivo",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoAtisPago",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqAtisPago": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"BuscaLoteArqAtual": {},
															"GravaTabAtis": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutAtisPago",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutAtisPago",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqAtis": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqCorrigidoAtisPago": {
																"NomeArquivoAtis": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidas": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasAtisPago",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutAtisPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_Pago",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutAtisPago').output.runStatus.metrics.CriaArqCorrigidoAtisPago.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasAtisPago",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutAtisPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_Pago",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutAtisPago').output.runStatus.metrics.CriaArqCorrigidoAtisPago.stages[0].streams.CalcQdeCaracteres.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivo",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasValidasAtisPago",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasLidasAtisPago",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_Pago')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_Pago')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo \nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)\n, QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais) \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"name": "Set varNomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set varPeriodoReferencia",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set varNomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varPeriodoReferencia",
										"value": {
											"value": "@substring(variables('varNomeArquivo'), sub(length(variables('varNomeArquivo')), 10),6)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "BuscaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GravaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "psNomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "SELECT CONVERT(VARCHAR(38), ID_LOTE_ARQUIVO) as ID_LA \nFROM CONVENIO.CVTB_LOTE_ARQUIVO WITH (NOLOCK) \nWHERE NM_ARQUIVO = @psNomeArquivo;"
											}
										]
									}
								},
								{
									"name": "GravaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set varPeriodoReferencia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "NomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "NovoLote",
														"type": "String",
														"value": {
															"value": "@variables('varNovoLote')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "varPeriodoReferencia",
														"type": "String",
														"value": {
															"value": "@variables('varPeriodoReferencia')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": "DELETE from CONVENIO.CVTB_CARGA_ERRO_LAYOUT where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK) \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK)  WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\n\nDELETE from CONVENIO.CVTB_ATIS_PAGO where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK) \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK)  WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_ATIS_NAO_PAGO where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK) \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_LOTE_ARQUIVO \nwhere NM_ARQUIVO = @NomeArquivo \nand ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK)  WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO');\n\nINSERT INTO CONVENIO.CVTB_LOTE_ARQUIVO (NM_ARQUIVO,ID_LOTE,ID_SISTEMA_ARQUIVO, DATA_REF_ARQUIVO) \nVALUES (@NomeArquivo, CONVERT(NUMERIC(28), @NovoLote),CASE WHEN SUBSTRING(@NomeArquivo, 1, 9) = 'ATIS_PAGO' THEN 6 ELSE 7 END, @varPeriodoReferencia);\n"
											}
										]
									}
								},
								{
									"name": "Set varNovoLoteArquivo",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "BuscaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNovoLoteArquivo",
										"value": {
											"value": "@activity('BuscaLoteArquivo').output.resultSets[0].rows[0].ID_LA",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set varNovoLote",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varNovoLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote').output.firstRow.ID_LOTE)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CargaUnificadaAtis",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfCargaUnificadaAtis",
								"type": "DataFlowReference",
								"parameters": {
									"pLote": {
										"value": "'@{variables('varNovoLote')}'",
										"type": "Expression"
									},
									"pMesAnoRef": {
										"value": "'@{variables('varPeriodoReferencia')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TabelaAtis": {},
									"TabelaCONTESTACAO": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "qryGeraNovoLote",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "INSERT INTO CONVENIO.CVTB_LOTE\n(\nDT_INICIO_PROCESSAMENTO,\nTP_LOTE,\nFL_STATUS,\nID_SISTEMA,\nDT_CRIADO_EM,\nCD_CRIADO_POR\n)\nVALUES\n(\nDATEADD(HOUR, -3, sysdatetime()),\n'CONTESTACAO',\n'EM_PROCESSAMENTO',\n3,\nDATEADD(HOUR, -3, sysdatetime()),\n'Carga ADF - CargaArqAtis'\n)"
								}
							]
						}
					},
					{
						"name": "FiltraArquivosAtis",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'ATIS_PAGO'), startswith(item().Name, 'ATIS_NAOPAGO'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "AtualizaLoteQtdContestacoes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CargaUnificadaAtis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_Lote",
											"type": "String",
											"value": {
												"value": "@variables('varNovoLote')",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pVlr_QtdContestacoes",
											"type": "String",
											"value": {
												"value": "@activity('CargaUnificadaAtis').output.runStatus.metrics.TabelaCONTESTACAO.rowsWritten",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "UPDATE [CONVENIO].[CVTB_LOTE] SET QT_CONTESTACOES = CONVERT(NUMERIC(18), @pVlr_QtdContestacoes) WHERE ID_LOTE = CONVERT(NUMERIC(28), @pId_Lote);\n\nTRUNCATE TABLE [CONVENIO].[CVTB_ATIS_NAO_PAGO];\n\nTRUNCATE TABLE [CONVENIO].[CVTB_ATIS_PAGO];",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "BuscaNovoLote",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "qryGeraNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WITH (NOLOCK) WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqAtis' AND FL_STATUS = 'EM_PROCESSAMENTO';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "stp_elegibilidadeAtis",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "AtualizaLoteQtdContestacoes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CONVENIO].[stp_elegibilidade_Atis]",
							"storedProcedureParameters": {
								"pid_lote_ajuste": {
									"value": {
										"value": "@variables('varNovoLote')",
										"type": "Expression"
									},
									"type": "Decimal"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varNovoLote": {
						"type": "String"
					},
					"varNomeArquivo": {
						"type": "String"
					},
					"varNovoLoteArquivo": {
						"type": "String"
					},
					"varPeriodoReferencia": {
						"type": "String"
					},
					"varQdeLinhasValidas_Pago": {
						"type": "String"
					},
					"varQdeLinhasLidas_Pago": {
						"type": "String"
					},
					"varQdeLinhasValidas_NaoPago": {
						"type": "String"
					},
					"varQdeLinhasLidas_NaoPago": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosAtis"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-26T17:49:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ListaArquivosBlobsAtis_Originais')]",
				"[concat(variables('factoryId'), '/dataflows/dfCargaUnificadaAtis')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeConv86')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoAtisNaoPago')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutAtisNaoPago')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoAtisPago')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutAtisPago')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosContestacaoAtlys')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set varNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ListaArquivosBlobsAtlys_Originais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivosAtlys",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivosAtlys').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Testa arquivo Ajuste",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set varNovoLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(item().Name, 'adj')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "GravaArquivoRecebiveis",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivoRcbl",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoRecebiveisAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqAtlysRcbl": {
																"NomeArq": "@variables('varNomeArquivo')"
															},
															"BuscaLoteArqAtual": {},
															"GravaTabContestacoesAtlysRcbl": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutRecebiveis",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutRecebiveisAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqRcblAtlys": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqValidosRcblAtlys": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidasRcbl": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasRCBL",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutRecebiveis",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_rcbl",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutRecebiveis').output.runStatus.metrics.CriaArqValidosRcblAtlys.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasRCBL",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutRecebiveis",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_rcbl",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutRecebiveis').output.runStatus.metrics.InsereLinhasNaoValidasRcbl.stages[0].streams.CalcQdePipes.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivoRcbl",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasValidasRCBL",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasLidasRCBL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_rcbl')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_rcbl')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)-1\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)-1 \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "TrataArquivoContestacaoAtlys",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivo",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoContestacaoAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqAtlysAdj": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"BuscaLoteArqAtual": {},
															"GravaTabContestacoesAtlysAdj": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutContestacao",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutContestacaoAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqAtlys": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqCorrigidoAtlys": {
																"NomeArquivoAtlys": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidas": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasADJ",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutContestacao",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_adj",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutContestacao').output.runStatus.metrics.CriaArqCorrigidoAtlys.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasADJ",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutContestacao",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_adj",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutContestacao').output.runStatus.metrics.InsereLinhasNaoValidas.stages[0].streams.CalcQdePipes.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivo",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasValidasADJ",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasLidasADJ",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_adj')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_adj')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)-1\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais) -1\nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											},
											{
												"name": "spCorrecaoAutomaticaArqAtlysAdj",
												"description": "Executa a correção do layuot do arquivo Atlys",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "TrataArquivoContestacaoAtlys",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[CONVENIO].[spCorrecaoAutomaticaArqAtlys]",
													"storedProcedureParameters": {
														"IdLoteArq": {
															"value": {
																"value": "@variables('varNovoLoteArquivo')",
																"type": "Expression"
															},
															"type": "String"
														},
														"LinhaCorrigida": {
															"value": "",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "dfInsereLinhaCorrigidaAtlysAdj",
												"description": "Busca os registros que tiveram o layout corrigido na tabela convenio.cvtb_carga_erro_layout",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "spCorrecaoAutomaticaArqAtlysAdj",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfLayoutAjustadoAtlys",
														"type": "DataFlowReference",
														"parameters": {
															"pIdLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLayoutCorrigido": {},
															"GravaArquivoAtlysCorrigido": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											}
										]
									}
								},
								{
									"name": "Set varNomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set varPeriodoReferencia",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set varNomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varPeriodoReferencia",
										"value": {
											"value": "@substring(variables('varNomeArquivo'), sub(length(variables('varNomeArquivo')), 21),6)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "BuscaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GravaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "psNomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "SELECT CONVERT(VARCHAR(38), ID_LOTE_ARQUIVO) as ID_LA \nFROM CONVENIO.CVTB_LOTE_ARQUIVO WITH (NOLOCK)\nWHERE NM_ARQUIVO = @psNomeArquivo;"
											}
										]
									}
								},
								{
									"name": "GravaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set varPeriodoReferencia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "NomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "NovoLote",
														"type": "String",
														"value": {
															"value": "@variables('varNovoLote')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "varPeriodoReferencia",
														"type": "String",
														"value": {
															"value": "@variables('varPeriodoReferencia')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": "DELETE from CONVENIO.CVTB_CARGA_ERRO_LAYOUT where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE]  L  WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_ATLYS_ADJ where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L  WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_ATLYS_RCBL where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA  \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L   WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_LOTE_ARQUIVO \nwhere NM_ARQUIVO = @NomeArquivo \nand ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L  WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO');\n\nINSERT INTO CONVENIO.CVTB_LOTE_ARQUIVO \n(NM_ARQUIVO,ID_LOTE,ID_SISTEMA_ARQUIVO, DATA_REF_ARQUIVO) \nVALUES (@NomeArquivo,CONVERT(NUMERIC(28), @NovoLote),CASE WHEN SUBSTRING(@NomeArquivo, 1, 3) = 'adj' THEN 1 ELSE 2 END,  @varPeriodoReferencia);"
											}
										]
									}
								},
								{
									"name": "Set varNovoLoteArquivo",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "BuscaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNovoLoteArquivo",
										"value": {
											"value": "@activity('BuscaLoteArquivo').output.resultSets[0].rows[0].ID_LA",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set varNovoLote",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varNovoLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote').output.firstRow.ID_LOTE)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CargaUnificadaAtlys",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfCargaUnificadaAtlys",
								"type": "DataFlowReference",
								"parameters": {
									"pLote": {
										"value": "'@{variables('varNovoLote')}'",
										"type": "Expression"
									},
									"pMesAnoRef": {
										"value": "'@{variables('varPeriodoReferencia')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TabelaADJ": {},
									"TabelaCONTESTACAO": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "qryGeraNovoLote",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "INSERT INTO CONVENIO.CVTB_LOTE\n(\nDT_INICIO_PROCESSAMENTO,\nTP_LOTE,\nFL_STATUS,\nID_SISTEMA,\nDT_CRIADO_EM,\nCD_CRIADO_POR\n)\nVALUES\n(\nDATEADD(HOUR, -3, sysdatetime()),\n'CONTESTACAO',\n'EM_PROCESSAMENTO',\n1,\nDATEADD(HOUR, -3, sysdatetime()),\n'Carga ADF - CargaArqAtlys'\n);"
								}
							]
						}
					},
					{
						"name": "FiltraArquivosAtlys",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'adj'), startswith(item().Name, 'rcvbl'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "AtualizaLoteQtdContestacoes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CargaUnificadaAtlys",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_Lote",
											"type": "String",
											"value": {
												"value": "@variables('varNovoLote')",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pVlr_QtdContestacoes",
											"type": "String",
											"value": {
												"value": "@activity('CargaUnificadaAtlys').output.runStatus.metrics.TabelaCONTESTACAO.rowsWritten",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "UPDATE [CONVENIO].[CVTB_LOTE] SET QT_CONTESTACOES = CONVERT(NUMERIC(18), @pVlr_QtdContestacoes) WHERE ID_LOTE = CONVERT(NUMERIC(28), @pId_Lote);\n\nTRUNCATE TABLE [CONVENIO].[CVTB_ATLYS_ADJ];\n\nTRUNCATE TABLE [CONVENIO].[CVTB_ATLYS_RCBL];",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "BuscaNovoLote",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "qryGeraNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WITH (NOLOCK) WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqAtlys' AND FL_STATUS = 'EM_PROCESSAMENTO';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "stp_elegibilidadeAtlys",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "AtualizaLoteQtdContestacoes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CONVENIO].[stp_elegibilidade_Atlys]",
							"storedProcedureParameters": {
								"pid_lote_ajuste": {
									"value": {
										"value": "@variables('varNovoLote')",
										"type": "Expression"
									},
									"type": "Decimal"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varNovoLote": {
						"type": "String"
					},
					"varNomeArquivo": {
						"type": "String"
					},
					"varNovoLoteArquivo": {
						"type": "String"
					},
					"varPeriodoReferencia": {
						"type": "String"
					},
					"varQdeLinhasValidas_adj": {
						"type": "String"
					},
					"varQdeLinhasLidas_adj": {
						"type": "String"
					},
					"varQdeLinhasValidas_rcbl": {
						"type": "String"
					},
					"varQdeLinhasLidas_rcbl": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosAtlys"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-26T17:49:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ListaArquivosBlobsAtlys_Originais')]",
				"[concat(variables('factoryId'), '/dataflows/dfCargaUnificadaAtlys')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeConv86')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoRecebiveisAtlys')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutRecebiveisAtlys')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoContestacaoAtlys')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutContestacaoAtlys')]",
				"[concat(variables('factoryId'), '/dataflows/dfLayoutAjustadoAtlys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosContestacaoFat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set varNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ListaArquivosBlobsFat_Originais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivosFat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivosFat').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set varNomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "BuscaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GravaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "psNomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "SELECT CONVERT(VARCHAR(38), ID_LOTE_ARQUIVO) as ID_LA FROM CONVENIO.CVTB_LOTE_ARQUIVO WITH (NOLOCK) WHERE NM_ARQUIVO = @psNomeArquivo;"
											}
										]
									}
								},
								{
									"name": "GravaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set varPeriodoReferencia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "NomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "NovoLote",
														"type": "String",
														"value": {
															"value": "@variables('varNovoLote')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "varPeriodoReferencia",
														"type": "String",
														"value": {
															"value": "@variables('varPeriodoReferencia')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": "DELETE from CONVENIO.CVTB_CARGA_ERRO_LAYOUT where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK) \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK)  WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_FAT_CAR_FF where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK) \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_FAT_CAR_FNP where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK) \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK)  WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\n\nDELETE from CONVENIO.CVTB_LOTE_ARQUIVO \nwhere NM_ARQUIVO = @NomeArquivo \nand ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO');\n\n\nINSERT INTO CONVENIO.CVTB_LOTE_ARQUIVO (NM_ARQUIVO,ID_LOTE,ID_SISTEMA_ARQUIVO, DATA_REF_ARQUIVO) \nVALUES (@NomeArquivo, CONVERT(NUMERIC(28), @NovoLote),CASE WHEN SUBSTRING(@NomeArquivo, 1, 6) = 'CAR_FF' THEN 8  ELSE 9 END, @varPeriodoReferencia);\n"
											}
										]
									}
								},
								{
									"name": "Set varNovoLoteArquivo",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "BuscaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNovoLoteArquivo",
										"value": {
											"value": "@activity('BuscaLoteArquivo').output.resultSets[0].rows[0].ID_LA",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set varNovoLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@substring(variables('varNomeArquivo'),0,7)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "CAR_FNP",
												"activities": [
													{
														"name": "TrataArquivoCarFNP",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "IncluiEstatisticaTabLoteArquivo_CarFNP",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfGravaArquivoFatCarFNP",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"srcArqFatFNP": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"BuscaLoteArqAtual": {},
																	"GravaTabFatCarFNP": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "ValidacaoLayoutFatCarFNP",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfValidacaoLayoutFatCarFNP",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	},
																	"pLoteArquivo": {
																		"value": "'@{variables('varNovoLoteArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"BuscaLinhasArqFatFNP": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"CriaArqCorrigidoFatFNP": {
																		"NomeArquivoFAT": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"InsereLinhasNaoValidas": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "QdeLinhasValidasCarFNP",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatCarFNP",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasValidas_FNP",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatCarFNP').output.runStatus.metrics.CriaArqCorrigidoFatFNP.stages[0].recordsWritten)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "QdeLinhasLidasCarFNP",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatCarFNP",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasLidas_FNP",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatCarFNP').output.runStatus.metrics.InsereLinhasNaoValidas.stages[0].streams.CalcQdeSeparador.count)\n",
																"type": "Expression"
															}
														}
													},
													{
														"name": "IncluiEstatisticaTabLoteArquivo_CarFNP",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "QdeLinhasValidasCarFNP",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "QdeLinhasLidasCarFNP",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "AzureSqlDatabaseConv86",
															"type": "LinkedServiceReference"
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "LinhasTotais",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasLidas_FNP')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "LinhasValidas",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasValidas_FNP')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "ID_LOTE_ARQUIVO",
																			"type": "String",
																			"value": {
																				"value": "@variables('varNovoLoteArquivo')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		}
																	],
																	"type": "NonQuery",
																	"text": {
																		"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)\nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																		"type": "Expression"
																	}
																}
															]
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "TrataArquivoFatCarFF",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivo_CarFF",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoFatCarFF",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqFatFF": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"BuscaLoteArqAtual": {},
															"GravaTabFatCarFF": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutFatCarFF",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutFatCarFF",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqFatFF": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqCorrigidoFatFF": {
																"NomeArquivoFAT": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidas": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasCarFF",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutFatCarFF",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_FF",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutFatCarFF').output.runStatus.metrics.CriaArqCorrigidoFatFF.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasCarFF",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutFatCarFF",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_FF",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutFatCarFF').output.runStatus.metrics.CriaArqCorrigidoFatFF.stages[0].streams.CalcQdeCaracteres.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivo_CarFF",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasLidasCarFF",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasValidasCarFF",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_FF')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_FF')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)\nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"name": "Set varPeriodoReferencia",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set varNomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varPeriodoReferencia",
										"value": {
											"value": "@substring(variables('varNomeArquivo'), sub(length(variables('varNomeArquivo')), 10),6)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set varNovoLote",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varNovoLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CargaUnificadaFat",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfCargaUnificadaFat",
								"type": "DataFlowReference",
								"parameters": {
									"pLote": {
										"value": "'@{variables('varNovoLote')}'",
										"type": "Expression"
									},
									"pMesAnoRef": {
										"value": "'@{variables('varPeriodoReferencia')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TabelasFAT": {},
									"TabelaCONTESTACAO": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "qryGeraNovoLote",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "INSERT INTO CONVENIO.CVTB_LOTE (DT_INICIO_PROCESSAMENTO,TP_LOTE,FL_STATUS,ID_SISTEMA,DT_CRIADO_EM,CD_CRIADO_POR) VALUES ( DATEADD(HOUR, -3, sysdatetime()), 'CONTESTACAO','EM_PROCESSAMENTO',4,DATEADD(HOUR, -3, sysdatetime()),'Carga ADF - CargaArqFat');"
								}
							]
						}
					},
					{
						"name": "FiltraArquivosFat",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'CAR_FF'), startswith(item().Name, 'CAR_FNP'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLote",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "qryGeraNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WITH (NOLOCK) WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqFat' AND FL_STATUS = 'EM_PROCESSAMENTO';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "AtualizaLoteQtdContestacoes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CargaUnificadaFat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_Lote",
											"type": "String",
											"value": {
												"value": "@variables('varNovoLote')",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pVlr_QtdContestacoes",
											"type": "String",
											"value": {
												"value": "@activity('CargaUnificadaFat').output.runStatus.metrics.TabelaCONTESTACAO.rowsWritten",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "UPDATE [CONVENIO].[CVTB_LOTE] SET QT_CONTESTACOES = CONVERT(NUMERIC(18), @pVlr_QtdContestacoes) WHERE ID_LOTE = CONVERT(NUMERIC(28),@pId_Lote);\n\nTRUNCATE TABLE [CONVENIO].[CVTB_FAT_CAR_FF];\n\nTRUNCATE TABLE [CONVENIO].[CVTB_FAT_CAR_FNF];",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "stp_elegibilidadeFAT",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "AtualizaLoteQtdContestacoes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CONVENIO].[stp_elegibilidade_Fat]",
							"storedProcedureParameters": {
								"pid_lote_ajuste": {
									"value": {
										"value": "@variables('varNovoLote')",
										"type": "Expression"
									},
									"type": "Decimal"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varNovoLote": {
						"type": "String"
					},
					"varNomeArquivo": {
						"type": "String"
					},
					"varNovoLoteArquivo": {
						"type": "String"
					},
					"varQdeLinhasValidas_FF": {
						"type": "String"
					},
					"varQdeLinhasLidas_FF": {
						"type": "String"
					},
					"varQdeLinhasValidas_FNP": {
						"type": "String"
					},
					"varQdeLinhasLidas_FNP": {
						"type": "String"
					},
					"varPeriodoReferencia": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosFat"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-26T17:49:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ListaArquivosBlobsFat_Originais')]",
				"[concat(variables('factoryId'), '/dataflows/dfCargaUnificadaFat')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeConv86')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoFatCarFF')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatCarFF')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoFatCarFNP')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatCarFNP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosContestacaoKenan')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set varNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ListaArquivosBlobsKenan_Originais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivosKenan",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivosKenan').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set varNomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "BuscaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GravaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "psNomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "SELECT CONVERT(VARCHAR(38), ID_LOTE_ARQUIVO) as ID_LA \nFROM CONVENIO.CVTB_LOTE_ARQUIVO WITH (NOLOCK) \nWHERE NM_ARQUIVO = @psNomeArquivo;"
											}
										]
									}
								},
								{
									"name": "GravaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set varPeriodoReferencia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "NomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "NovoLote",
														"type": "String",
														"value": {
															"value": "@variables('varNovoLote')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "varPeriodoReferencia",
														"type": "String",
														"value": {
															"value": "@variables('varPeriodoReferencia')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": "DELETE from CONVENIO.CVTB_CARGA_ERRO_LAYOUT where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK) \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_FATURA_CON_KENAN where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK) \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_FATURA_DET_KENAN where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK) \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_FATURA_ITEM_KENAN where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK) \nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_LOTE_ARQUIVO \nwhere NM_ARQUIVO = @NomeArquivo \nand ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO');\n\nINSERT INTO CONVENIO.CVTB_LOTE_ARQUIVO (NM_ARQUIVO,ID_LOTE,ID_SISTEMA_ARQUIVO, DATA_REF_ARQUIVO) \nVALUES (@NomeArquivo, CONVERT(NUMERIC(28), @NovoLote),CASE WHEN SUBSTRING(@NomeArquivo, 1, 2) = '01' THEN 4  WHEN SUBSTRING(@NomeArquivo, 1, 2) = '02'  THEN 5 ELSE 3 END, @varPeriodoReferencia);\n"
											}
										]
									}
								},
								{
									"name": "Set varNovoLoteArquivo",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "BuscaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNovoLoteArquivo",
										"value": {
											"value": "@activity('BuscaLoteArquivo').output.resultSets[0].rows[0].ID_LA",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set varNovoLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@substring(variables('varNomeArquivo'),0,2)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "02",
												"activities": [
													{
														"name": "TrataArquivoFatItemKenan",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "IncluiEstatisticaTabLoteArquivo_FatItem",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfGravaArquivoKenanItem",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"srcArqKenanItem": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"BuscaLoteArqAtual": {},
																	"GravaTabContestacoesAtlysRcbl": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "ValidacaoLayoutFatItemKenan",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfValidacaoLayoutFatItemKenan",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	},
																	"pLoteArquivo": {
																		"value": "'@{variables('varNovoLoteArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"BuscaLinhasArqKenanFatItem": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"CriaArqCorrigidoKenanFatItem": {
																		"NomeArquivoKenan": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"InsereLinhasNaoValidas": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "QdeLinhasValidasFatItem",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatItemKenan",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasValidas_FatIte",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatItemKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatItem.stages[0].recordsWritten)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "QdeLinhasLidasFatItem",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatItemKenan",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasLidas_FatIte",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatItemKenan').output.runStatus.metrics.InsereLinhasNaoValidas.stages[0].streams.CalcQdeSeparador.count)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "IncluiEstatisticaTabLoteArquivo_FatItem",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "QdeLinhasValidasFatItem",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "QdeLinhasLidasFatItem",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "AzureSqlDatabaseConv86",
															"type": "LinkedServiceReference"
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "LinhasTotais",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasLidas_FatIte')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "LinhasValidas",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasValidas_FatIte')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "ID_LOTE_ARQUIVO",
																			"type": "String",
																			"value": {
																				"value": "@variables('varNovoLoteArquivo')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		}
																	],
																	"type": "NonQuery",
																	"text": {
																		"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)-1\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)-1 \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																		"type": "Expression"
																	}
																}
															]
														}
													}
												]
											},
											{
												"value": "03",
												"activities": [
													{
														"name": "TrataArquivoFatDetalheKenan",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "IncluiEstatisticaTabLoteArquivo_FatIDet",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfGravaArquivoKenanDetalhe",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"srcArqKenanDetalhe": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"BuscaLoteArqAtual": {},
																	"GravaTabContestacoesAtlysRcbl": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "ValidacaoLayoutFatDetalheKenan",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfValidacaoLayoutFatDetalheKenan",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	},
																	"pLoteArquivo": {
																		"value": "'@{variables('varNovoLoteArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"BuscaLinhasArqKenanFatDetalhe": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"CriaArqCorrigidoKenanFatDetalhe": {
																		"NomeArquivoKenan": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"InsereLinhasNaoValidas": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "QdeLinhasValidasFatDet",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatDetalheKenan",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasValidas_FatDet",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatDetalheKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatDetalhe.stages[0].recordsWritten)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "QdeLinhasLidaFatDet",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutFatDetalheKenan",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasLidas_FatDet",
															"value": {
																"value": "@string(activity('ValidacaoLayoutFatDetalheKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatDetalhe.stages[0].streams.CalcQdeSeparador.count)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "IncluiEstatisticaTabLoteArquivo_FatIDet",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "QdeLinhasValidasFatDet",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "QdeLinhasLidaFatDet",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "AzureSqlDatabaseConv86",
															"type": "LinkedServiceReference"
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "LinhasTotais",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasLidas_FatDet')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "LinhasValidas",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasValidas_FatDet')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "ID_LOTE_ARQUIVO",
																			"type": "String",
																			"value": {
																				"value": "@variables('varNovoLoteArquivo')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		}
																	],
																	"type": "NonQuery",
																	"text": {
																		"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)-1\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)-1 \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																		"type": "Expression"
																	}
																}
															]
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "TrataArquivoFatContestadaKenan",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivo_FatCon",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoKenanContestada",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqKenanContestada": {
																"NomeArq": "@variables('varNomeArquivo')"
															},
															"BuscaLoteArqAtual": {},
															"GravaTabFaturaConKenan": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutFatContestadaKenan",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutFatContestadaKenan",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqKenanFatContestada": {
																"NomeArq": "@variables('varNomeArquivo')"
															},
															"CriaArqCorrigidoKenanFatContestada": {
																"NomeArquivoKenan": "@variables('varNomeArquivo')"
															},
															"InsereLinhasNaoValidas": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasFatCon",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutFatContestadaKenan",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_FatCon",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutFatContestadaKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatContestada.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasFatCon",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutFatContestadaKenan",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_FatCon",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutFatContestadaKenan').output.runStatus.metrics.CriaArqCorrigidoKenanFatContestada.stages[0].streams.CalcQdeSeparador.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivo_FatCon",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasValidasFatCon",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasLidasFatCon",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_FatCon')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_FatCon')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)-1\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)-1 \nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"name": "Set varPeriodoReferencia",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set varNomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varPeriodoReferencia",
										"value": {
											"value": "@replace(substring(variables('varNomeArquivo'), sub(length(variables('varNomeArquivo')), 11),7), '_', '')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set varNovoLote",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varNovoLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CargaUnificadaKenan",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfCargaUnificadaKenan",
								"type": "DataFlowReference",
								"parameters": {
									"pLote": {
										"value": "'@{variables('varNovoLote')}'",
										"type": "Expression"
									},
									"pMesAnoRef": {
										"value": "'@{variables('varPeriodoReferencia')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TabelasKenan": {},
									"TabelaCONTESTACAO": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "qryGeraNovoLote",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "INSERT INTO CONVENIO.CVTB_LOTE\n(\nDT_INICIO_PROCESSAMENTO,\nTP_LOTE,\nFL_STATUS,\nID_SISTEMA,\nDT_CRIADO_EM,\nCD_CRIADO_POR\n)\nVALUES\n(\nDATEADD(HOUR, -3, sysdatetime()),\n'CONTESTACAO',\n'EM_PROCESSAMENTO',\n2,\nDATEADD(HOUR, -3, sysdatetime()),\n'Carga ADF - CargaArqKenan'\n);"
								}
							]
						}
					},
					{
						"name": "FiltraArquivosKenan",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(or(startswith(item().Name, '01'), startswith(item().Name, '02')), startswith(item().Name, '03'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLote",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "qryGeraNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WITH (NOLOCK) WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqKenan' AND FL_STATUS = 'EM_PROCESSAMENTO';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "AtualizaLoteQtdContestacoes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CargaUnificadaKenan",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_Lote",
											"type": "String",
											"value": {
												"value": "@variables('varNovoLote')",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pVlr_QtdContestacoes",
											"type": "String",
											"value": {
												"value": "@activity('CargaUnificadaKenan').output.runStatus.metrics.TabelaCONTESTACAO.rowsWritten",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "UPDATE [CONVENIO].[CVTB_LOTE] SET QT_CONTESTACOES = CONVERT(NUMERIC(18), @pVlr_QtdContestacoes) WHERE ID_LOTE = CONVERT(NUMERIC(28),@pId_Lote);\n\nTRUNCATE[CONVENIO].[CVTB_FATURA_CON_KENAN];\n\nTRUNCATE[CONVENIO].[CVTB_FATURA_DET_KENAN];\n\nTRUNCATE[CONVENIO].[CVTB_FATURA_ITEM_KENAN];",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "stp_elegibilidadeKenan",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "AtualizaLoteQtdContestacoes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CONVENIO].[stp_elegibilidade_Kenan]",
							"storedProcedureParameters": {
								"pid_lote_ajuste": {
									"value": {
										"value": "@variables('varNovoLote')",
										"type": "Expression"
									},
									"type": "Decimal"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varNovoLote": {
						"type": "String"
					},
					"varNomeArquivo": {
						"type": "String"
					},
					"varNovoLoteArquivo": {
						"type": "String"
					},
					"varPeriodoReferencia": {
						"type": "String"
					},
					"varQdeLinhasValidas_FatCon": {
						"type": "String"
					},
					"varQdeLinhasLidas_FatCon": {
						"type": "String"
					},
					"varQdeLinhasValidas_FatDet": {
						"type": "String"
					},
					"varQdeLinhasLidas_FatDet": {
						"type": "String"
					},
					"varQdeLinhasValidas_FatIte": {
						"type": "String"
					},
					"varQdeLinhasLidas_FatIte": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosKenan"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-26T17:49:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ListaArquivosBlobsKenan_Originais')]",
				"[concat(variables('factoryId'), '/dataflows/dfCargaUnificadaKenan')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeConv86')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoKenanContestada')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatContestadaKenan')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoKenanItem')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatItemKenan')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoKenanDetalhe')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutFatDetalheKenan')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosContestacaoVivoNext')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set varNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ListaArquivosBlobVivoNext_Originais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Set varNovoLote",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varNovoLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "qryGeraNovoLote",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "INSERT INTO CONVENIO.CVTB_LOTE\n(\nDT_INICIO_PROCESSAMENTO,\nTP_LOTE,\nFL_STATUS,\nID_SISTEMA,\nDT_CRIADO_EM,\nCD_CRIADO_POR\n)\nVALUES\n(\nDATEADD(HOUR, -3, sysdatetime()),\n'CONTESTACAO',\n'EM_PROCESSAMENTO',\n5,\nDATEADD(HOUR, -3, sysdatetime()),\n'Carga ADF - CargaArqVivoNext'\n);"
								}
							]
						}
					},
					{
						"name": "FiltraArquivosVivoNext",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'Vivonext_K16_'), startswith(item().Name, 'Vivonext_K17_'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLote",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "qryGeraNovoLote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqVivoNext' AND FL_STATUS = 'EM_PROCESSAMENTO';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivosVivoNext",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivosVivoNext').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set varNomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "BuscaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "GravaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "psNomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "Query",
												"text": "SELECT CONVERT(VARCHAR(38), ID_LOTE_ARQUIVO) as ID_LA \nFROM CONVENIO.CVTB_LOTE_ARQUIVO \nWHERE NM_ARQUIVO = @psNomeArquivo;"
											}
										]
									}
								},
								{
									"name": "GravaLoteArquivo",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set varPeriodoReferencia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabaseConv86",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "NomeArquivo",
														"type": "String",
														"value": {
															"value": "@variables('varNomeArquivo')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "NovoLote",
														"type": "String",
														"value": {
															"value": "@variables('varNovoLote')",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "varPeriodoReferencia",
														"type": "String",
														"value": {
															"value": "@variables('varPeriodoReferencia')",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": "DELETE from CONVENIO.CVTB_CARGA_ERRO_LAYOUT WITH (ROWLOCK) where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK)\nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \nAND LA.NM_ARQUIVO = @NomeArquivo\nAND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_VIVO_NEXT_K16 WITH (ROWLOCK) where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK)\nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\nDELETE from CONVENIO.CVTB_VIVO_NEXT_K17 WITH (ROWLOCK) where ID_LOTE_ARQUIVO IN (SELECT LA.ID_LOTE_ARQUIVO \nFROM [CONVENIO].[CVTB_LOTE_ARQUIVO] LA WITH (NOLOCK)\nWHERE LA.ID_LOTE_ARQUIVO = ID_LOTE_ARQUIVO \n  AND LA.NM_ARQUIVO = @NomeArquivo\n  AND LA.ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO'));\n\n\nDELETE from CONVENIO.CVTB_LOTE_ARQUIVO WITH (ROWLOCK)\n where NM_ARQUIVO = @NomeArquivo \n   and ID_LOTE IN (SELECT L.ID_LOTE FROM [CONVENIO].[CVTB_LOTE] L WITH (NOLOCK) WHERE L.ID_LOTE = ID_LOTE AND L.FL_STATUS <> 'PROCESSADO');\n\nINSERT INTO CONVENIO.CVTB_LOTE_ARQUIVO (NM_ARQUIVO,ID_LOTE,ID_SISTEMA_ARQUIVO, DATA_REF_ARQUIVO) \nVALUES (@NomeArquivo, CONVERT(NUMERIC(28), @NovoLote),CASE WHEN SUBSTRING(@NomeArquivo, 10, 3) = 'K16' THEN 11   ELSE 12 END, @varPeriodoReferencia);"
											}
										]
									}
								},
								{
									"name": "Set varNovoLoteArquivo",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "BuscaLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNovoLoteArquivo",
										"value": {
											"value": "@activity('BuscaLoteArquivo').output.resultSets[0].rows[0].ID_LA",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set varNovoLoteArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@substring(variables('varNomeArquivo'),0,12)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Vivonext_K17",
												"activities": [
													{
														"name": "TrataArquivoVivoNextK17",
														"type": "ExecuteDataFlow",
														"dependsOn": [
															{
																"activity": "IncluiEstatisticaTabLoteArquivoVivoNextK17",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfGravaArquivoVivoNextK17",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"srcArqVivoNextK17": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"BuscaLoteArqAtual": {},
																	"GravaTabVivoNextK17": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "ValidacaoLayoutVivoNextK17",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfValidacaoLayoutVivoNextK17",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArquivo": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	},
																	"pLoteArquivo": {
																		"value": "'@{variables('varNovoLoteArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"BuscaLinhasArqVivoNext17": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"CriaArqCorrigidoVivoNextK17": {
																		"NomeArq": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"InsereLinhasNaoValidas": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													},
													{
														"name": "QdeLinhasValidasVivoNextK17",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutVivoNextK17",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasValidas_VivoK17",
															"value": {
																"value": "@string(activity('ValidacaoLayoutVivoNextK17').output.runStatus.metrics.CriaArqCorrigidoVivoNextK17.stages[0].recordsWritten)\n",
																"type": "Expression"
															}
														}
													},
													{
														"name": "QdeLinhasLidasVivoNextK17",
														"type": "SetVariable",
														"dependsOn": [
															{
																"activity": "ValidacaoLayoutVivoNextK17",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"userProperties": [],
														"typeProperties": {
															"variableName": "varQdeLinhasLidas_VivoK17",
															"value": {
																"value": "@string(activity('ValidacaoLayoutVivoNextK17').output.runStatus.metrics.InsereLinhasNaoValidas.stages[0].streams.CalcQdePipes.count)",
																"type": "Expression"
															}
														}
													},
													{
														"name": "IncluiEstatisticaTabLoteArquivoVivoNextK17",
														"type": "Script",
														"dependsOn": [
															{
																"activity": "QdeLinhasValidasVivoNextK17",
																"dependencyConditions": [
																	"Succeeded"
																]
															},
															{
																"activity": "QdeLinhasLidasVivoNextK17",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"linkedServiceName": {
															"referenceName": "AzureSqlDatabaseConv86",
															"type": "LinkedServiceReference"
														},
														"typeProperties": {
															"scripts": [
																{
																	"parameters": [
																		{
																			"name": "LinhasTotais",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasLidas_VivoK17')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "LinhasValidas",
																			"type": "String",
																			"value": {
																				"value": "@variables('varQdeLinhasValidas_VivoK17')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		},
																		{
																			"name": "ID_LOTE_ARQUIVO",
																			"type": "String",
																			"value": {
																				"value": "@variables('varNovoLoteArquivo')",
																				"type": "Expression"
																			},
																			"direction": "Input"
																		}
																	],
																	"type": "NonQuery",
																	"text": {
																		"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)\nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																		"type": "Expression"
																	}
																}
															]
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "TrataArquivoVivoNextK16",
												"type": "ExecuteDataFlow",
												"dependsOn": [
													{
														"activity": "IncluiEstatisticaTabLoteArquivo_VivoNextK16",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfGravaArquivoVivoNextK16",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"srcArqVivoNextK16": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"BuscaLoteArqAtual": {},
															"GravaTabVivoNextK16": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "dfValidacaoLayoutVivoNextK16",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "1.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "dfValidacaoLayoutVivoNextK16",
														"type": "DataFlowReference",
														"parameters": {
															"pNomeArquivo": {
																"value": "'@{variables('varNomeArquivo')}'",
																"type": "Expression"
															},
															"pLoteArquivo": {
																"value": "'@{variables('varNovoLoteArquivo')}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"BuscaLinhasArqVivoNextK16": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"CriaArqValidosVivoNextK16": {
																"NomeArq": {
																	"value": "@variables('varNomeArquivo')",
																	"type": "Expression"
																}
															},
															"InsereLinhasNaoValidasVivoNextK16": {}
														}
													},
													"staging": {},
													"integrationRuntime": {
														"referenceName": "integrationRuntimeConv86",
														"type": "IntegrationRuntimeReference"
													},
													"traceLevel": "Fine"
												}
											},
											{
												"name": "QdeLinhasValidasVivoNextK16",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutVivoNextK16",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasValidas_VivoK16",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutVivoNextK16').output.runStatus.metrics.CriaArqValidosVivoNextK16.stages[0].recordsWritten)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "QdeLinhasLidasVivoNextK16",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dfValidacaoLayoutVivoNextK16",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varQdeLinhasLidas_VivoK16",
													"value": {
														"value": "@string(activity('dfValidacaoLayoutVivoNextK16').output.runStatus.metrics.InsereLinhasNaoValidasVivoNextK16.stages[0].streams.CalcQdePipes.count)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "IncluiEstatisticaTabLoteArquivo_VivoNextK16",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "QdeLinhasLidasVivoNextK16",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "QdeLinhasValidasVivoNextK16",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "LinhasTotais",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasLidas_VivoK16')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "LinhasValidas",
																	"type": "String",
																	"value": {
																		"value": "@variables('varQdeLinhasValidas_VivoK16')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ID_LOTE_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNovoLoteArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": {
																"value": "UPDATE convenio.cvtb_lote_arquivo\nSET VL_REGISTROS_SUCESSO = CONVERT(NUMERIC(28), @LinhasValidas)\n  , QT_REGISTROS = CONVERT(NUMERIC(28), @LinhasTotais)\nWHERE id_lote_arquivo = CONVERT(NUMERIC(28), @ID_LOTE_ARQUIVO)",
																"type": "Expression"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"name": "Set varPeriodoReferencia",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set varNomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varPeriodoReferencia",
										"value": {
											"value": "@replace(substring(variables('varNomeArquivo'), 13, 7), '_', '')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "CargaUnificadaVivonext",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfCargaUnificadaVivoNext",
								"type": "DataFlowReference",
								"parameters": {
									"pLote": {
										"value": "'@{variables('varNovoLote')}'",
										"type": "Expression"
									},
									"pMesAnoRef": {
										"value": "'@{variables('varPeriodoReferencia')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TabelasVivoNext": {},
									"TabelaCONTESTACAO": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "AtualizaLoteQtdContestacoes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CargaUnificadaVivonext",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_Lote",
											"type": "String",
											"value": {
												"value": "@variables('varNovoLote')",
												"type": "Expression"
											},
											"direction": "Input"
										},
										{
											"name": "pVlr_QtdContestacoes",
											"type": "String",
											"value": {
												"value": "@activity('CargaUnificadaVivonext').output.runStatus.metrics.TabelaCONTESTACAO.rowsWritten",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": {
										"value": "UPDATE [CONVENIO].[CVTB_LOTE] SET QT_CONTESTACOES = CONVERT(NUMERIC(18), @pVlr_QtdContestacoes) WHERE ID_LOTE = CONVERT(NUMERIC(28),@pId_Lote);\n\nTRUNCATE TABLE [CONVENIO].[CVTB_VIVO_NEXT_K16];\n\nTRUNCATE TABLE [CONVENIO].[CVTB_VIVO_NEXT_K17];",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "stp_elegibilidadeVivonext",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "AtualizaLoteQtdContestacoes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[CONVENIO].[stp_elegibilidade_Vivonext]",
							"storedProcedureParameters": {
								"pid_lote_ajuste": {
									"value": {
										"value": "@variables('varNovoLote')",
										"type": "Expression"
									},
									"type": "Decimal"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varNovoLote": {
						"type": "String"
					},
					"varNomeArquivo": {
						"type": "String"
					},
					"varNovoLoteArquivo": {
						"type": "String"
					},
					"varPeriodoReferencia": {
						"type": "String"
					},
					"varQdeLinhasValidas_VivoK16": {
						"type": "String"
					},
					"varQdeLinhasLidas_VivoK16": {
						"type": "String"
					},
					"varQdeLinhasValidas_VivoK17": {
						"type": "String"
					},
					"varQdeLinhasLidas_VivoK17": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivoVivoNext"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ListaArquivosBlobVivoNext_Originais')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/dataflows/dfCargaUnificadaVivoNext')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeConv86')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoVivoNextK16')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutVivoNextK16')]",
				"[concat(variables('factoryId'), '/dataflows/dfGravaArquivoVivoNextK17')]",
				"[concat(variables('factoryId'), '/dataflows/dfValidacaoLayoutVivoNextK17')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaArquivosConvenio115')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivos",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "1.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "arq_Conv115",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltraArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltraArquivos').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "NomeArquivo",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varNomeArquivo",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "NomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@substring(variables('varNomeArquivo'), 28, 1)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "C",
												"activities": [
													{
														"name": "dfMapeamento115Controle",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfMapeamento115Controle",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArq": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"EntradaControleV3": {
																		"NomeArqControle": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"SaidaParquetArqControle": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													}
												]
											},
											{
												"value": "D",
												"activities": [
													{
														"name": "dfMapeamento115Cadastral",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfMapeamento115Cadastral",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArq": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"EntradaArqCadastral": {
																		"NomeArqCadastral": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"SaidaArqCadastral": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													}
												]
											},
											{
												"value": "I",
												"activities": [
													{
														"name": "dfMapeamento115Item",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfMapeamento115Item",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArq": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"EntradaArqItem": {
																		"NomeArqItem": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"SaidaArqItem": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													}
												]
											},
											{
												"value": "M",
												"activities": [
													{
														"name": "dfMapeamento115Mestre",
														"type": "ExecuteDataFlow",
														"dependsOn": [],
														"policy": {
															"timeout": "1.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"dataflow": {
																"referenceName": "dfMapeamento115Mestre",
																"type": "DataFlowReference",
																"parameters": {
																	"pNomeArq": {
																		"value": "'@{variables('varNomeArquivo')}'",
																		"type": "Expression"
																	}
																},
																"datasetParameters": {
																	"EntradaArqMestre": {
																		"NomeArqMestre": {
																			"value": "@variables('varNomeArquivo')",
																			"type": "Expression"
																		}
																	},
																	"SaidaArqMestre": {}
																}
															},
															"staging": {},
															"integrationRuntime": {
																"referenceName": "integrationRuntimeConv86",
																"type": "IntegrationRuntimeReference"
															},
															"traceLevel": "Fine"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "If Condition",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "NomeArquivo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@endswith(variables('varNomeArquivo'), 'C.001')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "SERIE",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varCD_SERIE",
													"value": {
														"value": "@substring(variables('varNomeArquivo'), 18, 3)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "UF",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varCD_UF",
													"value": {
														"value": "@substring(variables('varNomeArquivo'), 0, 2)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "ANOMES",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varCD_ANOMES",
													"value": {
														"value": "@concat('20',substring(variables('varNomeArquivo'), 21, 4))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CNPJ_EMPRESA",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varCD_CNPJ_EMPRESA",
													"value": {
														"value": "@substring(variables('varNomeArquivo'), 2, 14)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "MODELO",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "varCD_MODELO",
													"value": {
														"value": "@substring(variables('varNomeArquivo'), 16, 2)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "RegistroTabConv115",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "SERIE",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "UF",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "ANOMES",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "CNPJ_EMPRESA",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "MODELO",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "1.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabaseConv86",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"parameters": [
																{
																	"name": "SERIE",
																	"type": "String",
																	"value": {
																		"value": "@variables('varCD_SERIE')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "UF",
																	"type": "String",
																	"value": {
																		"value": "@variables('varCD_UF')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "ANOMES",
																	"type": "String",
																	"value": {
																		"value": "@variables('varCD_ANOMES')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "CNPJ_EMPRESA",
																	"type": "String",
																	"value": {
																		"value": "@variables('varCD_CNPJ_EMPRESA')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "NOME_ARQUIVO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varNomeArquivo')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																},
																{
																	"name": "MODELO",
																	"type": "String",
																	"value": {
																		"value": "@variables('varCD_MODELO')",
																		"type": "Expression"
																	},
																	"direction": "Input"
																}
															],
															"type": "NonQuery",
															"text": "INSERT INTO convenio.cvtb_convenio_115 \n(\nCD_SERIE, \nCD_UF, \nCD_ANO_MES, \nCD_CNPJ_EMPRESA,\nDT_INICIO_VIGENCIA,\nDT_CRIADO_EM, \nCD_CRIADO_POR, \nDT_ATUALIZADO_EM, \nCD_ATUALIZADO_POR, \nDS_FILE, \nCD_MODELO\n)\nVALUES \n(\n@SERIE,\n@UF,\n@ANOMES,\n@CNPJ_EMPRESA, \nDATEADD(HOUR, -3, sysdatetime()),\nDATEADD(HOUR, -3, sysdatetime()),\n'SYSTEM',\nDATEADD(HOUR, -3, sysdatetime()),\n'SYSTEM',\n@NOME_ARQUIVO,\n@MODELO\n)"
														}
													]
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "FiltraArquivos",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(length(item().Name), 33)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varNomeArquivo": {
						"type": "String"
					},
					"varCD_SERIE": {
						"type": "String"
					},
					"varCD_UF": {
						"type": "String"
					},
					"varCD_ANOMES": {
						"type": "String"
					},
					"varCD_CNPJ_EMPRESA": {
						"type": "String"
					},
					"varCD_MODELO": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosConv115"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_Conv115')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]",
				"[concat(variables('factoryId'), '/dataflows/dfMapeamento115Controle')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeConv86')]",
				"[concat(variables('factoryId'), '/dataflows/dfMapeamento115Cadastral')]",
				"[concat(variables('factoryId'), '/dataflows/dfMapeamento115Item')]",
				"[concat(variables('factoryId'), '/dataflows/dfMapeamento115Mestre')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCargaRelatoriosOnline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfGeraRelEstoqueContestacao",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfGeraRelEstoqueContestacao",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"QryContestacoes": {},
									"RelEstoqueContestacoes": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dfGeraRelInconsistencia",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfGeraRelInconsistencia",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"QryInconsistencia": {},
									"RelInconsistencia": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimeConv86",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Relatorios"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfGeraRelEstoqueContestacao')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeConv86')]",
				"[concat(variables('factoryId'), '/dataflows/dfGeraRelInconsistencia')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plControleCarga')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListaArquivosKenan",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VerificaDiretorioKenan",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "FiltraArquivosKenan",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivosKenan",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivosKenan').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(or(startswith(item().Name, '01'), startswith(item().Name, '02')), startswith(item().Name, '03'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "TestaPastaComArquivosKenan",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FiltraArquivosKenan",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('FiltraArquivosKenan').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "plCtrCargaArquivosContestacaoKenan",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plCtrCargaArquivosContestacaoKenan",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "ListaArquivosAtlys",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VerificaDiretorioAtlys",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "TestaPastaComArquivosAtlys",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FiltraArquivosAtlys",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('FiltraArquivosAtlys').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "plCtrCargaArquivosContestacaoAtlys",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plCtrCargaArquivosContestacaoAtlys",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "ListaArquivosAtis",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VerificaDiretorioAtis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "FiltraArquivosAtlys",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivosAtlys",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivosAtlys').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'adj'), startswith(item().Name, 'rcvbl'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FiltraArquivosAtis",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivosAtis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivosAtis').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'ATIS_PAGO'), startswith(item().Name, 'ATIS_NAOPAGO'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "TestaPastaComArquivosAtis",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FiltraArquivosAtis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('FiltraArquivosAtis').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "plCtrCargaArquivosContestacaoAtis",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plCtrCargaArquivosContestacaoAtis",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "ListaArquivosFat",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VerificaDiretorioFat",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "FiltraArquivosFat",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivosFat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivosFat').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'CAR_FF'), startswith(item().Name, 'CAR_FNP'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "TestaPastaComArquivosFat",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FiltraArquivosFat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('FiltraArquivosFat').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "plCtrCargaArquivosContestacaoFat",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plCtrCargaArquivosContestacaoFat",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "ListaArquivosVivonext",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "VerificaDiretorioVivoNext",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "FiltraArquivosVivonext",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListaArquivosVivonext",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListaArquivosVivonext').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().Name, 'Vivonext_K16'), startswith(item().Name, 'Vivonext_K17'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "TestaPastaComArquivosVivonext",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FiltraArquivosVivonext",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('FiltraArquivosVivonext').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "plCtrCargaArquivosContestacaoVivoNext",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plCtrCargaArquivosContestacaoVivoNext",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VerificaDiretorioKenan')]",
				"[concat(variables('factoryId'), '/datasets/VerificaDiretorioAtlys')]",
				"[concat(variables('factoryId'), '/datasets/VerificaDiretorioAtis')]",
				"[concat(variables('factoryId'), '/datasets/VerificaDiretorioFat')]",
				"[concat(variables('factoryId'), '/datasets/VerificaDiretorioVivoNext')]",
				"[concat(variables('factoryId'), '/pipelines/plCtrCargaArquivosContestacaoKenan')]",
				"[concat(variables('factoryId'), '/pipelines/plCtrCargaArquivosContestacaoAtlys')]",
				"[concat(variables('factoryId'), '/pipelines/plCtrCargaArquivosContestacaoAtis')]",
				"[concat(variables('factoryId'), '/pipelines/plCtrCargaArquivosContestacaoFat')]",
				"[concat(variables('factoryId'), '/pipelines/plCtrCargaArquivosContestacaoVivoNext')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCtrCargaArquivosContestacaoAtis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "plCargaArquivosContestacaoAtis",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plCargaArquivosContestacaoAtis",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BuscaNovoLoteOK",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "plCargaArquivosContestacaoAtis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqAtis';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set varNovoLoteOK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLoteOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLote",
							"value": {
								"value": "@string(activity('BuscaNovoLoteOK').output.firstRow.ID_LOTE)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FinalizaLoteOK",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set varNovoLoteOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_lote",
											"type": "String",
											"value": {
												"value": "@variables('varLote')",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": "UPDATE [CONVENIO].[CVTB_LOTE]\n    SET DT_FIM_PROCESSAMENTO = DATEADD(HOUR, -3, sysdatetime()),\n        FL_STATUS = 'PROCESSADO'\n    WHERE ID_LOTE = CAST(@pId_lote AS numeric(38));"
								}
							]
						}
					},
					{
						"name": "FinalizaLoteErro",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set varNovoLoteNOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_lote",
											"type": "String",
											"value": {
												"value": "@variables('varLote')",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": "UPDATE [CONVENIO].[CVTB_LOTE]\n    SET DT_FIM_PROCESSAMENTO = DATEADD(HOUR, -3, sysdatetime()),\n        FL_STATUS = 'ERRO'\n    WHERE ID_LOTE = CAST(@pId_lote AS numeric(38));"
								}
							]
						}
					},
					{
						"name": "BuscaNovoLote_NOK",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "plCargaArquivosContestacaoAtis",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqAtis';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set varNovoLoteNOK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote_NOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote_NOK').output.firstRow.ID_LOTE)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varLote": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosAtis"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-18T13:46:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/plCargaArquivosContestacaoAtis')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCtrCargaArquivosContestacaoAtlys')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "plCargaArquivosContestacaoAtlys",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plCargaArquivosContestacaoAtlys",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BuscaNovoLoteOK",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "plCargaArquivosContestacaoAtlys",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqAtlys';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set varNovoLoteOK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLoteOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLote",
							"value": {
								"value": "@string(activity('BuscaNovoLoteOK').output.firstRow.ID_LOTE)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FinalizaLoteOK",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set varNovoLoteOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_lote",
											"type": "String",
											"value": {
												"value": "@variables('varLote')",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": "UPDATE [CONVENIO].[CVTB_LOTE]\n    SET DT_FIM_PROCESSAMENTO = DATEADD(HOUR, -3, sysdatetime()),\n        FL_STATUS = 'PROCESSADO'\n    WHERE ID_LOTE = CAST(@pId_lote AS numeric(38));"
								}
							]
						}
					},
					{
						"name": "FinalizaLoteErro",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set varNovoLoteNOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_lote",
											"type": "String",
											"value": {
												"value": "@variables('varLote')",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": "UPDATE [CONVENIO].[CVTB_LOTE]\n    SET DT_FIM_PROCESSAMENTO = DATEADD(HOUR, -3, sysdatetime()),\n        FL_STATUS = 'ERRO'\n    WHERE ID_LOTE = CAST(@pId_lote AS numeric(38));"
								}
							]
						}
					},
					{
						"name": "BuscaNovoLote_NOK",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "plCargaArquivosContestacaoAtlys",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqAtlys';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set varNovoLoteNOK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote_NOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote_NOK').output.firstRow.ID_LOTE)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varLote": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosAtlys"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-18T13:46:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/plCargaArquivosContestacaoAtlys')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCtrCargaArquivosContestacaoFat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "plCargaArquivosContestacaoFat",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plCargaArquivosContestacaoFat",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FinalizaLoteOK",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set varNovoLoteOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_lote",
											"type": "String",
											"value": {
												"value": "@variables('varLote')",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": "UPDATE [CONVENIO].[CVTB_LOTE]\n    SET DT_FIM_PROCESSAMENTO = DATEADD(HOUR, -3, sysdatetime()),\n        FL_STATUS = 'PROCESSADO'\n    WHERE ID_LOTE = CAST(@pId_lote AS numeric(38));"
								}
							]
						}
					},
					{
						"name": "FinalizaLoteErro",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set varNovoLoteNOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_lote",
											"type": "String",
											"value": {
												"value": "@variables('varLote')",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": "UPDATE [CONVENIO].[CVTB_LOTE]\n    SET DT_FIM_PROCESSAMENTO = DATEADD(HOUR, -3, sysdatetime()),\n        FL_STATUS = 'ERRO'\n    WHERE ID_LOTE = CAST(@pId_lote AS numeric(38));"
								}
							]
						}
					},
					{
						"name": "Set varNovoLoteOK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLoteOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLote",
							"value": {
								"value": "@string(activity('BuscaNovoLoteOK').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLoteOK",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "plCargaArquivosContestacaoFat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqFat';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set varNovoLoteNOK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote_NOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote_NOK').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLote_NOK",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "plCargaArquivosContestacaoFat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqFat';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varLote": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosFat"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-18T13:46:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/plCargaArquivosContestacaoFat')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCtrCargaArquivosContestacaoKenan')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "plCargaArquivosContestacaoKenan",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plCargaArquivosContestacaoKenan",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FinalizaLoteOK",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set varNovoLoteOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_lote",
											"type": "String",
											"value": {
												"value": "@variables('varLote')",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": "UPDATE [CONVENIO].[CVTB_LOTE]\n    SET DT_FIM_PROCESSAMENTO = DATEADD(HOUR, -3, sysdatetime()),\n        FL_STATUS = 'PROCESSADO'\n    WHERE ID_LOTE = CAST(@pId_lote AS numeric(38));"
								}
							]
						}
					},
					{
						"name": "FinalizaLoteErro",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set varNovoLoteNOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_lote",
											"type": "String",
											"value": {
												"value": "@variables('varLote')",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": "UPDATE [CONVENIO].[CVTB_LOTE]\n    SET DT_FIM_PROCESSAMENTO = DATEADD(HOUR, -3, sysdatetime()),\n        FL_STATUS = 'ERRO'\n    WHERE ID_LOTE = CAST(@pId_lote AS numeric(38));"
								}
							]
						}
					},
					{
						"name": "Set varNovoLoteOK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLoteOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLote",
							"value": {
								"value": "@string(activity('BuscaNovoLoteOK').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLoteOK",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "plCargaArquivosContestacaoKenan",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqKenan';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set varNovoLoteNOK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote_NOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote_NOK').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLote_NOK",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "plCargaArquivosContestacaoKenan",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqKenan';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varLote": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivosKenan"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-18T13:46:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/plCargaArquivosContestacaoKenan')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plCtrCargaArquivosContestacaoVivoNext')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FinalizaLoteOK",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set varNovoLoteOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_lote",
											"type": "String",
											"value": {
												"value": "@variables('varLote')",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": "UPDATE [CONVENIO].[CVTB_LOTE]\n    SET DT_FIM_PROCESSAMENTO = DATEADD(HOUR, -3, sysdatetime()),\n        FL_STATUS = 'PROCESSADO'\n    WHERE ID_LOTE = CAST(@pId_lote AS numeric(38));"
								}
							]
						}
					},
					{
						"name": "FinalizaLoteErro",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set varNovoLoteNOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseConv86",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "pId_lote",
											"type": "String",
											"value": {
												"value": "@variables('varLote')",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "NonQuery",
									"text": "UPDATE [CONVENIO].[CVTB_LOTE]\n    SET DT_FIM_PROCESSAMENTO = DATEADD(HOUR, -3, sysdatetime()),\n        FL_STATUS = 'ERRO'\n    WHERE ID_LOTE = CAST(@pId_lote AS numeric(38));"
								}
							]
						}
					},
					{
						"name": "Set varNovoLoteOK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLoteOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLote",
							"value": {
								"value": "@string(activity('BuscaNovoLoteOK').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLoteOK",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "plCargaArquivosVivoNext",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqVivoNext';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set varNovoLoteNOK",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "BuscaNovoLote_NOK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varLote",
							"value": {
								"value": "@string(activity('BuscaNovoLote_NOK').output.firstRow.ID_LOTE)\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "BuscaNovoLote_NOK",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "plCargaArquivosVivoNext",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT MAX(ID_LOTE) AS ID_LOTE FROM CONVENIO.CVTB_LOTE WHERE CD_CRIADO_POR = 'Carga ADF - CargaArqVivoNext';\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "plCargaArquivosVivoNext",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plCargaArquivosContestacaoVivoNext",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varLote": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CargaArquivoVivoNext"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/pipelines/plCargaArquivosContestacaoVivoNext')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Arq_Conv115_Controle')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArqControle": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Conv115"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArqControle",
							"type": "Expression"
						},
						"container": "arq-conv115"
					},
					"columnDelimiter": "#$%",
					"encodingName": "ISO-8859-1",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Arq_Conv115_Controle_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Conv115"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "parquet/Convenio115Controle",
						"container": "arq-conv115"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Arq_Conv115_ItemNF_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Conv115"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "teste",
						"folderPath": "parquet/convenio115ItemNF",
						"container": "arq-conv115"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Arq_Conv115_MestreNF_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Conv115"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "teste",
						"folderPath": "parquet/convenio115MestreNF",
						"container": "arq-conv115"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_ATIS_NAO_PAGO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atis"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_ATIS_NAO_PAGO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_LOTE_ARQUIVO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "COD_IDENT_CLI",
						"type": "varchar"
					},
					{
						"name": "CPF_CNPJ",
						"type": "varchar"
					},
					{
						"name": "TIPO_DOCUMENTO",
						"type": "varchar"
					},
					{
						"name": "UF_FATURA",
						"type": "varchar"
					},
					{
						"name": "NUM_FATURA_ORIGINAL",
						"type": "varchar"
					},
					{
						"name": "DT_ABERTURA_IMPUG",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_VENC_FATURA_ORIGINAL",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VLR_FATURA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "COD_FAC_CD",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "VLR_CONTESTADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "DT_AJUSTE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DESCR_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "COD_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "CONTACONTABIL",
						"type": "varchar"
					},
					{
						"name": "DESCRCONTACONTABIL",
						"type": "varchar"
					},
					{
						"name": "SALDO_POS_AJUSTE",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SALDO_DEVEDOR",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "COD_MOTIVO_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "NOTA_FISCAL_ORIG",
						"type": "varchar"
					},
					{
						"name": "SERIE_NF",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_FATURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VLR_ORIG_NSFT",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "TIPO_OPERACAO",
						"type": "varchar"
					},
					{
						"name": "FAMILIA_PRODUTOS",
						"type": "varchar"
					},
					{
						"name": "DT_FECHAMENTO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_CONTA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "RECEITA_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "DT_VENCTO_BOLETO_ULT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "MOTIVO_OPERACAO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_ATIS_NAO_PAGO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_ATIS_PAGO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_ATIS_PAGO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_LOTE_ARQUIVO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "COD_IDENT_CLI",
						"type": "varchar"
					},
					{
						"name": "CPF_CNPJ",
						"type": "varchar"
					},
					{
						"name": "TIPO_DOCUMENTO",
						"type": "varchar"
					},
					{
						"name": "UF_FATURA",
						"type": "varchar"
					},
					{
						"name": "NUM_FATURA_ORIGINAL",
						"type": "varchar"
					},
					{
						"name": "DT_ABERTURA_IMPUG",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_VENC_FATURA_ORIGINAL",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VLR_FATURA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "COD_FAC_CD",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "FATURA_ATRIBUIDA",
						"type": "varchar"
					},
					{
						"name": "DT_AJUSTE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DESCR_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "COD_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "CONTACONTABIL",
						"type": "varchar"
					},
					{
						"name": "DESCRCONTACONTABIL",
						"type": "varchar"
					},
					{
						"name": "COD_MOTIVO_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "NOTA_FISCAL_ORIG",
						"type": "varchar"
					},
					{
						"name": "SERIE_NF",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_FATURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VLR_ORIG_NSFT",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "TIPO_OPERACAO",
						"type": "varchar"
					},
					{
						"name": "VLR_DEVOLUCAO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_CREDITO_AJUSTE",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_AJUSTE_ITEM",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_CREDITO_ITEM",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "FAMILIA_PRODUTOS",
						"type": "varchar"
					},
					{
						"name": "DT_FECHAMENTO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_VENCTO_FUTURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "RECEITA_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "DT_VENCTO_BOLETO_ULT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SALDO_DEVEDOR",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SALDO_POS_AJUSTE",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_CONTESTADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "COD_CREDITO",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "VLR_FATURA_FUTURA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "NUM_FATURA_FUTURA",
						"type": "varchar"
					},
					{
						"name": "MOTIVO_OPERACAO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_ATIS_PAGO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_ATLYS_ADJ')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atlys"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_ATLYS_ADJ",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_LOTE_ARQUIVO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "NOTA_FISCAL",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_NF",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VLR_ORIG_NFST",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "SERIE",
						"type": "varchar"
					},
					{
						"name": "CONTA_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "CNPJ_CPF",
						"type": "varchar"
					},
					{
						"name": "NOM_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "NUM_TERMINAL",
						"type": "varchar"
					},
					{
						"name": "VLR_CONTEST_AJUSTE",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "VLR_ATRIBUIDO",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "DT_ATRIBUICAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "HR_ATRIBUICAO",
						"type": "varchar"
					},
					{
						"name": "DT_AJUSTE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "HR_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "OPERADORA",
						"type": "varchar"
					},
					{
						"name": "CODIGO_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "COD_MOTIVO_AJUSTES",
						"type": "varchar"
					},
					{
						"name": "DESC_MOTIVO_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "DATA_ABERTURA_IMPU",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DATA_FECH_IMPUG",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DSPUT_ID",
						"type": "varchar"
					},
					{
						"name": "TP_NOTA_FISCAL",
						"type": "varchar"
					},
					{
						"name": "CLASSE_RECEBER",
						"type": "varchar"
					},
					{
						"name": "CONTA_CONTABIL",
						"type": "varchar"
					},
					{
						"name": "DESCR_CONTA_CONTABIL",
						"type": "varchar"
					},
					{
						"name": "NUMERO_FATURA",
						"type": "varchar"
					},
					{
						"name": "VALOR_DOCTO_ORIGINAL",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "MES_ANO_REFERENTE",
						"type": "varchar"
					},
					{
						"name": "DATA_VENC_FATUR",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VALOR_PAGAMENTO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "DATA_ATRIBUICAO_PGTO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "FATU_ATRIBUIDA",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_FATURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "MES_ANO_FATURA",
						"type": "varchar"
					},
					{
						"name": "VALOR_FATURA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SALDO_DEVEDOR",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "UF",
						"type": "varchar"
					},
					{
						"name": "OPERADORA_REAL",
						"type": "varchar"
					},
					{
						"name": "SALDO_FATURA_INI",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SALDO_FATURA_FIM",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SEQ_RECEBIVEL",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_ATLYS_ADJ"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_ATLYS_RCBL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atlys"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_ATLYS_RCBL",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_LOTE_ARQUIVO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "NOME_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "CNPJ_CPF",
						"type": "varchar"
					},
					{
						"name": "CONTA_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "CLASSE_RECEBER",
						"type": "varchar"
					},
					{
						"name": "OPERADORA",
						"type": "varchar"
					},
					{
						"name": "CODIGO_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "NUMERO_FATURA",
						"type": "varchar"
					},
					{
						"name": "MES_ANO_REFERENTE",
						"type": "varchar"
					},
					{
						"name": "VALOR_DOCTO_ORIGINAL",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "FATURA_ATRIBUIDA",
						"type": "varchar"
					},
					{
						"name": "MES_ANO_FATURA",
						"type": "varchar"
					},
					{
						"name": "VALOR_FATURA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SALDO_DEVIDO_ORIG",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "DATA_EMISSAO_FATURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VALOR_TOTAL_PAGAMENTO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "DATA_FEBRABAN",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VALOR_ATRIBUICAO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "UF",
						"type": "varchar"
					},
					{
						"name": "DATA_ATRIBUICAO_PGTO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "HORA_ATRIBUICAO_PGTO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_ATLYS_RCBL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_CARGA_ERRO_LAYOUT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_CARGA_ERRO_LAYOUT",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_LOTE_ARQUIVO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "FL_CORRIGIDO",
						"type": "char"
					},
					{
						"name": "ID_CONTESTACAO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "FL_CORRIGIDO_AUTOMATICO",
						"type": "char"
					},
					{
						"name": "DS_LINHA",
						"type": "varchar"
					},
					{
						"name": "DT_CRIADO_EM",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CD_CRIADO_POR",
						"type": "varchar"
					},
					{
						"name": "DT_ATUALIZADO_EM",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CD_ATUALIZADO_POR",
						"type": "varchar"
					},
					{
						"name": "DS_TRATATIVA",
						"type": "varchar"
					},
					{
						"name": "DS_LINHA_RECUPERADA",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_CARGA_ERRO_LAYOUT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_CONTESTACAO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_CONTESTACAO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "NOTA_FISCAL_ORIG",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_NF_ORIG",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VLR_ORIG_NSFT",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SERIE_NF",
						"type": "varchar"
					},
					{
						"name": "COD_IDENT_CLI",
						"type": "varchar"
					},
					{
						"name": "CPF_CNPJ",
						"type": "varchar"
					},
					{
						"name": "NOME_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "TERMINAL",
						"type": "varchar"
					},
					{
						"name": "VLR_TOTAL_ATRIBUIDO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_ATRIBUIDO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "DT_ATRIBUICAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_AJUSTE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DESCR_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "COD_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "COD_MOTIVO_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "DESC_MOTIVO_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "NUM_CONTROLE_RECLAMACAO",
						"type": "varchar"
					},
					{
						"name": "CLASSE_RECEBER",
						"type": "varchar"
					},
					{
						"name": "CONTA_FINANCEIRA",
						"type": "varchar"
					},
					{
						"name": "DESC_CONTA_FINANCEIRA",
						"type": "varchar"
					},
					{
						"name": "NUM_FATURA_ORIGINAL",
						"type": "varchar"
					},
					{
						"name": "VLR_DOC_ORIGINAL",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "FATURA_ATRIBUIDA",
						"type": "varchar"
					},
					{
						"name": "VLR_FATURA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "UF_FATURA",
						"type": "varchar"
					},
					{
						"name": "SEQ_RECEBIVEL",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "MODELO",
						"type": "varchar"
					},
					{
						"name": "NUMORDEMDOITEM",
						"type": "decimal",
						"precision": 3,
						"scale": 0
					},
					{
						"name": "BC_ICMS",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "ICMS",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "ALIQUOTA_ICMS",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "BC_ICMS_RECALCULADA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "ICMS_RECALCULADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "ICMS_PARA_RESSARCIMENTO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SITUACAO",
						"type": "char"
					},
					{
						"name": "MES_APURACAO",
						"type": "varchar"
					},
					{
						"name": "TIPO_DOC",
						"type": "decimal",
						"precision": 1,
						"scale": 0
					},
					{
						"name": "COD_CONSUMIDOR",
						"type": "varchar"
					},
					{
						"name": "CHAVE_AUTENTICACAO",
						"type": "varchar"
					},
					{
						"name": "TOTAL_MESTRE",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "BC_ICMS_MESTRE",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "ICMS_DESTACADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "INSCRICAO_ESTADUAL",
						"type": "varchar"
					},
					{
						"name": "RAZAO_SOCIAL",
						"type": "varchar"
					},
					{
						"name": "FL_STATUS_GERAL",
						"type": "char"
					},
					{
						"name": "ID_LOTE_AJUSTE",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_ENTREGA_RESSARCIMENTO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "CD_ITEM",
						"type": "varchar"
					},
					{
						"name": "DS_ITEM",
						"type": "varchar"
					},
					{
						"name": "HR_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "HR_ATRIBUICAO",
						"type": "varchar"
					},
					{
						"name": "NOME_BILLING",
						"type": "varchar"
					},
					{
						"name": "TIPO_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "DT_ABERTURA_IMPUG",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_FECHA_IMPUG",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SALDO_DEVEDOR",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SALDO_FATURA_INI",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SALDO_FATURA_FIM",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "COD_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "TIPO_DOCUMENTO",
						"type": "varchar"
					},
					{
						"name": "NOME_FANTASIA",
						"type": "varchar"
					},
					{
						"name": "COD_GRUPO",
						"type": "varchar"
					},
					{
						"name": "NOME_GRUPO_ECONOMICO",
						"type": "varchar"
					},
					{
						"name": "SEGMENTO_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "SUB_SEGMENTO_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "SEGMENTO_VALOR",
						"type": "varchar"
					},
					{
						"name": "CLASSE_ELEGIBILIDADE",
						"type": "varchar"
					},
					{
						"name": "DESCR_SERV_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "DESCR_SERV",
						"type": "varchar"
					},
					{
						"name": "CONTACONTABIL_DB",
						"type": "varchar"
					},
					{
						"name": "CONTACONTABIL_CR",
						"type": "varchar"
					},
					{
						"name": "DESCR_CONTACONTABIL_DB",
						"type": "varchar"
					},
					{
						"name": "DESCR_CONTACONTABIL_CR",
						"type": "varchar"
					},
					{
						"name": "SALDO_POS_AJUSTE",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "TIPO_OPERACAO",
						"type": "varchar"
					},
					{
						"name": "TIPO_TERMINAL",
						"type": "varchar"
					},
					{
						"name": "DONO_RECEITA",
						"type": "varchar"
					},
					{
						"name": "SUBTYPE_CODE",
						"type": "decimal",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "TIPO_DESCR_SERV",
						"type": "varchar"
					},
					{
						"name": "DT_VENCTO_FAT_FUTURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VLR_IMPOSTO_CONTESTADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_IMPOSTO_ICMS",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_BRUTO_ITEM",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_OUTROS_IMPOSTOS",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_AJUSTE_ITEM",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_CREDITO_AJUSTE",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_CREDITO_ITEM",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_DEVOLUCAO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_FATURA_FUTURA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_CONTESTADO_FUTURO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "LOGIN_ATENDIMENTO",
						"type": "varchar"
					},
					{
						"name": "DT_VENC_FATURA_ORIGINAL",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_ATRIBUICAO_PGTO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "NUM_ITEM_ESTORNADO",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "FLG_RETIFICADO",
						"type": "varchar"
					},
					{
						"name": "TERMINAL_115",
						"type": "varchar"
					},
					{
						"name": "VALOR_ITEM_115",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "DT_CRIADO_EM",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CD_CRIADO_POR",
						"type": "varchar"
					},
					{
						"name": "DT_ATUALIZADO_EM",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CD_ATUALIZADO_POR",
						"type": "varchar"
					},
					{
						"name": "MES_ANO_FAT_ORIGINAL",
						"type": "varchar"
					},
					{
						"name": "MES_ANO_FAT_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "VLR_PAGAMENTO_FAT_ORIGINAL",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "ID_ITEM_CONVENIO_115",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "NUM_CONTROLE_RECLAMACAO_NORMALIZADO",
						"type": "varchar"
					},
					{
						"name": "NOTA_FISCAL_ORIG_NORMALIZADO",
						"type": "varchar"
					},
					{
						"name": "COD_FAC_CD",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "CCM_SERVICO_CONTESTADO",
						"type": "varchar"
					},
					{
						"name": "COD_TIPO_RCBL_FATURA",
						"type": "varchar"
					},
					{
						"name": "DESCR_RCBL_FATURA",
						"type": "varchar"
					},
					{
						"name": "DT_PAGAMENTO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DEBIT_ID",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_FATURA_ORIGINAL",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "UF_NF",
						"type": "char"
					},
					{
						"name": "VLR_PGTO_ALOCADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_TOTAL_PGTO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "CREDIT_ID",
						"type": "varchar"
					},
					{
						"name": "DT_REFERENCIA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_IMPORTACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "STEP_EXECUTION_ID",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "JOB_EXECUTION_ID",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "ID_MESTRE_CONVENIO_115",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "FL_MANUAL_CONCILIACAO",
						"type": "char"
					},
					{
						"name": "DT_CONCILIACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_EMISSAO_115",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "MES_ANO_REF_ARQ",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_CONTESTACAO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_FATURA_CON_KENAN')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Kenan"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_FATURA_CON_KENAN",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_LOTE_ARQUIVO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "CONTA_COBRANCA",
						"type": "varchar"
					},
					{
						"name": "CPF_CNPJ",
						"type": "varchar"
					},
					{
						"name": "CATEGORIA_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "UF_COBRANCA",
						"type": "char"
					},
					{
						"name": "ID_FATURA",
						"type": "varchar"
					},
					{
						"name": "ID_FATURA_ORIGEM",
						"type": "varchar"
					},
					{
						"name": "DT_VENCTO_ORIGINAL",
						"type": "date"
					},
					{
						"name": "DT_VENCTO_BOLETO_BAIXA",
						"type": "date"
					},
					{
						"name": "VLR_FATURA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_CONTESTADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_PAGAMENTO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_PGTO_CREDITO_ANT",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "DT_PAGAMENTO",
						"type": "date"
					},
					{
						"name": "DT_FECHA_FATURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_EMISSAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_AJUSTE",
						"type": "date"
					},
					{
						"name": "STEP_EXECUTION_ID",
						"type": "decimal",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "JOB_EXECUTION_ID",
						"type": "decimal",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "DT_REFERENCIA",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_FATURA_CON_KENAN"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_FATURA_DET_KENAN')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Kenan"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_FATURA_DET_KENAN",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_LOTE_ARQUIVO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "CONTA_COBRANCA",
						"type": "varchar"
					},
					{
						"name": "CPF_CNPJ",
						"type": "varchar"
					},
					{
						"name": "ID_FATURA",
						"type": "varchar"
					},
					{
						"name": "ID_OPEN_ITEM",
						"type": "varchar"
					},
					{
						"name": "ID_DETALHE",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "ID_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "DESC_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "TIPO_DETALHE",
						"type": "varchar"
					},
					{
						"name": "DESC_DETALHE",
						"type": "varchar"
					},
					{
						"name": "TIPO_INSTANCIA",
						"type": "varchar"
					},
					{
						"name": "NUM_INSTANCIA",
						"type": "varchar"
					},
					{
						"name": "VLR_BRUTO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_CONTESTADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_IMPOSTO_ICMS",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_OUTROS_IMPOSTOS",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_IMPOSTO_CONSTESTADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "CC_CR_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "CC_DB_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "CC_CREDITO_FAT",
						"type": "varchar"
					},
					{
						"name": "CC_DEBITO_FAT",
						"type": "varchar"
					},
					{
						"name": "CC_CREDITO_IMPOSTO",
						"type": "varchar"
					},
					{
						"name": "CC_DEBITO_IMPOSTO",
						"type": "varchar"
					},
					{
						"name": "DESC_CONTESTACAO",
						"type": "varchar"
					},
					{
						"name": "DESC_MOTIVO",
						"type": "varchar"
					},
					{
						"name": "DT_CONTESTACAO",
						"type": "date"
					},
					{
						"name": "ACCOUNT_NO",
						"type": "varchar"
					},
					{
						"name": "SUBTYPE_CODE",
						"type": "decimal",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "STEP_EXECUTION_ID",
						"type": "decimal",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "JOB_EXECUTION_ID",
						"type": "decimal",
						"precision": 19,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_FATURA_DET_KENAN"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_FATURA_ITEM_KENAN')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Kenan"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_FATURA_ITEM_KENAN",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_LOTE_ARQUIVO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "CONTA_COBRANCA",
						"type": "varchar"
					},
					{
						"name": "CPF_CNPJ",
						"type": "varchar"
					},
					{
						"name": "ID_FATURA",
						"type": "varchar"
					},
					{
						"name": "ID_OPEN_ITEM",
						"type": "varchar"
					},
					{
						"name": "DESC_OPEN_ITEM",
						"type": "varchar"
					},
					{
						"name": "VLR_ITEM",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_CONTESTADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_PAGO_ITEM",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "DT_FECHA_SALDO_ITEM",
						"type": "date"
					},
					{
						"name": "NOTA_FISCAL",
						"type": "varchar"
					},
					{
						"name": "UF_NF",
						"type": "varchar"
					},
					{
						"name": "SERIE_NF",
						"type": "varchar"
					},
					{
						"name": "SUBSERIE_NF",
						"type": "varchar"
					},
					{
						"name": "STEP_EXECUTION_ID",
						"type": "decimal",
						"precision": 19,
						"scale": 0
					},
					{
						"name": "JOB_EXECUTION_ID",
						"type": "decimal",
						"precision": 19,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_FATURA_ITEM_KENAN"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_FAT_CAR_FF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fat"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_FAT_CAR_FF",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_LOTE_ARQUIVO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "NUMERO_NF",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_NF",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VLR_TOTAL_NF",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SERIE_NF",
						"type": "varchar"
					},
					{
						"name": "CONTA_COBRANCA",
						"type": "varchar"
					},
					{
						"name": "CNPJ_CPF",
						"type": "varchar"
					},
					{
						"name": "VLR_CONTESTADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "DT_OPERACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "OPERADORA",
						"type": "varchar"
					},
					{
						"name": "CODIGO_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "MOTIVO_CONTESTACAO",
						"type": "varchar"
					},
					{
						"name": "DT_GERACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "NUMERO_FATURA_ORIGINAL",
						"type": "varchar"
					},
					{
						"name": "DT_VENCTO_ORIGINAL",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VLR_FATURA_ORIGINAL_PAGA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "NUMERO_FATURA_FUTURA",
						"type": "varchar"
					},
					{
						"name": "UF_COBRANCA",
						"type": "varchar"
					},
					{
						"name": "CATEGORIA_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "CONTACONTABIL",
						"type": "varchar"
					},
					{
						"name": "DESCRCONTACONTABIL",
						"type": "varchar"
					},
					{
						"name": "TIPO_OPERACAO",
						"type": "varchar"
					},
					{
						"name": "DONO_RECEITA",
						"type": "varchar"
					},
					{
						"name": "DT_VENCTO_FATURA_FUTURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VLR_FATURA_FUTURA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_CONTESTADO_FUTURO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "CCM_SERVICO_CONTESTATO",
						"type": "varchar"
					},
					{
						"name": "DT_VENCTO_BOLETO_ULT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CCM_CREDITO",
						"type": "varchar"
					},
					{
						"name": "MOTIVO_OPERACAO",
						"type": "varchar"
					},
					{
						"name": "VLR_POS_CONTESTACAO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_SALDO_ABERTO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "FAMILIA_PRODUTOS",
						"type": "varchar"
					},
					{
						"name": "DT_FECHAMENTO_FATURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REFERENCIA",
						"type": "varchar"
					},
					{
						"name": "VLR_CONTESTADO_FUTSUM",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_FAT_CAR_FF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_FAT_CAR_FNP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fat"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_FAT_CAR_FNP",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_LOTE_ARQUIVO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "NUMERO_NF_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_NF",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VLR_TOTAL_NF",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SERIE_NF",
						"type": "varchar"
					},
					{
						"name": "CONTA_COBRANCA",
						"type": "varchar"
					},
					{
						"name": "CNPJ_CPF",
						"type": "varchar"
					},
					{
						"name": "DT_VENCTO_BOLETO_ULT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_OPERACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "OPERADORA",
						"type": "varchar"
					},
					{
						"name": "CODIGO_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "MOTIVO_CONTESTACAO",
						"type": "varchar"
					},
					{
						"name": "DT_GERACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VLR_SALDO_ABERTO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "UF_COBRANCA",
						"type": "varchar"
					},
					{
						"name": "CATEGORIA_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "CONTACONTABIL",
						"type": "varchar"
					},
					{
						"name": "DESCRCONTACONTABIL",
						"type": "varchar"
					},
					{
						"name": "VLR_POS_CONTESTACAO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "TIPO_OPERACAO",
						"type": "varchar"
					},
					{
						"name": "DONO_RECEITA",
						"type": "varchar"
					},
					{
						"name": "MOTIVO_OPERACAO",
						"type": "varchar"
					},
					{
						"name": "FAMILIA_PRODUTOS",
						"type": "varchar"
					},
					{
						"name": "DT_FECHAMENTO_FATURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_VENCTO_ORIGINAL",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ID_FATURA",
						"type": "varchar"
					},
					{
						"name": "VLR_CONSTESTADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VLR_FATURA_ORIGINAL",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "CCM_CONTESTATO",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "CONTA",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_FAT_CAR_FNP"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_REL_ESTOQUE_CONTESTACOES')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Relatorios"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FL_STATUS_GERAL",
						"type": "char"
					},
					{
						"name": "UF_FATURA",
						"type": "varchar"
					},
					{
						"name": "DS_SISTEMA",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_NF_ORIG",
						"type": "date"
					},
					{
						"name": "DT_AJUSTE",
						"type": "date"
					},
					{
						"name": "DT_CRIADO_EM",
						"type": "date"
					},
					{
						"name": "DESC_MOTIVO_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "CONTA_CONTABIL",
						"type": "varchar"
					},
					{
						"name": "QTD",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VLR_ATRIBUIDO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "ICMS_PARA_RESSARCIMENTO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_REL_ESTOQUE_CONTESTACOES"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CVTB_REL_INCONSISTENCIAS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Relatorios"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FL_STATUS_GERAL",
						"type": "char"
					},
					{
						"name": "UF_FATURA",
						"type": "varchar"
					},
					{
						"name": "DS_SISTEMA",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_NF_ORIG",
						"type": "date"
					},
					{
						"name": "DT_AJUSTE",
						"type": "date"
					},
					{
						"name": "DT_CRIADO_EM",
						"type": "date"
					},
					{
						"name": "DESC_MOTIVO_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "CONTA_CONTABIL",
						"type": "varchar"
					},
					{
						"name": "CD_CRITICA",
						"type": "varchar"
					},
					{
						"name": "DS_CRITICA",
						"type": "varchar"
					},
					{
						"name": "QTD",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VLR_ATRIBUIDO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "ICMS_PARA_RESSARCIMENTO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_REL_INCONSISTENCIAS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ListaArquivosBlobVivoNext_Originais')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "VivoNext"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "vivonext",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ListaArquivosBlobsAtis_Limpos')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atis"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "atis",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ListaArquivosBlobsAtis_Originais')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atis"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "atis",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|#&",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ListaArquivosBlobsAtlys_Limpos')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atlys"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "atlys/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ListaArquivosBlobsAtlys_Originais')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atlys"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "atlys",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ListaArquivosBlobsFat_Originais')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fat"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "fat",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|#&",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ListaArquivosBlobsKenan_Originais')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Kenan"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "kenan",
						"container": "arq-ajustes"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/QryEstoqueContestacao')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Relatorios"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/QryInconsistencias')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Relatorios"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VerificaDiretorioAtis')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atis"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "atis",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|#&",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VerificaDiretorioAtlys')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atlys"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "atlys",
						"container": "arq-ajustes"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VerificaDiretorioFat')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fat"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "fat",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|#&",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VerificaDiretorioKenan')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Kenan"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "kenan",
						"container": "arq-ajustes"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VerificaDiretorioVivoNext')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "VivoNext"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "vivonext",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_Conv115')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Conv115"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "arq-conv115"
					},
					"columnDelimiter": "#$%",
					"encodingName": "ISO-8859-1",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_Conv115_Cadastral')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArqCadastral": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Conv115"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArqCadastral",
							"type": "Expression"
						},
						"container": "arq-conv115"
					},
					"columnDelimiter": "#$%",
					"encodingName": "ISO-8859-1",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_Conv115_Cadastral_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Conv115"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "parquet/convenio115Cadastral",
						"container": "arq-conv115"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_Conv115_ItemNF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArqItem": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Conv115"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArqItem",
							"type": "Expression"
						},
						"container": "arq-conv115"
					},
					"columnDelimiter": "#$%",
					"encodingName": "WINDOWS-1252",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_Conv115_MestreNF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArqMestre": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Conv115"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArqMestre",
							"type": "Expression"
						},
						"container": "arq-conv115"
					},
					"columnDelimiter": "#$%",
					"encodingName": "ISO-8859-1",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_atis_nao_pago')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Atis"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "atis/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_atis_nao_pago_corrigido')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Atis"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "atis/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Linha",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_atis_nao_pago_original')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Atis"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "atis",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_atis_pago')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Atis"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "atis/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_atis_pago_original')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Atis"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "atis",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_atis_pago_validados')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArquivoAtis": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Atis"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArquivoAtis",
							"type": "Expression"
						},
						"folderPath": "atis/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Linha",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_atlys_adj')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Atlys"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "atlys/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CLIENTE_ID",
						"type": "String"
					},
					{
						"name": "NOTA_FISCAL",
						"type": "String"
					},
					{
						"name": "DTEMISSAONF",
						"type": "String"
					},
					{
						"name": "VALOR_ORIG_NFST",
						"type": "String"
					},
					{
						"name": "SERIE",
						"type": "String"
					},
					{
						"name": "CONTA_CLIENTE",
						"type": "String"
					},
					{
						"name": "CNPJ_CPF",
						"type": "String"
					},
					{
						"name": "NOMECLIENTE",
						"type": "String"
					},
					{
						"name": "TERMINAL",
						"type": "String"
					},
					{
						"name": "VALOR_CONTEST_AJUSTE",
						"type": "String"
					},
					{
						"name": "VALOR_ATRIBUIDO",
						"type": "String"
					},
					{
						"name": "DATA_ATRIBUICAO",
						"type": "String"
					},
					{
						"name": "HORA_ATRIBUICAO",
						"type": "String"
					},
					{
						"name": "DATA_AJUSTE",
						"type": "String"
					},
					{
						"name": "HORA_AJUSTE",
						"type": "String"
					},
					{
						"name": "OPERADORA",
						"type": "String"
					},
					{
						"name": "CODIGO OPERADORA",
						"type": "String"
					},
					{
						"name": "CODMOTIVOAJUSTES",
						"type": "String"
					},
					{
						"name": "DESCMOTIVOAJUSTE",
						"type": "String"
					},
					{
						"name": "DATAABERTURAIMPU",
						"type": "String"
					},
					{
						"name": "DATAFECHIMPUG",
						"type": "String"
					},
					{
						"name": "DSPUT_ID",
						"type": "String"
					},
					{
						"name": "TP_NOTA_FISCAL",
						"type": "String"
					},
					{
						"name": "CLASSE_RECEBER",
						"type": "String"
					},
					{
						"name": "CONTACONTABIL",
						"type": "String"
					},
					{
						"name": "DESCRCONTACONTABIL",
						"type": "String"
					},
					{
						"name": "NUMERO_FATURA",
						"type": "String"
					},
					{
						"name": "VALOR_DOCTO_ORIGINAL",
						"type": "String"
					},
					{
						"name": "MES_ANO_REFERENTE",
						"type": "String"
					},
					{
						"name": "DATAVENCFATUR",
						"type": "String"
					},
					{
						"name": "VALOR_PAGAMENTO",
						"type": "String"
					},
					{
						"name": "DATA_ATRIBUICAO_PGTO",
						"type": "String"
					},
					{
						"name": "FATU_ATRIBUIDA",
						"type": "String"
					},
					{
						"name": "DTEMISSAOFATURA",
						"type": "String"
					},
					{
						"name": "MESANOFATURA",
						"type": "String"
					},
					{
						"name": "VALOR_FATURA",
						"type": "String"
					},
					{
						"name": "SALDO_DEVEDOR",
						"type": "String"
					},
					{
						"name": "UF",
						"type": "String"
					},
					{
						"name": "OPERADORA_REAL",
						"type": "String"
					},
					{
						"name": "SALDO_FATURA_INI",
						"type": "String"
					},
					{
						"name": "SALDO_FATURA_FIM",
						"type": "String"
					},
					{
						"name": "SEQ_RECEBIVEL",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_atlys_adj_original')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Atlys"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "atlys",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_atlys_adj_validados')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArquivoAtlys": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Atlys"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArquivoAtlys",
							"type": "Expression"
						},
						"folderPath": "atlys/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Linha",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_atlys_rcbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Atlys"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "atlys/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|",
					"encodingName": "WINDOWS-1252",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CLIENTE_ID",
						"type": "String"
					},
					{
						"name": "NOMECLIENTE",
						"type": "String"
					},
					{
						"name": "CNPJ_CPF",
						"type": "String"
					},
					{
						"name": "CONTA_CLIENTE",
						"type": "String"
					},
					{
						"name": "CLASSE_RECEBER",
						"type": "String"
					},
					{
						"name": "OPERADORA",
						"type": "String"
					},
					{
						"name": "CODIGO_OPERADORA",
						"type": "String"
					},
					{
						"name": "NUMERO_FATURA",
						"type": "String"
					},
					{
						"name": "MES_ANO_REFERENTE",
						"type": "String"
					},
					{
						"name": "VALOR_DOCTO_ORIGINAL",
						"type": "String"
					},
					{
						"name": "FATURA_ATRIBUIDA",
						"type": "String"
					},
					{
						"name": "MESANOFATURA",
						"type": "String"
					},
					{
						"name": "VALOR_FATURA",
						"type": "String"
					},
					{
						"name": "SALDO_DEVIDO_ORIG",
						"type": "String"
					},
					{
						"name": "DATA_EMISSAO_FATURA",
						"type": "String"
					},
					{
						"name": "VALOR_TOTAL_PAGAMENTO",
						"type": "String"
					},
					{
						"name": "DATA_FEBRABAN",
						"type": "String"
					},
					{
						"name": "VALOR_ATRIBUICAO",
						"type": "String"
					},
					{
						"name": "UF",
						"type": "String"
					},
					{
						"name": "DATA_ATRIBUICAO_PGTO",
						"type": "String"
					},
					{
						"name": "HORA_ATRIBUICAO_PGTO",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_atlys_rcbl_corrigido')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Atlys"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "atlys/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Linha",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_atlys_rcbl_original')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Atlys"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "atlys",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_fat_car_ajuste')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Fat"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "fat/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_fat_car_ajuste_original')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Fat"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "fat",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_fat_car_ff')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Fat"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "fat/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_fat_car_ff_original')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Fat"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "fat",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_fat_car_fnp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Fat"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "fat/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_fat_car_fnp_original')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Fat"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "fat",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_fat_validados')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArquivoFAT": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Fat"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArquivoFAT",
							"type": "Expression"
						},
						"folderPath": "fat/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_kenan_Detalhe_original')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Kenan"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "kenan",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_kenan_Item')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Kenan"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "kenan/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_kenan_Item_original')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Kenan"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "kenan",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_kenan_contestada')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Kenan"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "kenan/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_kenan_contestada_original')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Kenan"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "kenan",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_kenan_detalhe')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Kenan"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "kenan/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_kenan_validados')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArquivoKenan": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Kenan"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArquivoKenan",
							"type": "Expression"
						},
						"folderPath": "kenan/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_vivo_next_K16')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "VivoNext"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "vivonext/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|",
					"encodingName": "WINDOWS-1252",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_vivo_next_K16_corrigido')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "VivoNext"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "vivonext/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "#|$",
					"encodingName": "WINDOWS-1252",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Prop_0|Prop_1|Prop_2|Prop_3|Prop_4|Prop_5|Prop_6|Prop_7|Prop_8|Prop_9|Prop_10|Prop_11|Prop_12|Prop_13|Prop_14|Prop_15|Prop_16|Prop_17|Prop_18|Prop_19|Prop_20|Prop_21|Prop_22|Prop_23|Prop_24|Prop_25|Prop_26|Prop_27|Prop_28|Prop_29|Prop_30|Prop_31|Prop_32|Prop_33",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_vivo_next_K16_original')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "VivoNext"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "vivonext",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "#|$",
					"encodingName": "WINDOWS-1252",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_vivo_next_K17')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "VivoNext"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "vivonext/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|",
					"encodingName": "WINDOWS-1252",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_vivo_next_K17_corrigido')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "VivoNext"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "vivonext/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "#|$",
					"encodingName": "WINDOWS-1252",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Linha",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_vivo_next_K17_original')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "VivoNext"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "vivonext",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "#|$",
					"encodingName": "WINDOWS-1252",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/arq_vivonext_validados')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_storage_conv86",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"NomeArq": {
						"type": "string"
					}
				},
				"folder": {
					"name": "VivoNext"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().NomeArq",
							"type": "Expression"
						},
						"folderPath": "vivonext/validados_a_processar",
						"container": "arq-ajustes"
					},
					"columnDelimiter": "|",
					"encodingName": "WINDOWS-1252",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_storage_conv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/connExecQry')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cvtb_vivo_next_k16')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "VivoNext"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_VIVO_NEXT_K16",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_LOTE_ARQUIVO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "CLIENTE_ID",
						"type": "varchar"
					},
					{
						"name": "NOTA_FISCAL",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_NFST",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VL_ORIG_NFST",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SERIE",
						"type": "varchar"
					},
					{
						"name": "CONTA_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "CNPJ_CPF",
						"type": "varchar"
					},
					{
						"name": "NOME_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "TERMINAL",
						"type": "varchar"
					},
					{
						"name": "VL_CONTEST_AJUSTE",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VL_ALOCADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "DT_ALOCACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "HR_ALOCACAO",
						"type": "varchar"
					},
					{
						"name": "DT_AJUSTE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "HR_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "OPERADORA",
						"type": "varchar"
					},
					{
						"name": "CD_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "CD_MOTIVO_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "DS_MOTIVO_AJUSTE",
						"type": "varchar"
					},
					{
						"name": "NUMERO_FATURA",
						"type": "varchar"
					},
					{
						"name": "FATU_ALOCADA",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_FATURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "MESANOFATURA",
						"type": "varchar"
					},
					{
						"name": "VL_DOCTO_ORIGINAL",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "SALDO_DEVEDOR",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "CONTA_CONTABIL",
						"type": "varchar"
					},
					{
						"name": "DS_CONTA_CONTABIL",
						"type": "varchar"
					},
					{
						"name": "VL_FATURA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "CD_TIPO_RECEBIVEIS",
						"type": "varchar"
					},
					{
						"name": "DS_TIPO_RECEBIVEIS",
						"type": "varchar"
					},
					{
						"name": "DEBIT_ID",
						"type": "varchar"
					},
					{
						"name": "CREDIT_ID",
						"type": "varchar"
					},
					{
						"name": "UF",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_FATURA_2",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_VIVO_NEXT_K16"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cvtb_vivo_next_k17')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseConv86",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "VivoNext"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_VIVO_NEXT_K17",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "ID_LOTE_ARQUIVO",
						"type": "decimal",
						"precision": 28,
						"scale": 0
					},
					{
						"name": "CLIENTE_ID",
						"type": "varchar"
					},
					{
						"name": "CONTA_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "CNPJ_CPF",
						"type": "varchar"
					},
					{
						"name": "NOME_CLIENTE",
						"type": "varchar"
					},
					{
						"name": "OPERADORA",
						"type": "varchar"
					},
					{
						"name": "CD_OPERADORA",
						"type": "varchar"
					},
					{
						"name": "FATU_ALOCADA",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO_FATURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "MESANOFATURA",
						"type": "varchar"
					},
					{
						"name": "SALDO_DEVIDO_ORIG",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VL_FATURA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "CD_TIPO_RECEBIVEIS",
						"type": "varchar"
					},
					{
						"name": "DS_TIPO_RECEBIVEIS",
						"type": "varchar"
					},
					{
						"name": "DEBIT_ID",
						"type": "varchar"
					},
					{
						"name": "CREDIT_ID",
						"type": "varchar"
					},
					{
						"name": "DT_PAGAMENTO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "VL_PGTO_ALOCADO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VL_TOTAL_PAGAMENTO",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "CONVENIO",
					"table": "CVTB_VIVO_NEXT_K17"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseConv86')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseConv86_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntimeConv86",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_storage_conv86')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "AzureBlobStorage",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('blob_storage_conv86_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntimeConv86",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimeConv86')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adf_carga_conv86')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga diária dos arquivos de contestações",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-09-14T22:00:00",
						"timeZone": "E. South America Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trExecutaPipelineRelatorios')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Este gatilho aciona a pipeline dos relatórios uma vez por dia.",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-10-21T12:53:00",
						"timeZone": "E. South America Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimeConv86')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Brazil South",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 48,
							"timeToLive": 10,
							"cleanup": false
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfCargaUnificadaAtis')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "TabelaAtis"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_CONTESTACAO",
								"type": "DatasetReference"
							},
							"name": "TabelaCONTESTACAO"
						}
					],
					"transformations": [
						{
							"name": "AdaptaColunas"
						}
					],
					"script": "parameters{\n\tpLote as string,\n\tpMesAnoRef as string\n}\nsource(output(\n\t\tNOTA_FISCAL_ORIG as string,\n\t\tVLR_ORIG_NSFT as decimal(15,2),\n\t\tSERIE_NF as string,\n\t\tdescr_operadora as string,\n\t\tCOD_IDENT_CLI as string,\n\t\tCPF_CNPJ as string,\n\t\tVLR_ATRIBUIDO as decimal(15,2),\n\t\tDT_ATRIBUICAO as timestamp,\n\t\tDT_AJUSTE as timestamp,\n\t\tCOD_MOTIVO_AJUSTE as string,\n\t\tDT_ABERTURA_IMPUG as timestamp,\n\t\tNUM_FATURA_ORIGINAL as string,\n\t\tDT_VENC_FATURA_ORIGINAL as timestamp,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tUF_FATURA as string,\n\t\tTIPO_DOCUMENTO as string,\n\t\tCONTACONTABIL_CR as string,\n\t\tCONTACONTABIL_DB as string,\n\t\tDESCR_CONTACONTABIL_DB as string,\n\t\tDESCR_CONTACONTABIL_CR as string,\n\t\tSALDO_POS_AJUSTE as decimal(15,2),\n\t\tTIPO_OPERACAO as string,\n\t\tDT_VENCTO_FAT_FUTURA as timestamp,\n\t\tVLR_AJUSTE_ITEM as decimal(15,2),\n\t\tVLR_CREDITO_AJUSTE as decimal(15,2),\n\t\tVLR_DEVOLUCAO as decimal(15,2),\n\t\tVLR_FATURA_FUTURA as decimal(15,2),\n\t\tCOD_FAC_CD as decimal(10,0),\n\t\tCOD_OPERADORA as string,\n\t\treceita_operadora as string,\n\t\tCOD_CREDITO as decimal(10,2),\n\t\tNUM_FATURA_FUTURA as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT np.nota_fiscal_orig AS NOTA_FISCAL_ORIG, np.vlr_orig_nsft AS VLR_ORIG_NSFT, np.serie_nf AS SERIE_NF, np.descr_operadora,np.cod_ident_cli AS COD_IDENT_CLI,np.cpf_cnpj\tAS CPF_CNPJ,np.vlr_contestado AS VLR_ATRIBUIDO,np.dt_vencto_boleto_ult AS DT_ATRIBUICAO,np.dt_ajuste AS\tDT_AJUSTE,np.cod_motivo_ajuste AS COD_MOTIVO_AJUSTE,np.dt_abertura_impug AS\tDT_ABERTURA_IMPUG,np.num_fatura_original AS NUM_FATURA_ORIGINAL,np.dt_venc_fatura_original AS DT_VENC_FATURA_ORIGINAL, np.dt_emissao_fatura AS\tDT_EMISSAO_FATURA,np.vlr_fatura AS VLR_FATURA,np.saldo_devedor AS SALDO_DEVEDOR,np.uf_fatura AS UF_FATURA,CASE WHEN np.tipo_documento = 'PF' THEN 'CPF' WHEN np.tipo_documento = 'PJ' THEN 'CNPJ' ELSE NULL END AS TIPO_DOCUMENTO,np.contacontabil AS CONTACONTABIL_CR,np.contacontabil AS CONTACONTABIL_DB,np.descrcontacontabil AS DESCR_CONTACONTABIL_DB,np.descrcontacontabil AS DESCR_CONTACONTABIL_CR,np.saldo_pos_ajuste AS SALDO_POS_AJUSTE,np.tipo_operacao AS\tTIPO_OPERACAO,np.dt_venc_fatura_original AS DT_VENCTO_FAT_FUTURA,NULL AS\tVLR_AJUSTE_ITEM, NULL AS VLR_CREDITO_AJUSTE, NULL AS VLR_DEVOLUCAO,NULL AS\tVLR_FATURA_FUTURA,np.cod_fac_cd AS COD_FAC_CD,np.cod_operadora AS COD_OPERADORA, np.receita_operadora, null AS COD_CREDITO,null AS NUM_FATURA_FUTURA FROM convenio.cvtb_atis_nao_pago np WITH (NOLOCK)  WHERE id_lote_arquivo IN (SELECT id_lote_arquivo FROM CONVENIO.CVTB_LOTE_ARQUIVO WITH (NOLOCK)  WHERE ID_LOTE = {$pLote}) UNION ALL SELECT  ap.nota_fiscal_orig AS NOTA_FISCAL_ORIG,ap.vlr_orig_nsft AS VLR_ORIG_NSFT, ap.serie_nf AS SERIE_NF, ap.descr_operadora AS DESCR_OPERADORA, ap.cod_ident_cli AS COD_IDENT_CLI,ap.cpf_cnpj\tAS CPF_CNPJ,ap.vlr_credito_item AS\tVLR_ATRIBUIDO,ap.dt_vencto_boleto_ult AS DT_ATRIBUICAO,ap.dt_ajuste AS\tDT_AJUSTE,ap.cod_motivo_ajuste AS\tCOD_MOTIVO_AJUSTE, ap.dt_abertura_impug AS\tDT_ABERTURA_IMPUG,ap.num_fatura_original AS\tNUM_FATURA_ORIGINAL,ap.dt_venc_fatura_original AS\tDT_VENC_FATURA_ORIGINAL,ap.dt_emissao_fatura AS DT_EMISSAO_FATURA,ap.vlr_fatura AS\tVLR_FATURA,ap.saldo_devedor AS\tSALDO_DEVEDOR,ap.uf_fatura AS UF_FATURA,CASE WHEN ap.tipo_documento = 'PF' THEN 'CPF' WHEN ap.tipo_documento = 'PJ' THEN 'CNPJ' ELSE NULL END AS TIPO_DOCUMENTO,ap.contacontabil AS CONTACONTABIL_CR,ap.contacontabil AS CONTACONTABIL_DB, ap.descrcontacontabil AS DESCR_CONTACONTABIL_DB ,ap.descrcontacontabil AS DESCR_CONTACONTABIL_CR,ap.saldo_pos_ajuste\tAS SALDO_POS_AJUSTE,ap.tipo_operacao AS\tTIPO_OPERACAO,ap.dt_venc_fatura_original AS DT_VENCTO_FAT_FUTURA,ap.vlr_ajuste_item AS\tVLR_AJUSTE_ITEM,ap.vlr_credito_ajuste AS VALOR_CREDITO_AJUSTE,ap.vlr_devolucao AS\tVLR_DEVOLUCAO,ap.vlr_fatura_futura AS VLR_FATURA_FUTURA,ap.cod_fac_cd AS COD_FAC_CD,ap.cod_operadora AS\tCOD_OPERADORA,ap.receita_operadora, ap.cod_credito, ap.num_fatura_futura FROM convenio.cvtb_atis_pago ap WITH (NOLOCK)  WHERE id_lote_arquivo IN (SELECT id_lote_arquivo FROM CONVENIO.CVTB_LOTE_ARQUIVO WITH (NOLOCK)  WHERE ID_LOTE = {$pLote})\"\r),\n\tformat: 'query') ~> TabelaAtis\nTabelaAtis derive(id_lote_ajuste = $pLote,\n\t\tnome_billing = 'Atis',\n\t\tnota_fiscal_orig_normalizado = replace(trim(NOTA_FISCAL_ORIG), right(NOTA_FISCAL_ORIG, 4), ''),\n\t\tnum_controle_reclamacao_normalizado = concat(trim(SERIE_NF), '123'),\n\t\tcd_criado_por = 'Carga ADF - CargaArqAtis',\n\t\tdt_criado_em = add(currentTimestamp(), hours(-3)),\n\t\tfl_status_geral = 'NT',\n\t\tMES_ANO_REF_ARQ = concat(right($pMesAnoRef, 2), left($pMesAnoRef, 4)),\n\t\tNUM_ITEM_ESTORNADO = toDecimal(COD_CREDITO, 2)) ~> AdaptaColunas\nAdaptaColunas sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_CONTESTACAO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOTA_FISCAL_ORIG as string,\n\t\tDT_EMISSAO_NF_ORIG as timestamp,\n\t\tVLR_ORIG_NSFT as decimal(15,2),\n\t\tSERIE_NF as string,\n\t\tCOD_IDENT_CLI as string,\n\t\tCPF_CNPJ as string,\n\t\tNOME_CLIENTE as string,\n\t\tTERMINAL as string,\n\t\tVLR_TOTAL_ATRIBUIDO as decimal(15,2),\n\t\tVLR_ATRIBUIDO as decimal(15,2),\n\t\tDT_ATRIBUICAO as timestamp,\n\t\tDT_AJUSTE as timestamp,\n\t\tDESCR_OPERADORA as string,\n\t\tCOD_OPERADORA as string,\n\t\tCOD_MOTIVO_AJUSTE as string,\n\t\tDESC_MOTIVO_AJUSTE as string,\n\t\tNUM_CONTROLE_RECLAMACAO as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTA_FINANCEIRA as string,\n\t\tDESC_CONTA_FINANCEIRA as string,\n\t\tNUM_FATURA_ORIGINAL as string,\n\t\tVLR_DOC_ORIGINAL as decimal(15,2),\n\t\tFATURA_ATRIBUIDA as string,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tUF_FATURA as string,\n\t\tSEQ_RECEBIVEL as string,\n\t\tDT_EMISSAO as timestamp,\n\t\tMODELO as string,\n\t\tNUMORDEMDOITEM as decimal(3,0),\n\t\tBC_ICMS as decimal(15,2),\n\t\tICMS as decimal(15,2),\n\t\tALIQUOTA_ICMS as decimal(15,2),\n\t\tBC_ICMS_RECALCULADA as decimal(15,2),\n\t\tICMS_RECALCULADO as decimal(15,2),\n\t\tICMS_PARA_RESSARCIMENTO as decimal(15,2),\n\t\tSITUACAO as string,\n\t\tMES_APURACAO as string,\n\t\tTIPO_DOC as decimal(1,0),\n\t\tCOD_CONSUMIDOR as string,\n\t\tCHAVE_AUTENTICACAO as string,\n\t\tTOTAL_MESTRE as decimal(15,2),\n\t\tBC_ICMS_MESTRE as decimal(15,2),\n\t\tICMS_DESTACADO as decimal(15,2),\n\t\tINSCRICAO_ESTADUAL as string,\n\t\tRAZAO_SOCIAL as string,\n\t\tFL_STATUS_GERAL as string,\n\t\tID_LOTE_AJUSTE as decimal(28,0),\n\t\tID_ENTREGA_RESSARCIMENTO as decimal(28,0),\n\t\tCD_ITEM as string,\n\t\tDS_ITEM as string,\n\t\tHR_AJUSTE as string,\n\t\tHR_ATRIBUICAO as string,\n\t\tNOME_BILLING as string,\n\t\tTIPO_CLIENTE as string,\n\t\tDT_ABERTURA_IMPUG as timestamp,\n\t\tDT_FECHA_IMPUG as timestamp,\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tSALDO_FATURA_INI as decimal(15,2),\n\t\tSALDO_FATURA_FIM as decimal(15,2),\n\t\tCOD_CLIENTE as string,\n\t\tTIPO_DOCUMENTO as string,\n\t\tNOME_FANTASIA as string,\n\t\tCOD_GRUPO as string,\n\t\tNOME_GRUPO_ECONOMICO as string,\n\t\tSEGMENTO_CLIENTE as string,\n\t\tSUB_SEGMENTO_CLIENTE as string,\n\t\tSEGMENTO_VALOR as string,\n\t\tCLASSE_ELEGIBILIDADE as string,\n\t\tDESCR_SERV_AJUSTE as string,\n\t\tDESCR_SERV as string,\n\t\tCONTACONTABIL_DB as string,\n\t\tCONTACONTABIL_CR as string,\n\t\tDESCR_CONTACONTABIL_DB as string,\n\t\tDESCR_CONTACONTABIL_CR as string,\n\t\tSALDO_POS_AJUSTE as decimal(15,2),\n\t\tTIPO_OPERACAO as string,\n\t\tTIPO_TERMINAL as string,\n\t\tDONO_RECEITA as string,\n\t\tSUBTYPE_CODE as decimal(19,0),\n\t\tTIPO_DESCR_SERV as string,\n\t\tDT_VENCTO_FAT_FUTURA as timestamp,\n\t\tVLR_IMPOSTO_CONTESTADO as decimal(15,2),\n\t\tVLR_IMPOSTO_ICMS as decimal(15,2),\n\t\tVLR_BRUTO_ITEM as decimal(15,2),\n\t\tVLR_OUTROS_IMPOSTOS as decimal(15,2),\n\t\tVLR_AJUSTE_ITEM as decimal(15,2),\n\t\tVLR_CREDITO_AJUSTE as decimal(15,2),\n\t\tVLR_CREDITO_ITEM as decimal(15,2),\n\t\tVLR_DEVOLUCAO as decimal(15,2),\n\t\tVLR_FATURA_FUTURA as decimal(15,2),\n\t\tVLR_CONTESTADO_FUTURO as decimal(15,2),\n\t\tLOGIN_ATENDIMENTO as string,\n\t\tDT_VENC_FATURA_ORIGINAL as timestamp,\n\t\tDT_ATRIBUICAO_PGTO as timestamp,\n\t\tNUM_ITEM_ESTORNADO as decimal(10,0),\n\t\tFLG_RETIFICADO as string,\n\t\tTERMINAL_115 as string,\n\t\tVALOR_ITEM_115 as decimal(15,2),\n\t\tDT_CRIADO_EM as timestamp,\n\t\tCD_CRIADO_POR as string,\n\t\tDT_ATUALIZADO_EM as timestamp,\n\t\tCD_ATUALIZADO_POR as string,\n\t\tMES_ANO_FAT_ORIGINAL as string,\n\t\tMES_ANO_FAT_AJUSTE as string,\n\t\tVLR_PAGAMENTO_FAT_ORIGINAL as decimal(15,2),\n\t\tID_ITEM_CONVENIO_115 as decimal(28,0),\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO as string,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO as string,\n\t\tCOD_FAC_CD as decimal(10,0),\n\t\tCCM_SERVICO_CONTESTADO as string,\n\t\tCOD_TIPO_RCBL_FATURA as string,\n\t\tDESCR_RCBL_FATURA as string,\n\t\tDT_PAGAMENTO as timestamp,\n\t\tDEBIT_ID as string,\n\t\tDT_EMISSAO_FATURA_ORIGINAL as timestamp,\n\t\tUF_NF as string,\n\t\tVLR_PGTO_ALOCADO as decimal(15,2),\n\t\tVLR_TOTAL_PGTO as decimal(15,2),\n\t\tCREDIT_ID as string,\n\t\tDT_REFERENCIA as timestamp,\n\t\tDT_IMPORTACAO as timestamp,\n\t\tSTEP_EXECUTION_ID as decimal(18,0),\n\t\tJOB_EXECUTION_ID as decimal(18,0),\n\t\tID_MESTRE_CONVENIO_115 as decimal(28,0),\n\t\tFL_MANUAL_CONCILIACAO as string,\n\t\tDT_CONCILIACAO as timestamp,\n\t\tDT_EMISSAO_115 as timestamp,\n\t\tMES_ANO_REF_ARQ as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNOTA_FISCAL_ORIG,\n\t\tVLR_ORIG_NSFT,\n\t\tSERIE_NF,\n\t\tCOD_IDENT_CLI,\n\t\tCPF_CNPJ,\n\t\tVLR_ATRIBUIDO,\n\t\tDT_ATRIBUICAO,\n\t\tDT_AJUSTE,\n\t\tDESCR_OPERADORA = descr_operadora,\n\t\tCOD_OPERADORA,\n\t\tCOD_MOTIVO_AJUSTE,\n\t\tNUM_FATURA_ORIGINAL,\n\t\tDT_EMISSAO_FATURA_ORIGINAL = DT_EMISSAO_FATURA,\n\t\tVLR_FATURA,\n\t\tUF_FATURA,\n\t\tFL_STATUS_GERAL = fl_status_geral,\n\t\tID_LOTE_AJUSTE = id_lote_ajuste,\n\t\tNOME_BILLING = nome_billing,\n\t\tDT_ABERTURA_IMPUG,\n\t\tSALDO_DEVEDOR,\n\t\tTIPO_DOCUMENTO,\n\t\tCONTACONTABIL_DB,\n\t\tCONTACONTABIL_CR,\n\t\tDESCR_CONTACONTABIL_DB,\n\t\tDESCR_CONTACONTABIL_CR,\n\t\tSALDO_POS_AJUSTE,\n\t\tTIPO_OPERACAO,\n\t\tDT_VENCTO_FAT_FUTURA,\n\t\tVLR_AJUSTE_ITEM,\n\t\tVLR_CREDITO_AJUSTE,\n\t\tVLR_DEVOLUCAO,\n\t\tVLR_FATURA_FUTURA,\n\t\tDT_VENC_FATURA_ORIGINAL,\n\t\tDT_CRIADO_EM = dt_criado_em,\n\t\tCD_CRIADO_POR = cd_criado_por,\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO = num_controle_reclamacao_normalizado,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO = nota_fiscal_orig_normalizado,\n\t\tCOD_FAC_CD,\n\t\tMES_ANO_REF_ARQ,\n\t\tDONO_RECEITA = receita_operadora,\n\t\tNUM_ITEM_ESTORNADO,\n\t\tFATURA_ATRIBUIDA = NUM_FATURA_FUTURA\n\t)) ~> TabelaCONTESTACAO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CONTESTACAO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfCargaUnificadaAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CVTB_ATLYS_ADJ",
								"type": "DatasetReference"
							},
							"name": "TabelaADJ"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_CONTESTACAO",
								"type": "DatasetReference"
							},
							"name": "TabelaCONTESTACAO"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"script": "parameters{\n\tpLote as string,\n\tpMesAnoRef as string\n}\nsource(output(\n\t\tID_LOTE as decimal(28,0),\n\t\tID_ATLYS_ADJ as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOTA_FISCAL as string,\n\t\tDT_EMISSAO_NF as timestamp,\n\t\tVLR_ORIG_NFST as decimal(10,2),\n\t\tSERIE as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tNOM_CLIENTE as string,\n\t\tNUM_TERMINAL as string,\n\t\tVLR_CONTEST_AJUSTE as decimal(10,2),\n\t\tVLR_ATRIBUIDO as decimal(10,2),\n\t\tDT_ATRIBUICAO as timestamp,\n\t\tHR_ATRIBUICAO as string,\n\t\tDT_AJUSTE as timestamp,\n\t\tHR_AJUSTE as string,\n\t\tOPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tCOD_MOTIVO_AJUSTES as string,\n\t\tDESC_MOTIVO_AJUSTE as string,\n\t\tDATA_ABERTURA_IMPU as timestamp,\n\t\tDATA_FECH_IMPUG as timestamp,\n\t\tDSPUT_ID as string,\n\t\tTP_NOTA_FISCAL as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTA_CONTABIL as string,\n\t\tDESCR_CONTA_CONTABIL as string,\n\t\tNUMERO_FATURA as string,\n\t\tVALOR_DOCTO_ORIGINAL as decimal(15,2),\n\t\tMES_ANO_REFERENTE as string,\n\t\tDATA_VENC_FATUR as timestamp,\n\t\tVALOR_PAGAMENTO as decimal(15,2),\n\t\tDATA_ATRIBUICAO_PGTO as timestamp,\n\t\tFATU_ATRIBUIDA as string,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tMES_ANO_FATURA as string,\n\t\tVALOR_FATURA as decimal(15,2),\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tUF as string,\n\t\tOPERADORA_REAL as string,\n\t\tSALDO_FATURA_INI as decimal(15,2),\n\t\tSALDO_FATURA_FIM as decimal(15,2),\n\t\tSEQ_RECEBIVEL as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT l.ID_LOTE, adj.ID_ATLYS_ADJ ,adj.ID_LOTE_ARQUIVO ,adj.ID_CLIENTE ,adj.NOTA_FISCAL ,adj.DT_EMISSAO_NF ,adj.VLR_ORIG_NFST ,adj.SERIE ,adj.CONTA_CLIENTE ,adj.CNPJ_CPF ,adj.NOM_CLIENTE ,adj.NUM_TERMINAL ,adj.VLR_CONTEST_AJUSTE ,adj.VLR_ATRIBUIDO ,adj.DT_ATRIBUICAO ,adj.HR_ATRIBUICAO ,adj.DT_AJUSTE ,adj.HR_AJUSTE ,adj.OPERADORA ,adj.CODIGO_OPERADORA ,adj.COD_MOTIVO_AJUSTES ,adj.DESC_MOTIVO_AJUSTE ,adj.DATA_ABERTURA_IMPU ,adj.DATA_FECH_IMPUG ,adj.DSPUT_ID,adj.TP_NOTA_FISCAL ,adj.CLASSE_RECEBER ,adj.CONTA_CONTABIL ,adj.DESCR_CONTA_CONTABIL ,adj.NUMERO_FATURA ,adj.VALOR_DOCTO_ORIGINAL ,adj.MES_ANO_REFERENTE ,adj.DATA_VENC_FATUR ,adj.VALOR_PAGAMENTO ,adj.DATA_ATRIBUICAO_PGTO ,adj.FATU_ATRIBUIDA ,adj.DT_EMISSAO_FATURA ,adj.MES_ANO_FATURA ,adj.VALOR_FATURA ,adj.SALDO_DEVEDOR ,adj.UF ,adj.OPERADORA_REAL ,adj.SALDO_FATURA_INI ,adj.SALDO_FATURA_FIM ,adj.SEQ_RECEBIVEL FROM CONVENIO.CVTB_ATLYS_ADJ adj WITH (NOLOCK), CONVENIO.CVTB_LOTE_ARQUIVO la WITH (NOLOCK), CONVENIO.CVTB_LOTE l WITH (NOLOCK) where adj.ID_LOTE_ARQUIVO = la.ID_LOTE_ARQUIVO and la.ID_LOTE = l.ID_LOTE and l.ID_LOTE = convert(numeric(38), {$pLote})\"),\n\tformat: 'query') ~> TabelaADJ\nTabelaADJ derive(NUM_CONTROLE_RECLAMACAO_NORMALIZADO = iif(isNull(DSPUT_ID), concat(SERIE, '123'), DSPUT_ID),\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO = NOTA_FISCAL,\n\t\tFL_STATUS_GERAL = 'NT',\n\t\tNOME_BILLING = 'Atlys',\n\t\tCD_CRIADO_POR = 'Carga ADF - CargaArqAtlys',\n\t\tDT_CRIADO_EM = add(currentTimestamp(), hours(-3)),\n\t\tMES_ANO_REF_ARQ = concat(right($pMesAnoRef, 2), left($pMesAnoRef, 4))) ~> derivedColumn1\nderivedColumn1 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_CONTESTACAO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOTA_FISCAL_ORIG as string,\n\t\tDT_EMISSAO_NF_ORIG as timestamp,\n\t\tVLR_ORIG_NSFT as decimal(15,2),\n\t\tSERIE_NF as string,\n\t\tCOD_IDENT_CLI as string,\n\t\tCPF_CNPJ as string,\n\t\tNOME_CLIENTE as string,\n\t\tTERMINAL as string,\n\t\tVLR_TOTAL_ATRIBUIDO as decimal(15,2),\n\t\tVLR_ATRIBUIDO as decimal(15,2),\n\t\tDT_ATRIBUICAO as timestamp,\n\t\tDT_AJUSTE as timestamp,\n\t\tDESCR_OPERADORA as string,\n\t\tCOD_OPERADORA as string,\n\t\tCOD_MOTIVO_AJUSTE as string,\n\t\tDESC_MOTIVO_AJUSTE as string,\n\t\tNUM_CONTROLE_RECLAMACAO as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTA_FINANCEIRA as string,\n\t\tDESC_CONTA_FINANCEIRA as string,\n\t\tNUM_FATURA_ORIGINAL as string,\n\t\tVLR_DOC_ORIGINAL as decimal(15,2),\n\t\tFATURA_ATRIBUIDA as string,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tUF_FATURA as string,\n\t\tSEQ_RECEBIVEL as string,\n\t\tDT_EMISSAO as timestamp,\n\t\tMODELO as string,\n\t\tNUMORDEMDOITEM as decimal(3,0),\n\t\tBC_ICMS as decimal(15,2),\n\t\tICMS as decimal(15,2),\n\t\tALIQUOTA_ICMS as decimal(15,2),\n\t\tBC_ICMS_RECALCULADA as decimal(15,2),\n\t\tICMS_RECALCULADO as decimal(15,2),\n\t\tICMS_PARA_RESSARCIMENTO as decimal(15,2),\n\t\tSITUACAO as string,\n\t\tMES_APURACAO as string,\n\t\tTIPO_DOC as decimal(1,0),\n\t\tCOD_CONSUMIDOR as string,\n\t\tCHAVE_AUTENTICACAO as string,\n\t\tTOTAL_MESTRE as decimal(15,2),\n\t\tBC_ICMS_MESTRE as decimal(15,2),\n\t\tICMS_DESTACADO as decimal(15,2),\n\t\tINSCRICAO_ESTADUAL as string,\n\t\tRAZAO_SOCIAL as string,\n\t\tFL_STATUS_GERAL as string,\n\t\tID_LOTE_AJUSTE as decimal(28,0),\n\t\tID_ENTREGA_RESSARCIMENTO as decimal(28,0),\n\t\tCD_ITEM as string,\n\t\tDS_ITEM as string,\n\t\tHR_AJUSTE as string,\n\t\tHR_ATRIBUICAO as string,\n\t\tNOME_BILLING as string,\n\t\tTIPO_CLIENTE as string,\n\t\tDT_ABERTURA_IMPUG as timestamp,\n\t\tDT_FECHA_IMPUG as timestamp,\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tSALDO_FATURA_INI as decimal(15,2),\n\t\tSALDO_FATURA_FIM as decimal(15,2),\n\t\tCOD_CLIENTE as string,\n\t\tTIPO_DOCUMENTO as string,\n\t\tNOME_FANTASIA as string,\n\t\tCOD_GRUPO as string,\n\t\tNOME_GRUPO_ECONOMICO as string,\n\t\tSEGMENTO_CLIENTE as string,\n\t\tSUB_SEGMENTO_CLIENTE as string,\n\t\tSEGMENTO_VALOR as string,\n\t\tCLASSE_ELEGIBILIDADE as string,\n\t\tDESCR_SERV_AJUSTE as string,\n\t\tDESCR_SERV as string,\n\t\tCONTACONTABIL_DB as string,\n\t\tCONTACONTABIL_CR as string,\n\t\tDESCR_CONTACONTABIL_DB as string,\n\t\tDESCR_CONTACONTABIL_CR as string,\n\t\tSALDO_POS_AJUSTE as decimal(15,2),\n\t\tTIPO_OPERACAO as string,\n\t\tTIPO_TERMINAL as string,\n\t\tDONO_RECEITA as string,\n\t\tSUBTYPE_CODE as decimal(19,0),\n\t\tTIPO_DESCR_SERV as string,\n\t\tDT_VENCTO_FAT_FUTURA as timestamp,\n\t\tVLR_IMPOSTO_CONTESTADO as decimal(15,2),\n\t\tVLR_IMPOSTO_ICMS as decimal(15,2),\n\t\tVLR_BRUTO_ITEM as decimal(15,2),\n\t\tVLR_OUTROS_IMPOSTOS as decimal(15,2),\n\t\tVLR_AJUSTE_ITEM as decimal(15,2),\n\t\tVLR_CREDITO_AJUSTE as decimal(15,2),\n\t\tVLR_CREDITO_ITEM as decimal(15,2),\n\t\tVLR_DEVOLUCAO as decimal(15,2),\n\t\tVLR_FATURA_FUTURA as decimal(15,2),\n\t\tVLR_CONTESTADO_FUTURO as decimal(15,2),\n\t\tLOGIN_ATENDIMENTO as string,\n\t\tDT_VENC_FATURA_ORIGINAL as timestamp,\n\t\tDT_ATRIBUICAO_PGTO as timestamp,\n\t\tNUM_ITEM_ESTORNADO as decimal(10,0),\n\t\tFLG_RETIFICADO as string,\n\t\tTERMINAL_115 as string,\n\t\tVALOR_ITEM_115 as decimal(15,2),\n\t\tDT_CRIADO_EM as timestamp,\n\t\tCD_CRIADO_POR as string,\n\t\tDT_ATUALIZADO_EM as timestamp,\n\t\tCD_ATUALIZADO_POR as string,\n\t\tMES_ANO_FAT_ORIGINAL as string,\n\t\tMES_ANO_FAT_AJUSTE as string,\n\t\tVLR_PAGAMENTO_FAT_ORIGINAL as decimal(15,2),\n\t\tID_ITEM_CONVENIO_115 as decimal(28,0),\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO as string,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO as string,\n\t\tCOD_FAC_CD as decimal(10,0),\n\t\tCCM_SERVICO_CONTESTADO as string,\n\t\tCOD_TIPO_RCBL_FATURA as string,\n\t\tDESCR_RCBL_FATURA as string,\n\t\tDT_PAGAMENTO as timestamp,\n\t\tDEBIT_ID as string,\n\t\tDT_EMISSAO_FATURA_ORIGINAL as timestamp,\n\t\tUF_NF as string,\n\t\tVLR_PGTO_ALOCADO as decimal(15,2),\n\t\tVLR_TOTAL_PGTO as decimal(15,2),\n\t\tCREDIT_ID as string,\n\t\tDT_REFERENCIA as timestamp,\n\t\tDT_IMPORTACAO as timestamp,\n\t\tSTEP_EXECUTION_ID as decimal(18,0),\n\t\tJOB_EXECUTION_ID as decimal(18,0),\n\t\tID_MESTRE_CONVENIO_115 as decimal(28,0),\n\t\tFL_MANUAL_CONCILIACAO as string,\n\t\tDT_CONCILIACAO as timestamp,\n\t\tDT_EMISSAO_115 as timestamp,\n\t\tMES_ANO_REF_ARQ as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_CLIENTE,\n\t\tVLR_TOTAL_ATRIBUIDO = VLR_ATRIBUIDO,\n\t\tDT_ATRIBUICAO,\n\t\tDT_AJUSTE,\n\t\tDESC_MOTIVO_AJUSTE,\n\t\tCLASSE_RECEBER,\n\t\tDT_EMISSAO_FATURA_ORIGINAL = DT_EMISSAO_FATURA,\n\t\tSEQ_RECEBIVEL,\n\t\tHR_AJUSTE,\n\t\tHR_ATRIBUICAO,\n\t\tSALDO_DEVEDOR,\n\t\tSALDO_FATURA_INI,\n\t\tSALDO_FATURA_FIM,\n\t\tMES_ANO_FAT_ORIGINAL = MES_ANO_FATURA,\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO,\n\t\tNOTA_FISCAL_ORIG = NOTA_FISCAL,\n\t\tDT_EMISSAO_NF_ORIG = DT_EMISSAO_NF,\n\t\tID_LOTE_AJUSTE = ID_LOTE,\n\t\tVLR_ORIG_NSFT = VLR_ORIG_NFST,\n\t\tSERIE_NF = SERIE,\n\t\tCOD_IDENT_CLI = CONTA_CLIENTE,\n\t\tCPF_CNPJ = CNPJ_CPF,\n\t\tNOME_CLIENTE = NOM_CLIENTE,\n\t\tTERMINAL = NUM_TERMINAL,\n\t\tVLR_ATRIBUIDO = VLR_CONTEST_AJUSTE,\n\t\tDESCR_OPERADORA = OPERADORA,\n\t\tCOD_OPERADORA = CODIGO_OPERADORA,\n\t\tNUM_CONTROLE_RECLAMACAO = DSPUT_ID,\n\t\tCONTA_FINANCEIRA = CONTA_CONTABIL,\n\t\tDESC_CONTA_FINANCEIRA = DESCR_CONTA_CONTABIL,\n\t\tNUM_FATURA_ORIGINAL = NUMERO_FATURA,\n\t\tVLR_DOC_ORIGINAL = VALOR_DOCTO_ORIGINAL,\n\t\tMES_ANO_FAT_ORIGINAL = MES_ANO_REFERENTE,\n\t\tVLR_PAGAMENTO_FAT_ORIGINAL = VALOR_PAGAMENTO,\n\t\tFATURA_ATRIBUIDA = FATU_ATRIBUIDA,\n\t\tMES_ANO_FAT_AJUSTE = MES_ANO_FATURA,\n\t\tVLR_FATURA = VALOR_FATURA,\n\t\tUF_FATURA = UF,\n\t\tDT_ABERTURA_IMPUG = DATA_ABERTURA_IMPU,\n\t\tDT_FECHA_IMPUG = DATA_FECH_IMPUG,\n\t\tTIPO_DOCUMENTO = CNPJ_CPF,\n\t\tDT_VENCTO_FAT_FUTURA = DATA_VENC_FATUR,\n\t\tDT_ATRIBUICAO_PGTO = DATA_ATRIBUICAO_PGTO,\n\t\tCOD_MOTIVO_AJUSTE = COD_MOTIVO_AJUSTES,\n\t\tFL_STATUS_GERAL,\n\t\tCD_CRIADO_POR,\n\t\tNOME_BILLING,\n\t\tDT_CRIADO_EM,\n\t\tMES_ANO_REF_ARQ\n\t)) ~> TabelaCONTESTACAO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CVTB_ATLYS_ADJ')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CONTESTACAO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfCargaUnificadaFat')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "TabelasFAT"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_CONTESTACAO",
								"type": "DatasetReference"
							},
							"name": "TabelaCONTESTACAO"
						}
					],
					"transformations": [
						{
							"name": "Adaptacoes"
						}
					],
					"script": "parameters{\n\tpLote as string,\n\tpMesAnoRef as string\n}\nsource(output(\n\t\tNUM_ITEM_ESTORNADO as decimal(10,0),\n\t\tNOTA_FISCAL_ORIG as string,\n\t\tDATA_EMISSAO_NF_ORIG as timestamp,\n\t\tVALOR_NF_ORIG as decimal(15,2),\n\t\tSERIE_NF as string,\n\t\tCOD_IDENT_CLI as string,\n\t\tCNPJ_CPF as string,\n\t\tVALOR_FATURA as decimal(15,2),\n\t\tVLR_ATRIBUIDO as decimal(15,2),\n\t\tVLR_TOTAL_ATRIBUIDO as decimal(15,2),\n\t\tDT_AJUSTE as timestamp,\n\t\tDATA_ATRIBUICAO as timestamp,\n\t\tDESCR_OPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tCODMOTIVOAJUSTES as string,\n\t\tDATAABERTURAIMPU as timestamp,\n\t\tNUMERO_FATURA as string,\n\t\tDATA_VENC_FATURA as timestamp,\n\t\tVALOR_PAGAMENTO as decimal(15,2),\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tFATURA_ATRIBUIDA as string,\n\t\tUF as string,\n\t\tTIPO_DOCUMENTO as string,\n\t\tCONTACONTABIL_DB as string,\n\t\tCONTACONTABIL_CR as string,\n\t\tDESCR_CONTACONTABIL_DB as string,\n\t\tDESCR_CONTACONTABIL_CR as string,\n\t\tSALDO_POS_AJUSTE as decimal(15,2),\n\t\tTIPO_OPERACAO as string,\n\t\tDONO_RECEITA as string,\n\t\tDT_VENCTO_FATURA_FUTURA as timestamp,\n\t\tVLR_FATURA_FUTURA as decimal(15,2),\n\t\tVLR_CONTESTADO_FUTURO as decimal(15,2),\n\t\tCCM_SERVICO_CONTESTATO as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT FF.CCM_CREDITO AS NUM_ITEM_ESTORNADO, FF.NUMERO_NF AS NOTA_FISCAL_ORIG,FF.DT_EMISSAO_NF AS DATA_EMISSAO_NF_ORIG,FF.VLR_TOTAL_NF AS VALOR_NF_ORIG,FF.SERIE_NF,FF.CONTA_COBRANCA AS COD_IDENT_CLI,FF.CNPJ_CPF,NULL AS VALOR_FATURA, NULL AS VLR_ATRIBUIDO, FF.VLR_CONTESTADO AS VLR_TOTAL_ATRIBUIDO,FF.DT_OPERACAO AS DT_AJUSTE,FF.DT_VENCTO_BOLETO_ULT AS DATA_ATRIBUICAO,FF.OPERADORA AS DESCR_OPERADORA,FF.CODIGO_OPERADORA,FF.MOTIVO_CONTESTACAO AS CODMOTIVOAJUSTES,FF.DT_GERACAO AS DATAABERTURAIMPU,FF.NUMERO_FATURA_ORIGINAL AS NUMERO_FATURA,FF.DT_VENCTO_ORIGINAL AS DATA_VENC_FATURA, FF.VLR_FATURA_ORIGINAL_PAGA AS VALOR_PAGAMENTO,FF.VLR_SALDO_ABERTO AS SALDO_DEVEDOR,FF.NUMERO_FATURA_FUTURA AS FATURA_ATRIBUIDA,FF.UF_COBRANCA AS UF,CASE WHEN FF.CATEGORIA_CLIENTE = 'PF' THEN 'CPF' WHEN FF.CATEGORIA_CLIENTE = 'PJ' THEN 'CNPJ' ELSE NULL END AS TIPO_DOCUMENTO,FF.CONTACONTABIL AS CONTACONTABIL_DB,NULL AS CONTACONTABIL_CR,FF.DESCRCONTACONTABIL AS DESCR_CONTACONTABIL_DB,NULL AS DESCR_CONTACONTABIL_CR,FF.VLR_POS_CONTESTACAO AS SALDO_POS_AJUSTE,FF.TIPO_OPERACAO,FF.DONO_RECEITA,FF.DT_VENCTO_FATURA_FUTURA,FF.VLR_FATURA_FUTURA,FF.VLR_CONTESTADO_FUTURO,FF.CCM_SERVICO_CONTESTATO FROM [convenio].[cvtb_fat_car_ff] FF WITH (NOLOCK) WHERE FF.id_lote_arquivo IN ( SELECT l.id_lote_arquivo FROM [convenio].[cvtb_lote_arquivo] L WITH (NOLOCK) WHERE l.id_lote = {$pLote}) UNION ALL SELECT FNP.CCM_CONTESTATO AS NUM_ITEM_ESTORNADO, FNP.NUMERO_NF_AJUSTE AS NOTA_FISCAL_ORIG,FNP.DT_EMISSAO_NF AS DATA_EMISSAO_NF_ORIG,FNP.VLR_TOTAL_NF  AS VALOR_NF_ORIG,FNP.SERIE_NF,FNP.CONTA_COBRANCA AS COD_IDENT_CLI,FNP.CNPJ_CPF,FNP.VLR_FATURA_ORIGINAL AS VALOR_FATURA,FNP.VLR_CONSTESTADO AS VLR_ATRIBUIDO, NULL AS VLR_TOTAL_ATRIBUIDO, FNP.DT_OPERACAO AS DT_AJUSTE,FNP.DT_VENCTO_BOLETO_ULT AS DATA_ATRIBUICAO,FNP.OPERADORA AS DESCR_OPERADORA,FNP.CODIGO_OPERADORA,FNP.MOTIVO_CONTESTACAO AS CODMOTIVOAJUSTES,FNP.DT_GERACAO AS DATAABERTURAIMPU,FNP.ID_FATURA AS NUMERO_FATURA,FNP.DT_VENCTO_ORIGINAL AS DATA_VENC_FATURA, NULL AS VALOR_PAGAMENTO,FNP.VLR_SALDO_ABERTO AS SALDO_DEVEDOR,NULL AS FATURA_ATRIBUIDA,FNP.UF_COBRANCA AS UF,CASE WHEN FNP.CATEGORIA_CLIENTE = 'PF' THEN 'CPF' WHEN FNP.CATEGORIA_CLIENTE = 'PJ' THEN 'CNPJ' ELSE NULL END AS TIPO_DOCUMENTO,NULL AS CONTACONTABIL_DB,FNP.CONTACONTABIL AS CONTACONTABIL_CR,NULL AS DESCR_CONTACONTABIL_DB,FNP.DESCRCONTACONTABIL AS DESCR_CONTACONTABIL_CR,FNP.VLR_POS_CONTESTACAO AS SALDO_POS_AJUSTE,FNP.TIPO_OPERACAO,FNP.DONO_RECEITA,NULL AS DT_VENCTO_FATURA_FUTURA,NULL AS VLR_FATURA_FUTURA,NULL AS VLR_CONTESTADO_FUTURO,NULL AS CCM_SERVICO_CONTESTATO FROM [convenio].[cvtb_fat_car_fnp] FNP WITH (NOLOCK) WHERE FNP.id_lote_arquivo IN ( SELECT la.id_lote_arquivo FROM [convenio].[cvtb_lote_arquivo] la WITH (NOLOCK) WHERE la.id_lote = {$pLote})\"),\n\tformat: 'query') ~> TabelasFAT\nTabelasFAT derive(VLR_ATRIBUIDO = replace(toString(VLR_ATRIBUIDO), ',' , '.'),\n\t\tVLR_PAGAMENTO = replace(toString(VALOR_PAGAMENTO), ',' , '.'),\n\t\tVALOR_FATURA = replace(toString(VALOR_FATURA), ',' , '.'),\n\t\tID_LOTE_AJUSTE = $pLote,\n\t\tNOME_BILLING = 'FAT',\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO = replace(trim(NOTA_FISCAL_ORIG), right(NOTA_FISCAL_ORIG, 4), ''),\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO = concat(trim(SERIE_NF), '123'),\n\t\tCD_CRIADO_POR = 'Carga ADF - CargaArqFAT',\n\t\tDT_CRIADO_EM = add(currentTimestamp(), hours(-3)),\n\t\tVLR_NF_ORIG = replace(toString(VALOR_NF_ORIG), ',' , '.'),\n\t\tVLR_FATURA_FUTURA = replace(toString(VLR_FATURA_FUTURA), ',' , '.'),\n\t\tVLR_CONTESTADO_FUTURO = replace(toString(VLR_CONTESTADO_FUTURO), ',' , '.'),\n\t\tSALDO_DEVEDOR = replace(toString(SALDO_DEVEDOR), ',' , '.'),\n\t\tSALDO_POS_AJUSTE = replace(toString(SALDO_POS_AJUSTE), ',' , '.'),\n\t\tVLR_TOTAL_ATRIBUIDO = replace(toString(VLR_TOTAL_ATRIBUIDO), ',' , '.'),\n\t\tMES_ANO_REF_ARQ = concat(right($pMesAnoRef, 2), left($pMesAnoRef, 4))) ~> Adaptacoes\nAdaptacoes sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_CONTESTACAO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOTA_FISCAL_ORIG as string,\n\t\tDT_EMISSAO_NF_ORIG as timestamp,\n\t\tVLR_ORIG_NSFT as decimal(15,2),\n\t\tSERIE_NF as string,\n\t\tCOD_IDENT_CLI as string,\n\t\tCPF_CNPJ as string,\n\t\tNOME_CLIENTE as string,\n\t\tTERMINAL as string,\n\t\tVLR_TOTAL_ATRIBUIDO as decimal(15,2),\n\t\tVLR_ATRIBUIDO as decimal(15,2),\n\t\tDT_ATRIBUICAO as timestamp,\n\t\tDT_AJUSTE as timestamp,\n\t\tDESCR_OPERADORA as string,\n\t\tCOD_OPERADORA as string,\n\t\tCOD_MOTIVO_AJUSTE as string,\n\t\tDESC_MOTIVO_AJUSTE as string,\n\t\tNUM_CONTROLE_RECLAMACAO as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTA_FINANCEIRA as string,\n\t\tDESC_CONTA_FINANCEIRA as string,\n\t\tNUM_FATURA_ORIGINAL as string,\n\t\tVLR_DOC_ORIGINAL as decimal(15,2),\n\t\tFATURA_ATRIBUIDA as string,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tUF_FATURA as string,\n\t\tSEQ_RECEBIVEL as string,\n\t\tDT_EMISSAO as timestamp,\n\t\tMODELO as string,\n\t\tNUMORDEMDOITEM as decimal(3,0),\n\t\tBC_ICMS as decimal(15,2),\n\t\tICMS as decimal(15,2),\n\t\tALIQUOTA_ICMS as decimal(15,2),\n\t\tBC_ICMS_RECALCULADA as decimal(15,2),\n\t\tICMS_RECALCULADO as decimal(15,2),\n\t\tICMS_PARA_RESSARCIMENTO as decimal(15,2),\n\t\tSITUACAO as string,\n\t\tMES_APURACAO as string,\n\t\tTIPO_DOC as decimal(1,0),\n\t\tCOD_CONSUMIDOR as string,\n\t\tCHAVE_AUTENTICACAO as string,\n\t\tTOTAL_MESTRE as decimal(15,2),\n\t\tBC_ICMS_MESTRE as decimal(15,2),\n\t\tICMS_DESTACADO as decimal(15,2),\n\t\tINSCRICAO_ESTADUAL as string,\n\t\tRAZAO_SOCIAL as string,\n\t\tFL_STATUS_GERAL as string,\n\t\tID_LOTE_AJUSTE as decimal(28,0),\n\t\tID_ENTREGA_RESSARCIMENTO as decimal(28,0),\n\t\tCD_ITEM as string,\n\t\tDS_ITEM as string,\n\t\tHR_AJUSTE as string,\n\t\tHR_ATRIBUICAO as string,\n\t\tNOME_BILLING as string,\n\t\tTIPO_CLIENTE as string,\n\t\tDT_ABERTURA_IMPUG as timestamp,\n\t\tDT_FECHA_IMPUG as timestamp,\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tSALDO_FATURA_INI as decimal(15,2),\n\t\tSALDO_FATURA_FIM as decimal(15,2),\n\t\tCOD_CLIENTE as string,\n\t\tTIPO_DOCUMENTO as string,\n\t\tNOME_FANTASIA as string,\n\t\tCOD_GRUPO as string,\n\t\tNOME_GRUPO_ECONOMICO as string,\n\t\tSEGMENTO_CLIENTE as string,\n\t\tSUB_SEGMENTO_CLIENTE as string,\n\t\tSEGMENTO_VALOR as string,\n\t\tCLASSE_ELEGIBILIDADE as string,\n\t\tDESCR_SERV_AJUSTE as string,\n\t\tDESCR_SERV as string,\n\t\tCONTACONTABIL_DB as string,\n\t\tCONTACONTABIL_CR as string,\n\t\tDESCR_CONTACONTABIL_DB as string,\n\t\tDESCR_CONTACONTABIL_CR as string,\n\t\tSALDO_POS_AJUSTE as decimal(15,2),\n\t\tTIPO_OPERACAO as string,\n\t\tTIPO_TERMINAL as string,\n\t\tDONO_RECEITA as string,\n\t\tSUBTYPE_CODE as decimal(19,0),\n\t\tTIPO_DESCR_SERV as string,\n\t\tDT_VENCTO_FAT_FUTURA as timestamp,\n\t\tVLR_IMPOSTO_CONTESTADO as decimal(15,2),\n\t\tVLR_IMPOSTO_ICMS as decimal(15,2),\n\t\tVLR_BRUTO_ITEM as decimal(15,2),\n\t\tVLR_OUTROS_IMPOSTOS as decimal(15,2),\n\t\tVLR_AJUSTE_ITEM as decimal(15,2),\n\t\tVLR_CREDITO_AJUSTE as decimal(15,2),\n\t\tVLR_CREDITO_ITEM as decimal(15,2),\n\t\tVLR_DEVOLUCAO as decimal(15,2),\n\t\tVLR_FATURA_FUTURA as decimal(15,2),\n\t\tVLR_CONTESTADO_FUTURO as decimal(15,2),\n\t\tLOGIN_ATENDIMENTO as string,\n\t\tDT_VENC_FATURA_ORIGINAL as timestamp,\n\t\tDT_ATRIBUICAO_PGTO as timestamp,\n\t\tNUM_ITEM_ESTORNADO as decimal(10,0),\n\t\tFLG_RETIFICADO as string,\n\t\tTERMINAL_115 as string,\n\t\tVALOR_ITEM_115 as decimal(15,2),\n\t\tDT_CRIADO_EM as timestamp,\n\t\tCD_CRIADO_POR as string,\n\t\tDT_ATUALIZADO_EM as timestamp,\n\t\tCD_ATUALIZADO_POR as string,\n\t\tMES_ANO_FAT_ORIGINAL as string,\n\t\tMES_ANO_FAT_AJUSTE as string,\n\t\tVLR_PAGAMENTO_FAT_ORIGINAL as decimal(15,2),\n\t\tID_ITEM_CONVENIO_115 as decimal(28,0),\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO as string,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO as string,\n\t\tCOD_FAC_CD as decimal(10,0),\n\t\tCCM_SERVICO_CONTESTADO as string,\n\t\tCOD_TIPO_RCBL_FATURA as string,\n\t\tDESCR_RCBL_FATURA as string,\n\t\tDT_PAGAMENTO as timestamp,\n\t\tDEBIT_ID as string,\n\t\tDT_EMISSAO_FATURA_ORIGINAL as timestamp,\n\t\tUF_NF as string,\n\t\tVLR_PGTO_ALOCADO as decimal(15,2),\n\t\tVLR_TOTAL_PGTO as decimal(15,2),\n\t\tCREDIT_ID as string,\n\t\tDT_REFERENCIA as timestamp,\n\t\tDT_IMPORTACAO as timestamp,\n\t\tSTEP_EXECUTION_ID as decimal(18,0),\n\t\tJOB_EXECUTION_ID as decimal(18,0),\n\t\tID_MESTRE_CONVENIO_115 as decimal(28,0),\n\t\tFL_MANUAL_CONCILIACAO as string,\n\t\tDT_CONCILIACAO as timestamp,\n\t\tDT_EMISSAO_115 as timestamp,\n\t\tMES_ANO_REF_ARQ as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNOTA_FISCAL_ORIG,\n\t\tDT_EMISSAO_NF_ORIG = DATA_EMISSAO_NF_ORIG,\n\t\tSERIE_NF,\n\t\tCOD_IDENT_CLI,\n\t\tCPF_CNPJ = CNPJ_CPF,\n\t\tVLR_ORIG_NSFT = VALOR_NF_ORIG,\n\t\tVLR_ATRIBUIDO,\n\t\tDESCR_OPERADORA,\n\t\tCOD_OPERADORA = CODIGO_OPERADORA,\n\t\tDT_ABERTURA_IMPUG = DATAABERTURAIMPU,\n\t\tNUM_FATURA_ORIGINAL = NUMERO_FATURA,\n\t\tVLR_PAGAMENTO_FAT_ORIGINAL = VALOR_PAGAMENTO,\n\t\tUF_NF = UF,\n\t\tTIPO_DOCUMENTO,\n\t\tDT_ATRIBUICAO = DATA_ATRIBUICAO,\n\t\tDT_AJUSTE,\n\t\tCOD_MOTIVO_AJUSTE = CODMOTIVOAJUSTES,\n\t\tNOME_BILLING,\n\t\tFATURA_ATRIBUIDA,\n\t\tID_LOTE_AJUSTE,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO,\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO,\n\t\tDT_CRIADO_EM,\n\t\tCD_CRIADO_POR,\n\t\tDT_VENCTO_FAT_FUTURA = DT_VENCTO_FATURA_FUTURA,\n\t\tVLR_FATURA_FUTURA,\n\t\tSALDO_DEVEDOR,\n\t\tCONTACONTABIL_DB,\n\t\tCONTACONTABIL_CR,\n\t\tDESCR_CONTACONTABIL_DB,\n\t\tDESCR_CONTACONTABIL_CR,\n\t\tDONO_RECEITA,\n\t\tTIPO_OPERACAO,\n\t\tVLR_CONTESTADO_FUTURO,\n\t\tSALDO_POS_AJUSTE,\n\t\tVLR_DOC_ORIGINAL = VALOR_NF_ORIG,\n\t\tNUM_ITEM_ESTORNADO,\n\t\tCCM_SERVICO_CONTESTADO = CCM_SERVICO_CONTESTATO,\n\t\tDT_VENC_FATURA_ORIGINAL = DATA_VENC_FATURA,\n\t\tVLR_TOTAL_ATRIBUIDO,\n\t\tMES_ANO_REF_ARQ,\n\t\tVLR_FATURA = VALOR_FATURA\n\t)) ~> TabelaCONTESTACAO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CONTESTACAO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfCargaUnificadaKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "TabelasKenan"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_CONTESTACAO",
								"type": "DatasetReference"
							},
							"name": "TabelaCONTESTACAO"
						}
					],
					"transformations": [
						{
							"name": "AdaptaPontuacao"
						}
					],
					"script": "parameters{\n\tpLote as string,\n\tpMesAnoRef as string\n}\nsource(output(\n\t\taccount_no as string,\n\t\tid_fatura as string,\n\t\tid_open_item as string,\n\t\tnota_fiscal as string,\n\t\tvlr_item as decimal(15,2),\n\t\tserie_nf as string,\n\t\tsubserie_nf as string,\n\t\tconta_cobranca as string,\n\t\tvlr_total_atribuido as decimal(15,2),\n\t\tvlr_atribuido as decimal(15,2),\n\t\tdt_ajuste as timestamp,\n\t\thr_ajuste as string,\n\t\tdesc_operadora as string,\n\t\tid_operadora as string,\n\t\tdesc_motivo as string,\n\t\tid_fatura_origem as string,\n\t\tvlr_pagamento as decimal(15,2),\n\t\tdt_emissao as timestamp,\n\t\tvlr_fatura as decimal(15,2),\n\t\tuf_nf as string,\n\t\tcpf_cnpj as string,\n\t\ttipo_documento as string,\n\t\tdesc_contestacao as string,\n\t\tdesc_detalhe as string,\n\t\tcc_db_ajuste as string,\n\t\tcc_cr_ajuste as string,\n\t\ttipo_instancia as string,\n\t\tsubtype_code as decimal(19,0),\n\t\ttipo_detalhe as string,\n\t\tvlr_imposto_constestado as decimal(15,2),\n\t\tvlr_imposto_icms as decimal(15,2),\n\t\tvlr_bruto as decimal(15,2),\n\t\tvlr_outros_impostos as decimal(15,2),\n\t\tdt_vencto_original as date,\n\t\tdt_pagamento as date,\n\t\tid_detalhe as decimal(10,0),\n\t\tnum_instancia as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT d.account_no, i.id_fatura, i.id_open_item,i.nota_fiscal,i.vlr_item,i.serie_nf, i.subserie_nf,c.conta_cobranca,c.vlr_contestado as vlr_total_atribuido,d.vlr_contestado as vlr_atribuido, d.dt_contestacao as dt_ajuste,CONVERT(VARCHAR, d.dt_contestacao, 8) as hr_ajuste, d.desc_operadora, d.id_operadora,d.desc_motivo,c.id_fatura_origem, c.vlr_pagamento,c.dt_emissao,c.vlr_fatura,i.uf_nf, d.cpf_cnpj,case when len(d.cpf_cnpj) = 11 then 'CPF' when len(d.cpf_cnpj) = 14 then 'CNPJ'else null end as tipo_documento, d.desc_contestacao,d.desc_detalhe,d.cc_db_ajuste,d.cc_cr_ajuste,d.tipo_instancia, d.subtype_code,d.tipo_detalhe,d.vlr_imposto_constestado,d.vlr_imposto_icms, d.vlr_bruto, d.vlr_outros_impostos,c.dt_vencto_original,c.dt_pagamento, d.id_detalhe, d.num_instancia FROM [convenio].[CVVW_FATURA_CON_KENAN_UNIC] c , [convenio].[CVTB_FATURA_ITEM_KENAN] i WITH(NOLOCK), [convenio].[CVTB_FATURA_DET_KENAN] d WITH(NOLOCK) WHERE c.id_fatura_origem = i.id_fatura AND c.id_fatura_origem = d.id_fatura AND c.cpf_cnpj = i.cpf_cnpj AND c.cpf_cnpj = d.cpf_cnpj AND c.conta_cobranca = i.conta_cobranca AND c.conta_cobranca = d.conta_cobranca AND d.id_open_item = i.id_open_item  AND c.id_lote_arquivo in (SELECT id_lote_arquivo FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE ID_LOTE = {$pLote}) AND i.id_lote_arquivo in (SELECT id_lote_arquivo FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE ID_LOTE = {$pLote}) AND d.id_lote_arquivo in(SELECT id_lote_arquivo FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE id_lote = {$pLote})\"),\n\tformat: 'query') ~> TabelasKenan\nTabelasKenan derive(id_lote_ajuste = $pLote,\n\t\tnome_billing = 'Kenan',\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO = replace(trim(nota_fiscal), right(nota_fiscal, 3), ''),\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO = concat(trim(serie_nf), '123'),\n\t\tcd_criado_por = 'Carga ADF - CargaArqKenan',\n\t\tdt_criado_em = add(currentTimestamp(), hours(-3)),\n\t\tMES_ANO_REF_ARQ = $pMesAnoRef,\n\t\tFL_STATUS_GERAL = 'NT',\n\t\tSERIE_SUBSERIE_NF = concat(coalesce(serie_nf, ''), coalesce(subserie_nf, '') )) ~> AdaptaPontuacao\nAdaptaPontuacao sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_CONTESTACAO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOTA_FISCAL_ORIG as string,\n\t\tDT_EMISSAO_NF_ORIG as timestamp,\n\t\tVLR_ORIG_NSFT as decimal(15,2),\n\t\tSERIE_NF as string,\n\t\tCOD_IDENT_CLI as string,\n\t\tCPF_CNPJ as string,\n\t\tNOME_CLIENTE as string,\n\t\tTERMINAL as string,\n\t\tVLR_TOTAL_ATRIBUIDO as decimal(15,2),\n\t\tVLR_ATRIBUIDO as decimal(15,2),\n\t\tDT_ATRIBUICAO as timestamp,\n\t\tDT_AJUSTE as timestamp,\n\t\tDESCR_OPERADORA as string,\n\t\tCOD_OPERADORA as string,\n\t\tCOD_MOTIVO_AJUSTE as string,\n\t\tDESC_MOTIVO_AJUSTE as string,\n\t\tNUM_CONTROLE_RECLAMACAO as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTA_FINANCEIRA as string,\n\t\tDESC_CONTA_FINANCEIRA as string,\n\t\tNUM_FATURA_ORIGINAL as string,\n\t\tVLR_DOC_ORIGINAL as decimal(15,2),\n\t\tFATURA_ATRIBUIDA as string,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tUF_FATURA as string,\n\t\tSEQ_RECEBIVEL as string,\n\t\tDT_EMISSAO as timestamp,\n\t\tMODELO as string,\n\t\tNUMORDEMDOITEM as decimal(3,0),\n\t\tBC_ICMS as decimal(15,2),\n\t\tICMS as decimal(15,2),\n\t\tALIQUOTA_ICMS as decimal(15,2),\n\t\tBC_ICMS_RECALCULADA as decimal(15,2),\n\t\tICMS_RECALCULADO as decimal(15,2),\n\t\tICMS_PARA_RESSARCIMENTO as decimal(15,2),\n\t\tSITUACAO as string,\n\t\tMES_APURACAO as string,\n\t\tTIPO_DOC as decimal(1,0),\n\t\tCOD_CONSUMIDOR as string,\n\t\tCHAVE_AUTENTICACAO as string,\n\t\tTOTAL_MESTRE as decimal(15,2),\n\t\tBC_ICMS_MESTRE as decimal(15,2),\n\t\tICMS_DESTACADO as decimal(15,2),\n\t\tINSCRICAO_ESTADUAL as string,\n\t\tRAZAO_SOCIAL as string,\n\t\tFL_STATUS_GERAL as string,\n\t\tID_LOTE_AJUSTE as decimal(28,0),\n\t\tID_ENTREGA_RESSARCIMENTO as decimal(28,0),\n\t\tCD_ITEM as string,\n\t\tDS_ITEM as string,\n\t\tHR_AJUSTE as string,\n\t\tHR_ATRIBUICAO as string,\n\t\tNOME_BILLING as string,\n\t\tTIPO_CLIENTE as string,\n\t\tDT_ABERTURA_IMPUG as timestamp,\n\t\tDT_FECHA_IMPUG as timestamp,\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tSALDO_FATURA_INI as decimal(15,2),\n\t\tSALDO_FATURA_FIM as decimal(15,2),\n\t\tCOD_CLIENTE as string,\n\t\tTIPO_DOCUMENTO as string,\n\t\tNOME_FANTASIA as string,\n\t\tCOD_GRUPO as string,\n\t\tNOME_GRUPO_ECONOMICO as string,\n\t\tSEGMENTO_CLIENTE as string,\n\t\tSUB_SEGMENTO_CLIENTE as string,\n\t\tSEGMENTO_VALOR as string,\n\t\tCLASSE_ELEGIBILIDADE as string,\n\t\tDESCR_SERV_AJUSTE as string,\n\t\tDESCR_SERV as string,\n\t\tCONTACONTABIL_DB as string,\n\t\tCONTACONTABIL_CR as string,\n\t\tDESCR_CONTACONTABIL_DB as string,\n\t\tDESCR_CONTACONTABIL_CR as string,\n\t\tSALDO_POS_AJUSTE as decimal(15,2),\n\t\tTIPO_OPERACAO as string,\n\t\tTIPO_TERMINAL as string,\n\t\tDONO_RECEITA as string,\n\t\tSUBTYPE_CODE as decimal(19,0),\n\t\tTIPO_DESCR_SERV as string,\n\t\tDT_VENCTO_FAT_FUTURA as timestamp,\n\t\tVLR_IMPOSTO_CONTESTADO as decimal(15,2),\n\t\tVLR_IMPOSTO_ICMS as decimal(15,2),\n\t\tVLR_BRUTO_ITEM as decimal(15,2),\n\t\tVLR_OUTROS_IMPOSTOS as decimal(15,2),\n\t\tVLR_AJUSTE_ITEM as decimal(15,2),\n\t\tVLR_CREDITO_AJUSTE as decimal(15,2),\n\t\tVLR_CREDITO_ITEM as decimal(15,2),\n\t\tVLR_DEVOLUCAO as decimal(15,2),\n\t\tVLR_FATURA_FUTURA as decimal(15,2),\n\t\tVLR_CONTESTADO_FUTURO as decimal(15,2),\n\t\tLOGIN_ATENDIMENTO as string,\n\t\tDT_VENC_FATURA_ORIGINAL as timestamp,\n\t\tDT_ATRIBUICAO_PGTO as timestamp,\n\t\tNUM_ITEM_ESTORNADO as decimal(10,0),\n\t\tFLG_RETIFICADO as string,\n\t\tTERMINAL_115 as string,\n\t\tVALOR_ITEM_115 as decimal(15,2),\n\t\tDT_CRIADO_EM as timestamp,\n\t\tCD_CRIADO_POR as string,\n\t\tDT_ATUALIZADO_EM as timestamp,\n\t\tCD_ATUALIZADO_POR as string,\n\t\tMES_ANO_FAT_ORIGINAL as string,\n\t\tMES_ANO_FAT_AJUSTE as string,\n\t\tVLR_PAGAMENTO_FAT_ORIGINAL as decimal(15,2),\n\t\tID_ITEM_CONVENIO_115 as decimal(28,0),\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO as string,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO as string,\n\t\tCOD_FAC_CD as decimal(10,0),\n\t\tCCM_SERVICO_CONTESTADO as string,\n\t\tCOD_TIPO_RCBL_FATURA as string,\n\t\tDESCR_RCBL_FATURA as string,\n\t\tDT_PAGAMENTO as timestamp,\n\t\tDEBIT_ID as string,\n\t\tDT_EMISSAO_FATURA_ORIGINAL as timestamp,\n\t\tUF_NF as string,\n\t\tVLR_PGTO_ALOCADO as decimal(15,2),\n\t\tVLR_TOTAL_PGTO as decimal(15,2),\n\t\tCREDIT_ID as string,\n\t\tDT_REFERENCIA as timestamp,\n\t\tDT_IMPORTACAO as timestamp,\n\t\tSTEP_EXECUTION_ID as decimal(18,0),\n\t\tJOB_EXECUTION_ID as decimal(18,0),\n\t\tID_MESTRE_CONVENIO_115 as decimal(28,0),\n\t\tFL_MANUAL_CONCILIACAO as string,\n\t\tDT_CONCILIACAO as timestamp,\n\t\tDT_EMISSAO_115 as timestamp,\n\t\tMES_ANO_REF_ARQ as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_CLIENTE = account_no,\n\t\tNOTA_FISCAL_ORIG = nota_fiscal,\n\t\tVLR_ORIG_NSFT = vlr_item,\n\t\tSERIE_NF = SERIE_SUBSERIE_NF,\n\t\tCOD_IDENT_CLI = conta_cobranca,\n\t\tCPF_CNPJ = cpf_cnpj,\n\t\tVLR_TOTAL_ATRIBUIDO = vlr_total_atribuido,\n\t\tVLR_ATRIBUIDO = vlr_atribuido,\n\t\tDT_AJUSTE = dt_ajuste,\n\t\tHR_AJUSTE = hr_ajuste,\n\t\tDESCR_OPERADORA = desc_operadora,\n\t\tCOD_OPERADORA = id_operadora,\n\t\tDESC_MOTIVO_AJUSTE = desc_motivo,\n\t\tNUM_FATURA_ORIGINAL = id_fatura_origem,\n\t\tVLR_PAGAMENTO_FAT_ORIGINAL = vlr_pagamento,\n\t\tDT_EMISSAO_FATURA_ORIGINAL = dt_emissao,\n\t\tVLR_FATURA = vlr_fatura,\n\t\tUF_FATURA = uf_nf,\n\t\tTIPO_DOCUMENTO = tipo_documento,\n\t\tDESCR_SERV_AJUSTE = desc_contestacao,\n\t\tDESCR_SERV = desc_detalhe,\n\t\tCONTACONTABIL_DB = cc_db_ajuste,\n\t\tCONTACONTABIL_CR = cc_cr_ajuste,\n\t\tTIPO_TERMINAL = tipo_instancia,\n\t\tSUBTYPE_CODE = subtype_code,\n\t\tTIPO_DESCR_SERV = tipo_detalhe,\n\t\tVLR_IMPOSTO_CONTESTADO = vlr_imposto_constestado,\n\t\tVLR_IMPOSTO_ICMS = vlr_imposto_icms,\n\t\tVLR_BRUTO_ITEM = vlr_bruto,\n\t\tVLR_OUTROS_IMPOSTOS = vlr_outros_impostos,\n\t\tNOME_BILLING = nome_billing,\n\t\tDT_VENC_FATURA_ORIGINAL = dt_vencto_original,\n\t\tDT_ATRIBUICAO_PGTO = dt_pagamento,\n\t\tNUM_ITEM_ESTORNADO = id_detalhe,\n\t\tDT_CRIADO_EM = dt_criado_em,\n\t\tCD_CRIADO_POR = cd_criado_por,\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO,\n\t\tID_LOTE_AJUSTE = id_lote_ajuste,\n\t\tFL_STATUS_GERAL,\n\t\tMES_ANO_REF_ARQ,\n\t\tTERMINAL = num_instancia,\n\t\tUF_NF = uf_nf\n\t)) ~> TabelaCONTESTACAO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CONTESTACAO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfCargaUnificadaVivoNext')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VivoNext"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "TabelasVivoNext"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_CONTESTACAO",
								"type": "DatasetReference"
							},
							"name": "TabelaCONTESTACAO"
						}
					],
					"transformations": [
						{
							"name": "AdaptaColunas"
						}
					],
					"script": "parameters{\n\tpLote as string,\n\tpMesAnoRef as string\n}\nsource(output(\n\t\tdt_emissao_fatura_2 as timestamp,\n\t\tnota_fiscal as string,\n\t\tdt_emissao_nfst as timestamp,\n\t\tvl_orig_nfst as decimal(15,2),\n\t\tserie as string,\n\t\tconta_cliente as string,\n\t\tcnpj_cpf as string,\n\t\tnome_cliente as string,\n\t\tterminal as string,\n\t\tvl_contest_ajuste as decimal(15,2),\n\t\tvl_alocado as decimal(38,2),\n\t\tdt_alocacao as timestamp,\n\t\thr_alocacao as string,\n\t\tdt_ajuste as timestamp,\n\t\thr_ajuste as string,\n\t\toperadora as string,\n\t\tcd_operadora as string,\n\t\tcd_motivo_ajuste as string,\n\t\tds_motivo_ajuste as string,\n\t\tnumero_fatura as string,\n\t\tfatu_alocada as string,\n\t\tdt_emissao_fatura as timestamp,\n\t\tmesanofatura as string,\n\t\tvl_docto_original as decimal(15,2),\n\t\tsaldo_devido_orig as decimal(15,2),\n\t\tsaldo_devedor as decimal(15,2),\n\t\tconta_contabil as string,\n\t\tds_conta_contabil as string,\n\t\tvl_fatura as decimal(15,2),\n\t\tcd_tipo_recebiveis as string,\n\t\tds_tipo_recebiveis as string,\n\t\tdebit_id as string,\n\t\tcredit_id as string,\n\t\tdt_pagamento as timestamp,\n\t\tuf as string,\n\t\tvl_pgto_alocado as decimal(15,2),\n\t\tvl_total_pagamento as decimal(15,2)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT k16.dt_emissao_fatura_2,k16.nota_fiscal,k16.dt_emissao_nfst,k16.vl_orig_nfst,k16.serie,k16.conta_cliente,k16.cnpj_cpf,k16.nome_cliente,k16.terminal,k16.vl_contest_ajuste,k16.vl_alocado,k16.dt_alocacao,k16.hr_alocacao,k16.dt_ajuste, k16.hr_ajuste,   k16.operadora,k16.cd_operadora,k16.cd_motivo_ajuste,k16.ds_motivo_ajuste,k16.numero_fatura,k16.fatu_alocada, k16.dt_emissao_fatura,k16.mesanofatura,k16.vl_docto_original,k17.saldo_devido_orig,k16.saldo_devedor,k16.conta_contabil,    k16.ds_conta_contabil,k16.vl_fatura,k16.cd_tipo_recebiveis,k16.ds_tipo_recebiveis,k16.debit_id,k17.credit_id,k17.dt_pagamento,    k16.uf,k17.vl_pgto_alocado,k17.vl_total_pagamento FROM [CONVENIO].[CVVW_VIVO_NEXT_K16_SUM] K16,      [CONVENIO].[CVVW_VIVO_NEXT_K17_UNIC] K17 WHERE K16.CONTA_CLIENTE = K17.CONTA_CLIENTE AND K16.CNPJ_CPF = K17.CNPJ_CPF AND K16.FATU_ALOCADA = K17.FATU_ALOCADA AND K16.MESANOFATURA = K17.MESANOFATURA AND K16.DEBIT_ID = K17.DEBIT_ID AND K16.CREDIT_ID = K17.CREDIT_ID AND K16.ID_LOTE_ARQUIVO IN (SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WITH (NOLOCK) WHERE ID_LOTE = {$pLote}) AND K17.ID_LOTE_ARQUIVO IN (SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WITH (NOLOCK) WHERE id_lote = {$pLote})\"),\n\tformat: 'query') ~> TabelasVivoNext\nTabelasVivoNext derive(id_lote_ajuste = $pLote,\n\t\tnome_billing = 'Vivonext',\n\t\tnum_controle_reclamacao_normalizado = concat(trim(serie), '123'),\n\t\tcd_criado_por = 'Carga ADF - CargaArqVivoNext',\n\t\tdt_criado_em = add(currentTimestamp(), hours(-3)),\n\t\tfl_status_geral = 'NT',\n\t\tMES_ANO_REF_ARQ = $pMesAnoRef,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO = nota_fiscal) ~> AdaptaColunas\nAdaptaColunas sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_CONTESTACAO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOTA_FISCAL_ORIG as string,\n\t\tDT_EMISSAO_NF_ORIG as timestamp,\n\t\tVLR_ORIG_NSFT as decimal(15,2),\n\t\tSERIE_NF as string,\n\t\tCOD_IDENT_CLI as string,\n\t\tCPF_CNPJ as string,\n\t\tNOME_CLIENTE as string,\n\t\tTERMINAL as string,\n\t\tVLR_TOTAL_ATRIBUIDO as decimal(15,2),\n\t\tVLR_ATRIBUIDO as decimal(15,2),\n\t\tDT_ATRIBUICAO as timestamp,\n\t\tDT_AJUSTE as timestamp,\n\t\tDESCR_OPERADORA as string,\n\t\tCOD_OPERADORA as string,\n\t\tCOD_MOTIVO_AJUSTE as string,\n\t\tDESC_MOTIVO_AJUSTE as string,\n\t\tNUM_CONTROLE_RECLAMACAO as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTA_FINANCEIRA as string,\n\t\tDESC_CONTA_FINANCEIRA as string,\n\t\tNUM_FATURA_ORIGINAL as string,\n\t\tVLR_DOC_ORIGINAL as decimal(15,2),\n\t\tFATURA_ATRIBUIDA as string,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tUF_FATURA as string,\n\t\tSEQ_RECEBIVEL as string,\n\t\tDT_EMISSAO as timestamp,\n\t\tMODELO as string,\n\t\tNUMORDEMDOITEM as decimal(3,0),\n\t\tBC_ICMS as decimal(15,2),\n\t\tICMS as decimal(15,2),\n\t\tALIQUOTA_ICMS as decimal(15,2),\n\t\tBC_ICMS_RECALCULADA as decimal(15,2),\n\t\tICMS_RECALCULADO as decimal(15,2),\n\t\tICMS_PARA_RESSARCIMENTO as decimal(15,2),\n\t\tSITUACAO as string,\n\t\tMES_APURACAO as string,\n\t\tTIPO_DOC as decimal(1,0),\n\t\tCOD_CONSUMIDOR as string,\n\t\tCHAVE_AUTENTICACAO as string,\n\t\tTOTAL_MESTRE as decimal(15,2),\n\t\tBC_ICMS_MESTRE as decimal(15,2),\n\t\tICMS_DESTACADO as decimal(15,2),\n\t\tINSCRICAO_ESTADUAL as string,\n\t\tRAZAO_SOCIAL as string,\n\t\tFL_STATUS_GERAL as string,\n\t\tID_LOTE_AJUSTE as decimal(28,0),\n\t\tID_ENTREGA_RESSARCIMENTO as decimal(28,0),\n\t\tCD_ITEM as string,\n\t\tDS_ITEM as string,\n\t\tHR_AJUSTE as string,\n\t\tHR_ATRIBUICAO as string,\n\t\tNOME_BILLING as string,\n\t\tTIPO_CLIENTE as string,\n\t\tDT_ABERTURA_IMPUG as timestamp,\n\t\tDT_FECHA_IMPUG as timestamp,\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tSALDO_FATURA_INI as decimal(15,2),\n\t\tSALDO_FATURA_FIM as decimal(15,2),\n\t\tCOD_CLIENTE as string,\n\t\tTIPO_DOCUMENTO as string,\n\t\tNOME_FANTASIA as string,\n\t\tCOD_GRUPO as string,\n\t\tNOME_GRUPO_ECONOMICO as string,\n\t\tSEGMENTO_CLIENTE as string,\n\t\tSUB_SEGMENTO_CLIENTE as string,\n\t\tSEGMENTO_VALOR as string,\n\t\tCLASSE_ELEGIBILIDADE as string,\n\t\tDESCR_SERV_AJUSTE as string,\n\t\tDESCR_SERV as string,\n\t\tCONTACONTABIL_DB as string,\n\t\tCONTACONTABIL_CR as string,\n\t\tDESCR_CONTACONTABIL_DB as string,\n\t\tDESCR_CONTACONTABIL_CR as string,\n\t\tSALDO_POS_AJUSTE as decimal(15,2),\n\t\tTIPO_OPERACAO as string,\n\t\tTIPO_TERMINAL as string,\n\t\tDONO_RECEITA as string,\n\t\tSUBTYPE_CODE as decimal(19,0),\n\t\tTIPO_DESCR_SERV as string,\n\t\tDT_VENCTO_FAT_FUTURA as timestamp,\n\t\tVLR_IMPOSTO_CONTESTADO as decimal(15,2),\n\t\tVLR_IMPOSTO_ICMS as decimal(15,2),\n\t\tVLR_BRUTO_ITEM as decimal(15,2),\n\t\tVLR_OUTROS_IMPOSTOS as decimal(15,2),\n\t\tVLR_AJUSTE_ITEM as decimal(15,2),\n\t\tVLR_CREDITO_AJUSTE as decimal(15,2),\n\t\tVLR_CREDITO_ITEM as decimal(15,2),\n\t\tVLR_DEVOLUCAO as decimal(15,2),\n\t\tVLR_FATURA_FUTURA as decimal(15,2),\n\t\tVLR_CONTESTADO_FUTURO as decimal(15,2),\n\t\tLOGIN_ATENDIMENTO as string,\n\t\tDT_VENC_FATURA_ORIGINAL as timestamp,\n\t\tDT_ATRIBUICAO_PGTO as timestamp,\n\t\tNUM_ITEM_ESTORNADO as decimal(10,0),\n\t\tFLG_RETIFICADO as string,\n\t\tTERMINAL_115 as string,\n\t\tVALOR_ITEM_115 as decimal(15,2),\n\t\tDT_CRIADO_EM as timestamp,\n\t\tCD_CRIADO_POR as string,\n\t\tDT_ATUALIZADO_EM as timestamp,\n\t\tCD_ATUALIZADO_POR as string,\n\t\tMES_ANO_FAT_ORIGINAL as string,\n\t\tMES_ANO_FAT_AJUSTE as string,\n\t\tVLR_PAGAMENTO_FAT_ORIGINAL as decimal(15,2),\n\t\tID_ITEM_CONVENIO_115 as decimal(28,0),\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO as string,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO as string,\n\t\tCOD_FAC_CD as decimal(10,0),\n\t\tCCM_SERVICO_CONTESTADO as string,\n\t\tCOD_TIPO_RCBL_FATURA as string,\n\t\tDESCR_RCBL_FATURA as string,\n\t\tDT_PAGAMENTO as timestamp,\n\t\tDEBIT_ID as string,\n\t\tDT_EMISSAO_FATURA_ORIGINAL as timestamp,\n\t\tUF_NF as string,\n\t\tVLR_PGTO_ALOCADO as decimal(15,2),\n\t\tVLR_TOTAL_PGTO as decimal(15,2),\n\t\tCREDIT_ID as string,\n\t\tDT_REFERENCIA as timestamp,\n\t\tDT_IMPORTACAO as timestamp,\n\t\tSTEP_EXECUTION_ID as decimal(18,0),\n\t\tJOB_EXECUTION_ID as decimal(18,0),\n\t\tID_MESTRE_CONVENIO_115 as decimal(28,0),\n\t\tFL_MANUAL_CONCILIACAO as string,\n\t\tDT_CONCILIACAO as timestamp,\n\t\tDT_EMISSAO_115 as timestamp,\n\t\tMES_ANO_REF_ARQ as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tNOTA_FISCAL_ORIG = nota_fiscal,\n\t\tDT_EMISSAO_NF_ORIG = dt_emissao_nfst,\n\t\tVLR_ORIG_NSFT = vl_orig_nfst,\n\t\tSERIE_NF = serie,\n\t\tCOD_IDENT_CLI = conta_cliente,\n\t\tCPF_CNPJ = cnpj_cpf,\n\t\tNOME_CLIENTE = nome_cliente,\n\t\tTERMINAL = terminal,\n\t\tVLR_TOTAL_ATRIBUIDO = vl_contest_ajuste,\n\t\tVLR_ATRIBUIDO = vl_alocado,\n\t\tDT_ATRIBUICAO = dt_alocacao,\n\t\tDT_AJUSTE = dt_ajuste,\n\t\tDESCR_OPERADORA = operadora,\n\t\tCOD_OPERADORA = cd_operadora,\n\t\tCOD_MOTIVO_AJUSTE = cd_motivo_ajuste,\n\t\tDESC_MOTIVO_AJUSTE = ds_motivo_ajuste,\n\t\tNUM_FATURA_ORIGINAL = numero_fatura,\n\t\tVLR_DOC_ORIGINAL = vl_docto_original,\n\t\tFATURA_ATRIBUIDA = fatu_alocada,\n\t\tDT_EMISSAO = dt_emissao_fatura_2,\n\t\tFL_STATUS_GERAL = fl_status_geral,\n\t\tID_LOTE_AJUSTE = id_lote_ajuste,\n\t\tHR_AJUSTE = hr_ajuste,\n\t\tHR_ATRIBUICAO = hr_alocacao,\n\t\tNOME_BILLING = nome_billing,\n\t\tSALDO_FATURA_FIM = saldo_devedor,\n\t\tCONTACONTABIL_DB = conta_contabil,\n\t\tDESCR_CONTACONTABIL_DB = ds_conta_contabil,\n\t\tVLR_FATURA_FUTURA = vl_fatura,\n\t\tDT_CRIADO_EM = dt_criado_em,\n\t\tCD_CRIADO_POR = cd_criado_por,\n\t\tMES_ANO_FAT_AJUSTE = mesanofatura,\n\t\tNUM_CONTROLE_RECLAMACAO_NORMALIZADO = num_controle_reclamacao_normalizado,\n\t\tCOD_TIPO_RCBL_FATURA = cd_tipo_recebiveis,\n\t\tDESCR_RCBL_FATURA = ds_tipo_recebiveis,\n\t\tDT_PAGAMENTO = dt_pagamento,\n\t\tDEBIT_ID = debit_id,\n\t\tDT_EMISSAO_FATURA_ORIGINAL = dt_emissao_fatura,\n\t\tUF_NF = uf,\n\t\tCREDIT_ID = credit_id,\n\t\tMES_ANO_REF_ARQ,\n\t\tNOME_BILLING = nome_billing,\n\t\tNOTA_FISCAL_ORIG_NORMALIZADO\n\t)) ~> TabelaCONTESTACAO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CONTESTACAO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGeraRelEstoqueContestacao')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Relatorios"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "QryEstoqueContestacao",
								"type": "DatasetReference"
							},
							"name": "QryContestacoes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_REL_ESTOQUE_CONTESTACOES",
								"type": "DatasetReference"
							},
							"name": "RelEstoqueContestacoes"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          FL_STATUS_GERAL as string,",
						"          UF_FATURA as string,",
						"          DS_SISTEMA as string,",
						"          DT_EMISSAO_NF_ORIG as date,",
						"          DT_AJUSTE as date,",
						"          DT_CRIADO_EM as date,",
						"          DESC_MOTIVO_AJUSTE as string,",
						"          CONTA_CONTABIL as string,",
						"          QTD as integer,",
						"          VLR_ATRIBUIDO as decimal(15,2),",
						"          ICMS_PARA_RESSARCIMENTO as decimal(15,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n     C.FL_STATUS_GERAL,\\n     C.UF_FATURA,\\n     S.DS_SISTEMA,\\n     CAST(C.DT_EMISSAO_NF_ORIG As Date) AS DT_EMISSAO_NF_ORIG,\\n     CAST(C.DT_AJUSTE As Date) AS DT_AJUSTE,\\n     CAST(DATEADD(dd,-(DAY(C.DT_CRIADO_EM)-1),C.DT_CRIADO_EM) As Date) AS DT_CRIADO_EM,\\n     CASE\\n          WHEN S.CD_SISTEMA = \\'ATLYS\\' THEN coalesce(C.COD_MOTIVO_AJUSTE + \\'-\\' + C.DESC_MOTIVO_AJUSTE, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'KENAN\\' THEN coalesce(C.DESC_MOTIVO_AJUSTE, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'ATIS\\' THEN coalesce(C.COD_MOTIVO_AJUSTE, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'FAT\\' THEN coalesce(C.COD_MOTIVO_AJUSTE, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'VIVO_NEXT\\' THEN coalesce(C.COD_MOTIVO_AJUSTE + \\' \\' + C.DESC_MOTIVO_AJUSTE, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'FENIX\\' THEN coalesce(C.COD_MOTIVO_AJUSTE + \\' \\' + C.DESC_MOTIVO_AJUSTE, \\'Não Informado\\')\\n          ELSE \\'Não Indentificado\\'\\n     END as DESC_MOTIVO_AJUSTE,\\n     CASE\\n          WHEN S.CD_SISTEMA = \\'ATLYS\\' THEN coalesce(C.CONTA_FINANCEIRA, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'KENAN\\' THEN coalesce(C.CONTACONTABIL_DB, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'ATIS\\' THEN \\'Não analisa conta\\'\\n          WHEN S.CD_SISTEMA = \\'FAT\\' THEN \\'Não analisa conta\\'\\n          WHEN S.CD_SISTEMA = \\'VIVO_NEXT\\' THEN coalesce(C.CONTACONTABIL_DB, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'FENIX\\' THEN coalesce(C.CONTA_FINANCEIRA, \\'Não Informado\\')\\n          ELSE \\'Não Indentificado\\'\\n     END as  CONTA_CONTABIL,\\n     1 AS QTD,\\n     coalesce(C.VLR_ATRIBUIDO,0) as VLR_ATRIBUIDO,\\n     coalesce(c.ICMS_PARA_RESSARCIMENTO,0) as ICMS_PARA_RESSARCIMENTO\\n from convenio.cvtb_contestacao C WITH(NOLOCK), CONVENIO.CVTB_LOTE L WITH(NOLOCK), CONVENIO.CVTB_SISTEMA S WITH(NOLOCK)\\nWHERE C.ID_LOTE_AJUSTE = L.ID_LOTE\\n  AND L.ID_SISTEMA = S.ID_SISTEMA\\n  AND L.FL_STATUS = \\'PROCESSADO\\'',",
						"     format: 'query') ~> QryContestacoes",
						"QryContestacoes aggregate(groupBy(FL_STATUS_GERAL,",
						"          UF_FATURA,",
						"          DS_SISTEMA,",
						"          DT_EMISSAO_NF_ORIG,",
						"          DT_AJUSTE,",
						"          DT_CRIADO_EM,",
						"          DESC_MOTIVO_AJUSTE,",
						"          CONTA_CONTABIL),",
						"     SUM_QTD = sum(QTD),",
						"          SUM_VALOR = sum(VLR_ATRIBUIDO),",
						"          SUM_ICMS_RESSARCIMENTO = sum(ICMS_PARA_RESSARCIMENTO)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FL_STATUS_GERAL as string,",
						"          UF_FATURA as string,",
						"          DS_SISTEMA as string,",
						"          DT_EMISSAO_NF_ORIG as date,",
						"          DT_AJUSTE as date,",
						"          DT_CRIADO_EM as date,",
						"          DESC_MOTIVO_AJUSTE as string,",
						"          CONTA_CONTABIL as string,",
						"          QTD as integer,",
						"          VLR_ATRIBUIDO as decimal(15,2),",
						"          ICMS_PARA_RESSARCIMENTO as decimal(15,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          FL_STATUS_GERAL,",
						"          UF_FATURA,",
						"          DS_SISTEMA,",
						"          DT_EMISSAO_NF_ORIG,",
						"          DT_AJUSTE,",
						"          DT_CRIADO_EM,",
						"          DESC_MOTIVO_AJUSTE,",
						"          CONTA_CONTABIL,",
						"          QTD = SUM_QTD,",
						"          VLR_ATRIBUIDO = SUM_VALOR,",
						"          ICMS_PARA_RESSARCIMENTO = SUM_ICMS_RESSARCIMENTO",
						"     )) ~> RelEstoqueContestacoes"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/QryEstoqueContestacao')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_REL_ESTOQUE_CONTESTACOES')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGeraRelInconsistencia')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Relatorios"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "QryInconsistencias",
								"type": "DatasetReference"
							},
							"name": "QryInconsistencia"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_REL_INCONSISTENCIAS",
								"type": "DatasetReference"
							},
							"name": "RelInconsistencia"
						}
					],
					"transformations": [
						{
							"name": "aggregate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          FL_STATUS_GERAL as string,",
						"          UF_FATURA as string,",
						"          DS_SISTEMA as string,",
						"          DT_EMISSAO_NF_ORIG as date,",
						"          DT_AJUSTE as date,",
						"          DT_CRIADO_EM as date,",
						"          DESC_MOTIVO_AJUSTE as string,",
						"          CONTA_CONTABIL as string,",
						"          CD_CRITICA as string,",
						"          DS_CRITICA as string,",
						"          QTD as integer,",
						"          VLR_ATRIBUIDO as decimal(15,2),",
						"          ICMS_PARA_RESSARCIMENTO as decimal(15,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n     C.FL_STATUS_GERAL,\\n     C.UF_FATURA,\\n     S.DS_SISTEMA,\\n     CAST(C.DT_EMISSAO_NF_ORIG As Date) AS DT_EMISSAO_NF_ORIG,\\n     CAST(C.DT_AJUSTE As Date) AS DT_AJUSTE,\\n     CAST(DATEADD(dd,-(DAY(C.DT_CRIADO_EM)-1),C.DT_CRIADO_EM) As Date) AS DT_CRIADO_EM,\\n     CASE\\n          WHEN S.CD_SISTEMA = \\'ATLYS\\' THEN coalesce(C.COD_MOTIVO_AJUSTE + \\'-\\' + C.DESC_MOTIVO_AJUSTE, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'KENAN\\' THEN coalesce(C.DESC_MOTIVO_AJUSTE, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'ATIS\\' THEN coalesce(C.COD_MOTIVO_AJUSTE, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'FAT\\' THEN coalesce(C.COD_MOTIVO_AJUSTE, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'VIVO_NEXT\\' THEN coalesce(C.COD_MOTIVO_AJUSTE + \\' \\' + C.DESC_MOTIVO_AJUSTE, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'FENIX\\' THEN coalesce(C.COD_MOTIVO_AJUSTE + \\' \\' + C.DESC_MOTIVO_AJUSTE, \\'Não Informado\\')\\n          ELSE \\'Não Indentificado\\'\\n     END as DESC_MOTIVO_AJUSTE,\\n     CASE\\n          WHEN S.CD_SISTEMA = \\'ATLYS\\' THEN coalesce(C.CONTA_FINANCEIRA, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'KENAN\\' THEN coalesce(C.CONTACONTABIL_DB, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'ATIS\\' THEN \\'Não analisa conta\\'\\n          WHEN S.CD_SISTEMA = \\'FAT\\' THEN \\'Não analisa conta\\'\\n          WHEN S.CD_SISTEMA = \\'VIVO_NEXT\\' THEN coalesce(C.CONTACONTABIL_DB, \\'Não Informado\\')\\n          WHEN S.CD_SISTEMA = \\'FENIX\\' THEN coalesce(C.CONTA_FINANCEIRA, \\'Não Informado\\')\\n          ELSE \\'Não Indentificado\\'\\n     END as CONTA_CONTABIL,\\n     CR.CD_CRITICA,\\n     CR.DS_CRITICA,\\n     1 AS QTD,\\n     coalesce(C.VLR_ATRIBUIDO,0) as VLR_ATRIBUIDO,\\n     coalesce(c.ICMS_PARA_RESSARCIMENTO,0) as ICMS_PARA_RESSARCIMENTO\\n from CONVENIO.cvtb_contestacao C WITH(NOLOCK), \\n      CONVENIO.CVTB_LOTE L WITH(NOLOCK), \\n       CONVENIO.CVTB_SISTEMA S WITH(NOLOCK),\\n       CONVENIO.CVTB_CONTESTACAO_CRITICA CCR WITH(NOLOCK),\\n       CONVENIO.CVTB_CRITICA CR WITH(NOLOCK)\\nWHERE C.ID_LOTE_AJUSTE = L.ID_LOTE\\n  AND L.ID_SISTEMA = S.ID_SISTEMA\\n  AND CCR.ID_CONTESTACAO = C.ID_CONTESTACAO\\n  AND CCR.CD_CRITICA = CR.CD_CRITICA\\n  AND L.FL_STATUS = \\'PROCESSADO\\'\\n',",
						"     format: 'query') ~> QryInconsistencia",
						"QryInconsistencia aggregate(groupBy(FL_STATUS_GERAL,",
						"          UF_FATURA,",
						"          DS_SISTEMA,",
						"          DT_EMISSAO_NF_ORIG,",
						"          DT_AJUSTE,",
						"          DT_CRIADO_EM,",
						"          DESC_MOTIVO_AJUSTE,",
						"          CONTA_CONTABIL,",
						"          CD_CRITICA,",
						"          DS_CRITICA),",
						"     SUM_QTD = sum(QTD),",
						"          SUM_VALOR = sum(VLR_ATRIBUIDO),",
						"          SUM_ICMS_RESSARCIMENTO = sum(ICMS_PARA_RESSARCIMENTO)) ~> aggregate",
						"aggregate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FL_STATUS_GERAL as string,",
						"          UF_FATURA as string,",
						"          DS_SISTEMA as string,",
						"          DT_EMISSAO_NF_ORIG as date,",
						"          DT_AJUSTE as date,",
						"          DT_CRIADO_EM as date,",
						"          DESC_MOTIVO_AJUSTE as string,",
						"          CONTA_CONTABIL as string,",
						"          CD_CRITICA as string,",
						"          DS_CRITICA as string,",
						"          QTD as integer,",
						"          VLR_ATRIBUIDO as decimal(15,2),",
						"          ICMS_PARA_RESSARCIMENTO as decimal(15,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          FL_STATUS_GERAL,",
						"          UF_FATURA,",
						"          DS_SISTEMA,",
						"          DT_EMISSAO_NF_ORIG,",
						"          DT_AJUSTE,",
						"          DT_CRIADO_EM,",
						"          DESC_MOTIVO_AJUSTE,",
						"          CONTA_CONTABIL,",
						"          CD_CRITICA,",
						"          DS_CRITICA,",
						"          QTD = SUM_QTD,",
						"          VLR_ATRIBUIDO = SUM_VALOR,",
						"          ICMS_PARA_RESSARCIMENTO = SUM_ICMS_RESSARCIMENTO",
						"     )) ~> RelInconsistencia"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/QryInconsistencias')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_REL_INCONSISTENCIAS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoAtisNaoPago')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atis_nao_pago",
								"type": "DatasetReference"
							},
							"name": "srcArqAtisNaoPago"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_ATIS_NAO_PAGO",
								"type": "DatasetReference"
							},
							"name": "GravaTabAtisNaoPago"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tvalue as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['atis/validados_a_processar','atis/processados']) ~> srcArqAtisNaoPago\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqAtisNaoPago derive(SyntheticKey = 1,\n\t\tCONTA_COBRANCA = trim(substring(value, 1, 11)),\n\t\tCPF_CNPJ = trim(substring(value, 13, 14)),\n\t\tCATEGORIA_CLIENTE = trim(substring(value, 27, 2)),\n\t\tUF_COBRANCA = trim(substring(value, 29, 2)),\n\t\tID_FATURA = trim(substring(value, 31, 25)),\n\t\tDATA_GERACAO = toTimestamp(trim(substring(value, 56, 8)), 'yyyyMMdd'),\n\t\tDATA_VENCTO_ORIGINAL = toTimestamp(trim(substring(value, 64, 8)), 'yyyyMMdd'),\n\t\tDATA_VENCTO_BOLETO_ULT = toTimestamp(trim(substring(value, 72, 8)), 'yyyyMMdd'),\n\t\tVALOR_FATURA_ORIGINAL = (toDecimal(trim(substring(value, 80, 17))))/100,\n\t\tCOD_FAC_CD = toDecimal(trim(substring(value, 97, 9))),\n\t\tVALOR_CONTESTACAO = (toDecimal(trim(substring(value, 106, 17))))/100,\n\t\tDATA_OPERACAO = toTimestamp(trim(substring(value, 123, 8)), 'yyyyMMdd'),\n\t\tOPERADORA = trim(substring(value, 131, 20)),\n\t\tCODIGO_OPERADORA = trim(substring(value, 151, 3)),\n\t\tMOTIVO_OPERACAO = trim(substring(value, 154, 15)),\n\t\tRECEITA_OPERADORA = trim(substring(value, 169, 3)),\n\t\tCONTACONTABIL = trim(substring(value, 172, 11)),\n\t\tDESCRCONTACONTABIL = trim(substring(value, 183, 40)),\n\t\tVALOR_POS_CONTESTACAO = (toDecimal(trim(substring(value, 223, 17))))/100,\n\t\tVALOR_SALDO_ABERTO = (toDecimal(trim(substring(value, 240, 17))))/100,\n\t\tFAMILIA_PRODUTOS = trim(substring(value, 257, 14)),\n\t\tMOTIVO_CONTESTACAO = trim(substring(value, 271, 2)),\n\t\tNUMERO_NOTA_FISCAL = trim(substring(value, 273, 13)),\n\t\tSERIE_NOTA_FISCAL = trim(substring(value, 286, 2)),\n\t\tDATA_EMISSAO = toTimestamp(trim(substring(value, 288, 8)), 'yyyyMMdd'),\n\t\tVALOR_TOTAL = (toDecimal(trim(substring(value, 296, 17))))/100,\n\t\tTIPO_OPERACAO = trim(substring(value, 313, 30)),\n\t\tDATA_FECHAMENTO = toTimestamp(trim(substring(value, 343, 8)), 'yyyyMMdd'),\n\t\tDATA_CONTA = toTimestamp(trim(substring(value,351, 8)), 'yyyyMMdd')) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_ATIS_NAO_PAGO as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCOD_IDENT_CLI as string,\n\t\tCPF_CNPJ as string,\n\t\tTIPO_DOCUMENTO as string,\n\t\tUF_FATURA as string,\n\t\tNUM_FATURA_ORIGINAL as string,\n\t\tDT_ABERTURA_IMPUG as timestamp,\n\t\tDT_VENC_FATURA_ORIGINAL as timestamp,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tCOD_FAC_CD as decimal(10,0),\n\t\tVLR_CONTESTADO as decimal(15,2),\n\t\tDT_AJUSTE as timestamp,\n\t\tDESCR_OPERADORA as string,\n\t\tCOD_OPERADORA as string,\n\t\tCONTACONTABIL as string,\n\t\tDESCRCONTACONTABIL as string,\n\t\tSALDO_POS_AJUSTE as decimal(15,2),\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tCOD_MOTIVO_AJUSTE as string,\n\t\tNOTA_FISCAL_ORIG as string,\n\t\tSERIE_NF as string,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tVLR_ORIG_NSFT as decimal(15,2),\n\t\tTIPO_OPERACAO as string,\n\t\tFAMILIA_PRODUTOS as string,\n\t\tDT_FECHAMENTO as timestamp,\n\t\tDT_CONTA as timestamp,\n\t\tRECEITA_OPERADORA as string,\n\t\tDT_VENCTO_BOLETO_ULT as timestamp,\n\t\tMOTIVO_OPERACAO as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCOD_IDENT_CLI = CONTA_COBRANCA,\n\t\tCPF_CNPJ,\n\t\tTIPO_DOCUMENTO = CATEGORIA_CLIENTE,\n\t\tUF_FATURA = UF_COBRANCA,\n\t\tNUM_FATURA_ORIGINAL = ID_FATURA,\n\t\tDT_ABERTURA_IMPUG = DATA_GERACAO,\n\t\tDT_VENC_FATURA_ORIGINAL = DATA_VENCTO_ORIGINAL,\n\t\tVLR_FATURA = VALOR_FATURA_ORIGINAL,\n\t\tCOD_FAC_CD,\n\t\tVLR_CONTESTADO = VALOR_CONTESTACAO,\n\t\tDT_AJUSTE = DATA_OPERACAO,\n\t\tDESCR_OPERADORA = OPERADORA,\n\t\tCOD_OPERADORA = CODIGO_OPERADORA,\n\t\tCONTACONTABIL,\n\t\tDESCRCONTACONTABIL,\n\t\tSALDO_POS_AJUSTE = VALOR_POS_CONTESTACAO,\n\t\tSALDO_DEVEDOR = VALOR_SALDO_ABERTO,\n\t\tCOD_MOTIVO_AJUSTE = MOTIVO_CONTESTACAO,\n\t\tNOTA_FISCAL_ORIG = NUMERO_NOTA_FISCAL,\n\t\tSERIE_NF = SERIE_NOTA_FISCAL,\n\t\tDT_EMISSAO_FATURA = DATA_EMISSAO,\n\t\tVLR_ORIG_NSFT = VALOR_TOTAL,\n\t\tTIPO_OPERACAO,\n\t\tFAMILIA_PRODUTOS,\n\t\tDT_FECHAMENTO = DATA_FECHAMENTO,\n\t\tDT_CONTA = DATA_CONTA,\n\t\tRECEITA_OPERADORA,\n\t\tDT_VENCTO_BOLETO_ULT = DATA_VENCTO_BOLETO_ULT,\n\t\tMOTIVO_OPERACAO\n\t)) ~> GravaTabAtisNaoPago"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_atis_nao_pago')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_ATIS_NAO_PAGO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoAtisPago')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atis_pago",
								"type": "DatasetReference"
							},
							"name": "srcArqAtisPago"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_ATIS_PAGO",
								"type": "DatasetReference"
							},
							"name": "GravaTabAtis"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tvalue as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['atis/validados_a_processar','atis/processados']) ~> srcArqAtisPago\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(28,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqAtisPago derive(SyntheticKey = 1,\n\t\tCONTA_COBRANCA = trim(substring(value, 1, 11)),\n\t\tCPF_CNPJ = trim(substring(value, 13, 14)),\n\t\tCATEGORIA_CLIENTE = trim(substring(value, 27, 2)),\n\t\tUF_COBRANCA = trim(substring(value, 29, 2)),\n\t\tID_FATURA = trim(substring(value, 31, 25)),\n\t\tDT_GERACAO = toTimestamp(trim(substring(value, 56, 8)), 'yyyyMMdd'),\n\t\tDT_VENCTO_ORIGINAL = toTimestamp(trim(substring(value, 64, 8)), 'yyyyMMdd'),\n\t\tDT_VENCTO_BOLETO_ULT = toTimestamp(trim(substring(value, 72, 8)), 'yyyyMMdd'),\n\t\tVLR_FATURA_ORIGINAL = (toDecimal(trim(substring(value, 80, 17))))/100,\n\t\tCOD_FAC_CD = toDecimal(trim(substring(value, 97, 9))),\n\t\tCOD_CREDITO = toDecimal(trim(substring(value, 106, 9))),\n\t\tVLR_CONTESTADO = (toDecimal(trim(substring(value, 115, 17))))/100,\n\t\tNUM_FATURA_FUTURA = trim(substring(value, 132, 25)),\n\t\tDT_OPERACAO = toTimestamp(trim(substring(value, 157, 8)), 'yyyyMMdd'),\n\t\tDT_VENCTO_FUTURA = toTimestamp(trim(substring(value, 165, 8)), 'yyyyMMdd'),\n\t\tVLR_FATURA_FUTURA = (toDecimal(trim(substring(value, 173, 17))))/100,\n\t\tOPERADORA = trim(substring(value, 190, 20)),\n\t\tCOD_OPERADORA = trim(substring(value, 210, 3)),\n\t\tMOTIVO_OPERACAO = trim(substring(value, 213, 15)),\n\t\tRECEITA_OPERADORA = trim(substring(value, 228, 3)),\n\t\tCONTA_CONTABIL = trim(substring(value, 231, 11)),\n\t\tDESCR_CONTA_CONTABIL = trim(substring(value, 242, 40)),\n\t\tVLR_POS_CONTESTACAO = (toDecimal(trim(substring(value, 282, 17))))/100,\n\t\tVLR_SALDO_ABERTO = (toDecimal(trim(substring(value, 299, 17))))/100,\n\t\tFAMILIA_PRODUTOS = trim(substring(value, 316, 14)),\n\t\tMOTIVO_CONTESTACAO = trim(substring(value, 330, 2)),\n\t\tNOTA_FISCAL = trim(substring(value, 332, 13)),\n\t\tSERIE_NF = trim(substring(value, 345, 2)),\n\t\tDT_EMISSAO = toTimestamp(trim(substring(value, 347, 8)), 'yyyyMMdd'),\n\t\tVLR_TOTAL = (toDecimal(trim(substring(value, 355, 17))))/100,\n\t\tTIPO_OPERACAO = trim(substring(value, 372, 30)),\n\t\tDT_FECHAMENTO = toTimestamp(trim(substring(value, 402, 8)), 'yyyyMMdd'),\n\t\tVLR_DEVOLUCAO = (toDecimal(trim(substring(value, 410, 17))))/100,\n\t\tVLR_CREDITO_AJUSTE = (toDecimal(trim(substring(value, 427, 17))))/100,\n\t\tVLR_AJUSTE_ITEM = (toDecimal(trim(substring(value, 444, 17)))) /100,\n\t\tVLR_CREDITO_ITEM = (toDecimal(trim(substring(value, 461, 17))))/100) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_ATIS_PAGO as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCOD_IDENT_CLI as string,\n\t\tCPF_CNPJ as string,\n\t\tTIPO_DOCUMENTO as string,\n\t\tUF_FATURA as string,\n\t\tNUM_FATURA_ORIGINAL as string,\n\t\tDT_ABERTURA_IMPUG as timestamp,\n\t\tDT_VENC_FATURA_ORIGINAL as timestamp,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tCOD_FAC_CD as decimal(10,0),\n\t\tFATURA_ATRIBUIDA as string,\n\t\tDT_AJUSTE as timestamp,\n\t\tDESCR_OPERADORA as string,\n\t\tCOD_OPERADORA as string,\n\t\tCONTACONTABIL as string,\n\t\tDESCRCONTACONTABIL as string,\n\t\tCOD_MOTIVO_AJUSTE as string,\n\t\tNOTA_FISCAL_ORIG as string,\n\t\tSERIE_NF as string,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tVLR_ORIG_NSFT as decimal(15,2),\n\t\tTIPO_OPERACAO as string,\n\t\tVLR_DEVOLUCAO as decimal(15,2),\n\t\tVLR_CREDITO_AJUSTE as decimal(15,2),\n\t\tVLR_AJUSTE_ITEM as decimal(15,2),\n\t\tVLR_CREDITO_ITEM as decimal(15,2),\n\t\tFAMILIA_PRODUTOS as string,\n\t\tDT_FECHAMENTO as timestamp,\n\t\tDT_VENCTO_FUTURA as timestamp,\n\t\tRECEITA_OPERADORA as string,\n\t\tDT_VENCTO_BOLETO_ULT as timestamp,\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tSALDO_POS_AJUSTE as decimal(15,2),\n\t\tVLR_CONTESTADO as decimal(15,2),\n\t\tCOD_CREDITO as decimal(10,0),\n\t\tVLR_FATURA_FUTURA as decimal(15,2),\n\t\tNUM_FATURA_FUTURA as string,\n\t\tMOTIVO_OPERACAO as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCOD_IDENT_CLI = CONTA_COBRANCA,\n\t\tCPF_CNPJ,\n\t\tTIPO_DOCUMENTO = CATEGORIA_CLIENTE,\n\t\tUF_FATURA = UF_COBRANCA,\n\t\tNUM_FATURA_ORIGINAL = ID_FATURA,\n\t\tDT_ABERTURA_IMPUG = DT_GERACAO,\n\t\tDT_VENC_FATURA_ORIGINAL = DT_VENCTO_ORIGINAL,\n\t\tVLR_FATURA = VLR_FATURA_ORIGINAL,\n\t\tCOD_FAC_CD,\n\t\tMOTIVO_OPERACAO,\n\t\tDT_AJUSTE = DT_OPERACAO,\n\t\tDESCR_OPERADORA = OPERADORA,\n\t\tCOD_OPERADORA,\n\t\tCONTACONTABIL = CONTA_CONTABIL,\n\t\tDESCRCONTACONTABIL = DESCR_CONTA_CONTABIL,\n\t\tCOD_MOTIVO_AJUSTE = MOTIVO_CONTESTACAO,\n\t\tNOTA_FISCAL_ORIG = NOTA_FISCAL,\n\t\tSERIE_NF,\n\t\tDT_EMISSAO_FATURA = DT_EMISSAO,\n\t\tVLR_ORIG_NSFT = VLR_TOTAL,\n\t\tTIPO_OPERACAO,\n\t\tVLR_DEVOLUCAO,\n\t\tVLR_CREDITO_AJUSTE,\n\t\tVLR_AJUSTE_ITEM,\n\t\tVLR_CREDITO_ITEM,\n\t\tFAMILIA_PRODUTOS,\n\t\tDT_FECHAMENTO,\n\t\tRECEITA_OPERADORA,\n\t\tDT_VENCTO_BOLETO_ULT,\n\t\tSALDO_DEVEDOR = VLR_SALDO_ABERTO,\n\t\tSALDO_POS_AJUSTE = VLR_POS_CONTESTACAO,\n\t\tVLR_CONTESTADO,\n\t\tCOD_CREDITO,\n\t\tVLR_FATURA_FUTURA,\n\t\tNUM_FATURA_FUTURA,\n\t\tDT_VENCTO_FUTURA,\n\t\tMOTIVO_OPERACAO\n\t)) ~> GravaTabAtis"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_atis_pago')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_ATIS_PAGO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoContestacaoAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atlys_adj",
								"type": "DatasetReference"
							},
							"name": "srcArqAtlysAdj"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_ATLYS_ADJ",
								"type": "DatasetReference"
							},
							"name": "GravaTabContestacoesAtlysAdj"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCLIENTE_ID as string,\n\t\tNOTA_FISCAL as string,\n\t\tDTEMISSAONF as date 'yyyyMMdd',\n\t\tVALOR_ORIG_NFST as string,\n\t\tSERIE as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tNOMECLIENTE as string,\n\t\tTERMINAL as string,\n\t\tVALOR_CONTEST_AJUSTE as string,\n\t\tVALOR_ATRIBUIDO as string,\n\t\tDATA_ATRIBUICAO as date 'yyyyMMdd',\n\t\tHORA_ATRIBUICAO as string,\n\t\tDATA_AJUSTE as date 'yyyyMMdd',\n\t\tHORA_AJUSTE as string,\n\t\tOPERADORA as string,\n\t\t{CODIGO OPERADORA} as string,\n\t\tCODMOTIVOAJUSTES as string,\n\t\tDESCMOTIVOAJUSTE as string,\n\t\tDATAABERTURAIMPU as date 'yyyyMMdd',\n\t\tDATAFECHIMPUG as date 'yyyyMMdd',\n\t\tDSPUT_ID as string,\n\t\tTP_NOTA_FISCAL as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTACONTABIL as string,\n\t\tDESCRCONTACONTABIL as string,\n\t\tNUMERO_FATURA as string,\n\t\tVALOR_DOCTO_ORIGINAL as string,\n\t\tMES_ANO_REFERENTE as string,\n\t\tDATAVENCFATUR as date 'yyyyMMdd',\n\t\tVALOR_PAGAMENTO as string,\n\t\tDATA_ATRIBUICAO_PGTO as date 'yyyyMMdd',\n\t\tFATU_ATRIBUIDA as string,\n\t\tDTEMISSAOFATURA as date 'yyyyMMdd',\n\t\tMESANOFATURA as string,\n\t\tVALOR_FATURA as string,\n\t\tSALDO_DEVEDOR as string,\n\t\tUF as string,\n\t\tOPERADORA_REAL as string,\n\t\tSALDO_FATURA_INI as string,\n\t\tSALDO_FATURA_FIM as string,\n\t\tSEQ_RECEBIVEL as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['atlys/validados_a_processar','atlys/processados']) ~> srcArqAtlysAdj\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(28,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqAtlysAdj derive(SyntheticKey = 1,\n\t\tNEW_VLR_ORIG_NFST = replace(VALOR_ORIG_NFST, \",\", \".\"),\n\t\tNEW_VALOR_CONTEST_AJUSTE = replace(VALOR_CONTEST_AJUSTE, \",\", \".\"),\n\t\tNEW_VALOR_ATRIBUIDO = replace(VALOR_ATRIBUIDO, \",\", \".\"),\n\t\tNEW_VALOR_DOCTO_ORIGINAL = replace(VALOR_DOCTO_ORIGINAL, \",\", \".\"),\n\t\tNEW_VALOR_PAGAMENTO = replace(VALOR_PAGAMENTO, \",\", \".\"),\n\t\tNEW_VALOR_FATURA = replace(VALOR_FATURA, \",\", \".\"),\n\t\tNEW_SALDO_DEVEDOR = replace(SALDO_DEVEDOR, \",\", \".\"),\n\t\tNEW_SALDO_FATURA_INI = replace(SALDO_FATURA_INI, \",\", \".\"),\n\t\tNEW_SALDO_FATURA_FIM = replace(SALDO_FATURA_FIM, \",\", \".\")) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_ATLYS_ADJ as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOTA_FISCAL as string,\n\t\tDT_EMISSAO_NF as timestamp,\n\t\tVLR_ORIG_NFST as decimal(10,2),\n\t\tSERIE as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tNOM_CLIENTE as string,\n\t\tNUM_TERMINAL as string,\n\t\tVLR_CONTEST_AJUSTE as decimal(10,2),\n\t\tVLR_ATRIBUIDO as decimal(10,2),\n\t\tDT_ATRIBUICAO as timestamp,\n\t\tHR_ATRIBUICAO as string,\n\t\tDT_AJUSTE as timestamp,\n\t\tHR_AJUSTE as string,\n\t\tOPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tCOD_MOTIVO_AJUSTES as string,\n\t\tDESC_MOTIVO_AJUSTE as string,\n\t\tDATA_ABERTURA_IMPU as timestamp,\n\t\tDATA_FECH_IMPUG as timestamp,\n\t\tDSPUT_ID as string,\n\t\tTP_NOTA_FISCAL as string,\n\t\tCLASSE_RECEBER as string,\n\t\tCONTA_CONTABIL as string,\n\t\tDESCR_CONTA_CONTABIL as string,\n\t\tNUMERO_FATURA as string,\n\t\tVALOR_DOCTO_ORIGINAL as decimal(15,2),\n\t\tMES_ANO_REFERENTE as string,\n\t\tDATA_VENC_FATUR as timestamp,\n\t\tVALOR_PAGAMENTO as decimal(15,2),\n\t\tDATA_ATRIBUICAO_PGTO as timestamp,\n\t\tFATU_ATRIBUIDA as string,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tMES_ANO_FATURA as string,\n\t\tVALOR_FATURA as decimal(15,2),\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tUF as string,\n\t\tOPERADORA_REAL as string,\n\t\tSALDO_FATURA_INI as decimal(15,2),\n\t\tSALDO_FATURA_FIM as decimal(15,2),\n\t\tSEQ_RECEBIVEL as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tID_CLIENTE = CLIENTE_ID,\n\t\tNOTA_FISCAL,\n\t\tDT_EMISSAO_NF = DTEMISSAONF,\n\t\tVLR_ORIG_NFST = NEW_VLR_ORIG_NFST,\n\t\tSERIE,\n\t\tCONTA_CLIENTE,\n\t\tCNPJ_CPF,\n\t\tNOM_CLIENTE = NOMECLIENTE,\n\t\tNUM_TERMINAL = TERMINAL,\n\t\tVLR_CONTEST_AJUSTE = NEW_VALOR_CONTEST_AJUSTE,\n\t\tVLR_ATRIBUIDO = NEW_VALOR_ATRIBUIDO,\n\t\tDT_ATRIBUICAO = DATA_ATRIBUICAO,\n\t\tHR_ATRIBUICAO = HORA_ATRIBUICAO,\n\t\tDT_AJUSTE = DATA_AJUSTE,\n\t\tHR_AJUSTE = HORA_AJUSTE,\n\t\tOPERADORA,\n\t\tCODIGO_OPERADORA = {CODIGO OPERADORA},\n\t\tCOD_MOTIVO_AJUSTES = CODMOTIVOAJUSTES,\n\t\tDESC_MOTIVO_AJUSTE = DESCMOTIVOAJUSTE,\n\t\tDATA_ABERTURA_IMPU = DATAABERTURAIMPU,\n\t\tDATA_FECH_IMPUG = DATAFECHIMPUG,\n\t\tDSPUT_ID,\n\t\tTP_NOTA_FISCAL,\n\t\tCLASSE_RECEBER,\n\t\tCONTA_CONTABIL = CONTACONTABIL,\n\t\tDESCR_CONTA_CONTABIL = DESCRCONTACONTABIL,\n\t\tNUMERO_FATURA,\n\t\tVALOR_DOCTO_ORIGINAL = NEW_VALOR_DOCTO_ORIGINAL,\n\t\tMES_ANO_REFERENTE,\n\t\tDATA_VENC_FATUR = DATAVENCFATUR,\n\t\tVALOR_PAGAMENTO = NEW_VALOR_PAGAMENTO,\n\t\tDATA_ATRIBUICAO_PGTO,\n\t\tFATU_ATRIBUIDA,\n\t\tDT_EMISSAO_FATURA = DTEMISSAOFATURA,\n\t\tMES_ANO_FATURA = MESANOFATURA,\n\t\tVALOR_FATURA = NEW_VALOR_FATURA,\n\t\tSALDO_DEVEDOR = NEW_SALDO_DEVEDOR,\n\t\tUF,\n\t\tOPERADORA_REAL,\n\t\tSALDO_FATURA_INI = NEW_SALDO_FATURA_INI,\n\t\tSALDO_FATURA_FIM = NEW_SALDO_FATURA_FIM,\n\t\tSEQ_RECEBIVEL\n\t)) ~> GravaTabContestacoesAtlysAdj"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_atlys_adj')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_ATLYS_ADJ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoFatCarFF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_fat_car_ff",
								"type": "DatasetReference"
							},
							"name": "srcArqFatFF"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_FAT_CAR_FF",
								"type": "DatasetReference"
							},
							"name": "GravaTabFatCarFF"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tvalue as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['fat/validados_a_processar','fat/processados']) ~> srcArqFatFF\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(28,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqFatFF derive(SyntheticKey = 1,\n\t\tCONTA_COBRANCA = trim(substring(value, 1, 11)),\n\t\tCPF_CNPJ = trim(substring(value, 13, 14)),\n\t\tCATEGORIA_CLIENTE = trim(substring(value, 27, 2)),\n\t\tNUMERO_FATURA_ORIGINAL = trim(substring(value, 31, 25)),\n\t\tUF_COBRANCA = trim(substring(value, 29, 2)),\n\t\tDT_GERACAO = toTimestamp(trim(substring(value, 56, 8)), 'yyyyMMdd'),\n\t\tDT_VENCTO_ORIGINAL = toTimestamp(trim(substring(value, 64, 8)), 'yyyyMMdd'),\n\t\tDT_VENCTO_BOLETO_ULT = toTimestamp(trim(substring(value, 72, 8)), 'yyyyMMdd'),\n\t\tVLR_FATURA_ORIGINAL_PAGA = (toDecimal(trim(substring(value, 80, 17))))/100,\n\t\tCCM_SERVICO_CONTESTATO = trim(substring(value, 97, 9)),\n\t\tCMM_CREDITO = trim(substring(value, 106, 9)),\n\t\tVLR_CONTESTADO = (toDecimal(trim(substring(value, 115, 17))))/100,\n\t\tNUMERO_FATURA_FUTURA = trim(substring(value, 132, 25)),\n\t\tDT_OPERACAO = toTimestamp(trim(substring(value, 157, 8)), 'yyyyMMdd'),\n\t\tDT_VENCTO_FATURA_FUTURA = toTimestamp(trim(substring(value, 165, 8)), 'yyyyMMdd'),\n\t\tVLR_FATURA_FUTURA = (toDecimal(trim(substring(value, 173, 17))))/100,\n\t\tOPERADORA = trim(substring(value, 190, 20)),\n\t\tCODIGO_OPERADORA = trim(substring(value, 210, 3)),\n\t\tMOTIVO_OPERACAO = trim(substring(value, 213, 15)),\n\t\tDONO_RECEITA = trim(substring(value, 228, 3)),\n\t\tCONTACONTABIL = trim(substring(value, 231, 11)),\n\t\tDESCRCONTACONTABIL = trim(substring(value, 242, 40)),\n\t\tVLR_POS_CONTESTACAO = (toDecimal(trim(substring(value, 282, 17))))/100,\n\t\tVLR_SALDO_ABERTO = (toDecimal(trim(substring(value, 299, 17))))/100,\n\t\tMOTIVO_CONTESTACAO = trim(substring(value, 330, 2)),\n\t\tNUMERO_NF = trim(substring(value, 332, 13)),\n\t\tSERIE_NF = trim(substring(value, 345, 2)),\n\t\tDT_EMISSAO = toTimestamp(trim(substring(value, 347, 8)), 'yyyyMMdd'),\n\t\tVLR_TOTAL_NF = (toDecimal(trim(substring(value, 355, 17))))/100,\n\t\tTIPO_OPERACAO = trim(substring(value, 372, 30)),\n\t\tVLR_CONTESTADO_FUTURO = (toDecimal(trim(substring(value, 410, 17))))/100,\n\t\tFAMILIA_PRODUTOS = trim(substring(value, 316, 14)),\n\t\tDT_FECHAMENTO_FATURA = toTimestamp(trim(substring(value, 402, 8)), 'yyyyMMdd')) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_FAT_CAR_FF as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tNUMERO_NF as string,\n\t\tDT_EMISSAO_NF as timestamp,\n\t\tVLR_TOTAL_NF as decimal(15,2),\n\t\tSERIE_NF as string,\n\t\tCONTA_COBRANCA as string,\n\t\tCNPJ_CPF as string,\n\t\tVLR_CONTESTADO as decimal(15,2),\n\t\tDT_OPERACAO as timestamp,\n\t\tOPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tMOTIVO_CONTESTACAO as string,\n\t\tDT_GERACAO as timestamp,\n\t\tNUMERO_FATURA_ORIGINAL as string,\n\t\tDT_VENCTO_ORIGINAL as timestamp,\n\t\tVLR_FATURA_ORIGINAL_PAGA as decimal(15,2),\n\t\tNUMERO_FATURA_FUTURA as string,\n\t\tUF_COBRANCA as string,\n\t\tCATEGORIA_CLIENTE as string,\n\t\tCONTACONTABIL as string,\n\t\tDESCRCONTACONTABIL as string,\n\t\tTIPO_OPERACAO as string,\n\t\tDONO_RECEITA as string,\n\t\tDT_VENCTO_FATURA_FUTURA as timestamp,\n\t\tVLR_FATURA_FUTURA as decimal(15,2),\n\t\tVLR_CONTESTADO_FUTURO as decimal(15,2),\n\t\tCCM_SERVICO_CONTESTATO as string,\n\t\tDT_VENCTO_BOLETO_ULT as timestamp,\n\t\tCCM_CREDITO as string,\n\t\tMOTIVO_OPERACAO as string,\n\t\tVLR_POS_CONTESTACAO as decimal(15,2),\n\t\tVLR_SALDO_ABERTO as decimal(15,2),\n\t\tFAMILIA_PRODUTOS as string,\n\t\tDT_FECHAMENTO_FATURA as timestamp,\n\t\tREFERENCIA as string,\n\t\tVLR_CONTESTADO_FUTSUM as decimal(15,2)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tNUMERO_NF,\n\t\tDT_EMISSAO_NF = DT_EMISSAO,\n\t\tVLR_TOTAL_NF,\n\t\tSERIE_NF,\n\t\tCONTA_COBRANCA,\n\t\tCNPJ_CPF = CPF_CNPJ,\n\t\tVLR_CONTESTADO,\n\t\tDT_OPERACAO,\n\t\tOPERADORA,\n\t\tCODIGO_OPERADORA,\n\t\tMOTIVO_CONTESTACAO,\n\t\tDT_GERACAO,\n\t\tNUMERO_FATURA_ORIGINAL,\n\t\tDT_VENCTO_ORIGINAL,\n\t\tVLR_FATURA_ORIGINAL_PAGA,\n\t\tNUMERO_FATURA_FUTURA,\n\t\tUF_COBRANCA,\n\t\tCATEGORIA_CLIENTE,\n\t\tCONTACONTABIL,\n\t\tDESCRCONTACONTABIL,\n\t\tTIPO_OPERACAO,\n\t\tDONO_RECEITA,\n\t\tDT_VENCTO_FATURA_FUTURA,\n\t\tVLR_FATURA_FUTURA,\n\t\tVLR_CONTESTADO_FUTURO,\n\t\tCCM_SERVICO_CONTESTATO,\n\t\tDT_VENCTO_BOLETO_ULT,\n\t\tCCM_CREDITO = CMM_CREDITO,\n\t\tMOTIVO_OPERACAO,\n\t\tVLR_POS_CONTESTACAO,\n\t\tVLR_SALDO_ABERTO,\n\t\tFAMILIA_PRODUTOS,\n\t\tDT_FECHAMENTO_FATURA,\n\t\tVLR_CONTESTADO_FUTSUM = VLR_CONTESTADO\n\t)) ~> GravaTabFatCarFF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_fat_car_ff')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_FAT_CAR_FF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoFatCarFNP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_fat_car_fnp",
								"type": "DatasetReference"
							},
							"name": "srcArqFatFNP"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_FAT_CAR_FNP",
								"type": "DatasetReference"
							},
							"name": "GravaTabFatCarFNP"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tvalue as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['fat/validados_a_processar','fat/processados']) ~> srcArqFatFNP\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqFatFNP derive(SyntheticKey = 1,\n\t\tCONTA_COBRANCA = trim(substring(value, 1, 11)),\n\t\tCNPJ_CPF = trim(substring(value, 13, 14)),\n\t\tCATEGORIA_CLIENTE = trim(substring(value, 27, 2)),\n\t\tUF_COBRANCA = trim(substring(value, 29, 2)),\n\t\tID_FATURA = trim(substring(value, 31, 25)),\n\t\tDATA_GERACAO = toTimestamp(trim(substring(value, 56, 8)), 'yyyyMMdd'),\n\t\tDATA_VENCTO_ORIGINAL = toTimestamp(trim(substring(value, 64, 8)), 'yyyyMMdd'),\n\t\tDATA_VENCTO_BOLETO_ULT = toTimestamp(trim(substring(value, 72, 8)), 'yyyyMMdd'),\n\t\tVALOR_FATURA_ORIGINAL = (toDecimal(trim(substring(value, 80, 17))))/100,\n\t\tVALOR_CONTESTADO = (toDecimal(trim(substring(value, 106, 17))))/100,\n\t\tDATA_OPERACAO = toTimestamp(trim(substring(value, 123, 8)), 'yyyyMMdd'),\n\t\tOPERADORA = trim(substring(value, 131, 20)),\n\t\tCODIGO_OPERADORA = trim(substring(value, 151, 3)),\n\t\tMOTIVO_OPERACAO = trim(substring(value, 154, 15)),\n\t\tDONO_RECEITA = trim(substring(value, 169, 3)),\n\t\tCONTA_CONTABIL = trim(substring(value, 172, 11)),\n\t\tDESCR_CONTA_CONTABIL = trim(substring(value, 183, 40)),\n\t\tVALOR_POS_CONTESTACAO = (toDecimal(trim(substring(value, 223, 17))))/100,\n\t\tVALOR_SALDO_ABERTO = (toDecimal(trim(substring(value, 240, 17))))/100,\n\t\tFAMILIA_PRODUTOS = trim(substring(value, 257, 14)),\n\t\tMOTIVO_CONTESTACAO = trim(substring(value, 271, 2)),\n\t\tNUMERO_NF_AJUSTE = trim(substring(value, 273, 13)),\n\t\tSERIE_NF = trim(substring(value, 286, 2)),\n\t\tDATA_EMISSAO_NF = toTimestamp(trim(substring(value, 288, 8)), 'yyyyMMdd'),\n\t\tVALOR_TOTAL_NF = (toDecimal(trim(substring(value, 296, 17))))/100,\n\t\tTIPO_OPERACAO = trim(substring(value, 313, 30)),\n\t\tDATA_FECHAMENTO_FATURA = toTimestamp(trim(substring(value, 343, 8)), 'yyyyMMdd'),\n\t\tCONTA = trim(substring(value, 351, 6)),\n\t\tCCM_CONTESTATO = toDecimal(trim(substring(value, 97, 9)))) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_FAT_CAR_FNP as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tNUMERO_NF_AJUSTE as string,\n\t\tDT_EMISSAO_NF as timestamp,\n\t\tVLR_TOTAL_NF as decimal(15,2),\n\t\tSERIE_NF as string,\n\t\tCONTA_COBRANCA as string,\n\t\tCNPJ_CPF as string,\n\t\tDT_VENCTO_BOLETO_ULT as timestamp,\n\t\tDT_OPERACAO as timestamp,\n\t\tOPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tMOTIVO_CONTESTACAO as string,\n\t\tDT_GERACAO as timestamp,\n\t\tVLR_SALDO_ABERTO as decimal(15,2),\n\t\tUF_COBRANCA as string,\n\t\tCATEGORIA_CLIENTE as string,\n\t\tCONTACONTABIL as string,\n\t\tDESCRCONTACONTABIL as string,\n\t\tVLR_POS_CONTESTACAO as decimal(15,2),\n\t\tTIPO_OPERACAO as string,\n\t\tDONO_RECEITA as string,\n\t\tMOTIVO_OPERACAO as string,\n\t\tFAMILIA_PRODUTOS as string,\n\t\tDT_FECHAMENTO_FATURA as timestamp,\n\t\tDT_VENCTO_ORIGINAL as timestamp,\n\t\tID_FATURA as string,\n\t\tVLR_CONSTESTADO as decimal(15,2),\n\t\tVLR_FATURA_ORIGINAL as decimal(15,2),\n\t\tCCM_CONTESTATO as decimal(10,0),\n\t\tCONTA as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tNUMERO_NF_AJUSTE,\n\t\tDT_EMISSAO_NF = DATA_EMISSAO_NF,\n\t\tVLR_TOTAL_NF = VALOR_TOTAL_NF,\n\t\tSERIE_NF,\n\t\tCONTA_COBRANCA,\n\t\tCNPJ_CPF,\n\t\tDT_VENCTO_BOLETO_ULT = DATA_VENCTO_BOLETO_ULT,\n\t\tDT_OPERACAO = DATA_OPERACAO,\n\t\tOPERADORA,\n\t\tCODIGO_OPERADORA,\n\t\tMOTIVO_CONTESTACAO,\n\t\tDT_GERACAO = DATA_GERACAO,\n\t\tVLR_SALDO_ABERTO = VALOR_SALDO_ABERTO,\n\t\tUF_COBRANCA,\n\t\tCATEGORIA_CLIENTE,\n\t\tCONTACONTABIL = CONTA_CONTABIL,\n\t\tDESCRCONTACONTABIL = DESCR_CONTA_CONTABIL,\n\t\tVLR_POS_CONTESTACAO = VALOR_POS_CONTESTACAO,\n\t\tTIPO_OPERACAO,\n\t\tDONO_RECEITA,\n\t\tMOTIVO_OPERACAO,\n\t\tFAMILIA_PRODUTOS,\n\t\tDT_FECHAMENTO_FATURA = DATA_FECHAMENTO_FATURA,\n\t\tDT_VENCTO_ORIGINAL = DATA_VENCTO_ORIGINAL,\n\t\tID_FATURA,\n\t\tVLR_CONSTESTADO = VALOR_CONTESTADO,\n\t\tVLR_FATURA_ORIGINAL = VALOR_FATURA_ORIGINAL,\n\t\tCCM_CONTESTATO,\n\t\tCONTA\n\t)) ~> GravaTabFatCarFNP"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_fat_car_fnp')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_FAT_CAR_FNP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoKenanContestada')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_contestada",
								"type": "DatasetReference"
							},
							"name": "srcArqKenanContestada"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_FATURA_CON_KENAN",
								"type": "DatasetReference"
							},
							"name": "GravaTabFaturaConKenan"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCONTA_COBRANCA as string,\n\t\tCNPJ_CPF as string,\n\t\tCATEGORIA_CLIENTE as string,\n\t\t{UF_COBRANÃ‡A} as string,\n\t\tID_FATURA as string,\n\t\tID_FATURA_ORIGEM as string,\n\t\tDATA_VENCTO_ORIGINAL as date 'dd/MM/yyyy',\n\t\tDATA_VENCTO_BOLETO_OU_BAIXA as date 'dd/MM/yyyy',\n\t\tVALOR_FATURA as string,\n\t\tVALOR_CONTESTADO as string,\n\t\tVALOR_PAGAMENTO as string,\n\t\tVALOR_PAGTO_CREDITO_ANTERIOR as string,\n\t\tDATA_PAGTO as date 'dd/MM/yyyy',\n\t\tDATA_FECHAMENTO_FATURA as timestamp 'dd/MM/yyyy HH:mm:ss',\n\t\tDATA_EMISSAO as timestamp 'dd/MM/yyyy HH:mm:ss',\n\t\tDATA_AJUSTE as date 'dd/MM/yyyy'\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['kenan/validados_a_processar','kenan/processados']) ~> srcArqKenanContestada\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(28,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqKenanContestada derive(SyntheticKey = 1,\n\t\tVALOR_FATURA = toDecimal(replace(toString(VALOR_FATURA), ',' , '.')),\n\t\tVALOR_CONTESTADO = toDecimal(replace(toString(VALOR_CONTESTADO), ',' , '.')),\n\t\tVALOR_PAGAMENTO = toDecimal(replace(toString(VALOR_PAGAMENTO), ',' , '.')),\n\t\tVALOR_PAGTO_CREDITO_ANTERIOR = toDecimal(replace(toString(VALOR_PAGTO_CREDITO_ANTERIOR), ',' , '.'))) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_FATURA_CON_KENAN as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCONTA_COBRANCA as string,\n\t\tCPF_CNPJ as string,\n\t\tCATEGORIA_CLIENTE as string,\n\t\tUF_COBRANCA as string,\n\t\tID_FATURA as string,\n\t\tID_FATURA_ORIGEM as string,\n\t\tDT_VENCTO_ORIGINAL as date,\n\t\tDT_VENCTO_BOLETO_BAIXA as date,\n\t\tVLR_FATURA as decimal(15,2),\n\t\tVLR_CONTESTADO as decimal(15,2),\n\t\tVLR_PAGAMENTO as decimal(15,2),\n\t\tVLR_PGTO_CREDITO_ANT as decimal(15,2),\n\t\tDT_PAGAMENTO as date,\n\t\tDT_FECHA_FATURA as timestamp,\n\t\tDT_EMISSAO as timestamp,\n\t\tDT_AJUSTE as date,\n\t\tSTEP_EXECUTION_ID as decimal(19,0),\n\t\tJOB_EXECUTION_ID as decimal(19,0),\n\t\tDT_REFERENCIA as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCONTA_COBRANCA,\n\t\tCPF_CNPJ = CNPJ_CPF,\n\t\tCATEGORIA_CLIENTE,\n\t\tID_FATURA,\n\t\tID_FATURA_ORIGEM,\n\t\tDT_VENCTO_ORIGINAL = DATA_VENCTO_ORIGINAL,\n\t\tDT_VENCTO_BOLETO_BAIXA = DATA_VENCTO_BOLETO_OU_BAIXA,\n\t\tVLR_FATURA = VALOR_FATURA,\n\t\tVLR_CONTESTADO = VALOR_CONTESTADO,\n\t\tVLR_PAGAMENTO = VALOR_PAGAMENTO,\n\t\tVLR_PGTO_CREDITO_ANT = VALOR_PAGTO_CREDITO_ANTERIOR,\n\t\tDT_PAGAMENTO = DATA_PAGTO,\n\t\tDT_FECHA_FATURA = DATA_FECHAMENTO_FATURA,\n\t\tDT_EMISSAO = DATA_EMISSAO,\n\t\tDT_AJUSTE = DATA_AJUSTE,\n\t\tUF_COBRANCA = {UF_COBRANÃ‡A}\n\t)) ~> GravaTabFaturaConKenan"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_kenan_contestada')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_FATURA_CON_KENAN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoKenanDetalhe')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_detalhe",
								"type": "DatasetReference"
							},
							"name": "srcArqKenanDetalhe"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_FATURA_DET_KENAN",
								"type": "DatasetReference"
							},
							"name": "GravaTabContestacoesAtlysRcbl"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCONTA_COBRANCA as string,\n\t\tCNPJ_CPF as string,\n\t\tID_FATURA as string,\n\t\tOPEN_ITEM_ID as string,\n\t\tID_DETALHE as string,\n\t\tID_OPERADORA as string,\n\t\tDESCR_OPERADORA as string,\n\t\tTIPO_DETALHE as string,\n\t\tDESCR_DETALHE as string,\n\t\tTIPO_INSTANCIA as string,\n\t\tINSTANCIA as string,\n\t\tVALOR_BRUTO as string,\n\t\tVALOR_CONTESTADO as string,\n\t\tVALOR_IMPOSTO_ICMS as string,\n\t\tVALOR_OUTROS_IMPOSTOS as string,\n\t\tVALOR_IMPOSTO_CONTESTADO as string,\n\t\tCC_CR_AJUSTE as string,\n\t\tCC_DB_AJUSTE as string,\n\t\tCC_CREDITO_FAT as string,\n\t\tCC_DEBITO_FAT as string,\n\t\tCC_CREDITO_IMPOSTO as string,\n\t\tCC_DEBITO_IMPOSTO as string,\n\t\tDESCR_CONTESTACAO as string,\n\t\tDESCR_MOTIVO as string,\n\t\tDATA_CONTESTACAO as timestamp 'dd/MM/yyyy HH:mm:ss',\n\t\tACCOUNT_NO as string,\n\t\tSUBTYPE_CODE as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['kenan/validados_a_processar','kenan/processados']) ~> srcArqKenanDetalhe\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqKenanDetalhe derive(SyntheticKey = 1,\n\t\tID_DETALHE = toDecimal(replace(toString(ID_DETALHE), ',' , '.')),\n\t\tVALOR_BRUTO = toDecimal(replace(toString(VALOR_BRUTO), ',' , '.')),\n\t\tVALOR_CONTESTADO = toDecimal(replace(toString(VALOR_CONTESTADO), ',' , '.')),\n\t\tVALOR_IMPOSTO_ICMS = toDecimal(replace(toString(VALOR_IMPOSTO_ICMS), ',' , '.')),\n\t\tVALOR_OUTROS_IMPOSTOS = toDecimal(replace(toString(VALOR_OUTROS_IMPOSTOS), ',' , '.')),\n\t\tVALOR_IMPOSTO_CONTESTADO = toDecimal(replace(toString(VALOR_IMPOSTO_CONTESTADO), ',' , '.')),\n\t\tSUBTYPE_CODE = toDecimal(replace(toString(SUBTYPE_CODE), ',' , '.'))) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_FATURA_DET_KENAN as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCONTA_COBRANCA as string,\n\t\tCPF_CNPJ as string,\n\t\tID_FATURA as string,\n\t\tID_OPEN_ITEM as string,\n\t\tID_DETALHE as decimal(10,0),\n\t\tID_OPERADORA as string,\n\t\tDESC_OPERADORA as string,\n\t\tTIPO_DETALHE as string,\n\t\tDESC_DETALHE as string,\n\t\tTIPO_INSTANCIA as string,\n\t\tNUM_INSTANCIA as string,\n\t\tVLR_BRUTO as decimal(15,2),\n\t\tVLR_CONTESTADO as decimal(15,2),\n\t\tVLR_IMPOSTO_ICMS as decimal(15,2),\n\t\tVLR_OUTROS_IMPOSTOS as decimal(15,2),\n\t\tVLR_IMPOSTO_CONSTESTADO as decimal(15,2),\n\t\tCC_CR_AJUSTE as string,\n\t\tCC_DB_AJUSTE as string,\n\t\tCC_CREDITO_FAT as string,\n\t\tCC_DEBITO_FAT as string,\n\t\tCC_CREDITO_IMPOSTO as string,\n\t\tCC_DEBITO_IMPOSTO as string,\n\t\tDESC_CONTESTACAO as string,\n\t\tDESC_MOTIVO as string,\n\t\tDT_CONTESTACAO as date,\n\t\tACCOUNT_NO as string,\n\t\tSUBTYPE_CODE as decimal(19,0),\n\t\tSTEP_EXECUTION_ID as decimal(19,0),\n\t\tJOB_EXECUTION_ID as decimal(19,0)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCONTA_COBRANCA,\n\t\tCPF_CNPJ = CNPJ_CPF,\n\t\tID_FATURA,\n\t\tID_OPEN_ITEM = OPEN_ITEM_ID,\n\t\tID_DETALHE,\n\t\tID_OPERADORA,\n\t\tDESC_OPERADORA = DESCR_OPERADORA,\n\t\tTIPO_DETALHE,\n\t\tDESC_DETALHE = DESCR_DETALHE,\n\t\tTIPO_INSTANCIA,\n\t\tNUM_INSTANCIA = INSTANCIA,\n\t\tVLR_BRUTO = VALOR_BRUTO,\n\t\tVLR_CONTESTADO = VALOR_CONTESTADO,\n\t\tVLR_IMPOSTO_ICMS = VALOR_IMPOSTO_ICMS,\n\t\tVLR_OUTROS_IMPOSTOS = VALOR_OUTROS_IMPOSTOS,\n\t\tVLR_IMPOSTO_CONSTESTADO = VALOR_IMPOSTO_CONTESTADO,\n\t\tCC_CR_AJUSTE,\n\t\tCC_DB_AJUSTE,\n\t\tCC_CREDITO_FAT,\n\t\tCC_DEBITO_FAT,\n\t\tCC_CREDITO_IMPOSTO,\n\t\tCC_DEBITO_IMPOSTO,\n\t\tDESC_CONTESTACAO = DESCR_CONTESTACAO,\n\t\tDESC_MOTIVO = DESCR_MOTIVO,\n\t\tDT_CONTESTACAO = DATA_CONTESTACAO,\n\t\tACCOUNT_NO,\n\t\tSUBTYPE_CODE\n\t)) ~> GravaTabContestacoesAtlysRcbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_kenan_detalhe')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_FATURA_DET_KENAN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoKenanItem')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_Item",
								"type": "DatasetReference"
							},
							"name": "srcArqKenanItem"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_FATURA_ITEM_KENAN",
								"type": "DatasetReference"
							},
							"name": "GravaTabContestacoesAtlysRcbl"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCONTA_COBRANCA as string,\n\t\tCNPJ_CPF as string,\n\t\tNUMERO_FATURA as string,\n\t\tOPEN_ITEM_ID as string,\n\t\tDESCR_OPEN_ITEM as string,\n\t\tVALOR_ITEM as string,\n\t\tVALOR_CONTESTADO as string,\n\t\tVALOR_PAGO_ITEM as string,\n\t\tFECHAMENTO_SALDO_ABERTO_ITEM as timestamp 'dd/MM/yyyy HH:mm:ss',\n\t\tNOTA_FISCAL as string,\n\t\tUF_NF as string,\n\t\tSERIE_NF as string,\n\t\tSUBSERIE_NF as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['kenan/validados_a_processar','kenan/processados']) ~> srcArqKenanItem\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqKenanItem derive(SyntheticKey = 1,\n\t\tVALOR_ITEM = toDecimal(replace(toString(VALOR_ITEM), ',' , '.')),\n\t\tVALOR_CONTESTADO = toDecimal(replace(toString(VALOR_CONTESTADO), ',' , '.')),\n\t\tVALOR_PAGO_ITEM = toDecimal(replace(toString(VALOR_PAGO_ITEM), ',' , '.'))) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_FATURA_ITEM_KENAN as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCONTA_COBRANCA as string,\n\t\tCPF_CNPJ as string,\n\t\tID_FATURA as string,\n\t\tID_OPEN_ITEM as string,\n\t\tDESC_OPEN_ITEM as string,\n\t\tVLR_ITEM as decimal(15,2),\n\t\tVLR_CONTESTADO as decimal(15,2),\n\t\tVLR_PAGO_ITEM as decimal(15,2),\n\t\tDT_FECHA_SALDO_ITEM as date,\n\t\tNOTA_FISCAL as string,\n\t\tUF_NF as string,\n\t\tSERIE_NF as string,\n\t\tSUBSERIE_NF as string,\n\t\tSTEP_EXECUTION_ID as decimal(19,0),\n\t\tJOB_EXECUTION_ID as decimal(19,0)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCONTA_COBRANCA,\n\t\tCPF_CNPJ = CNPJ_CPF,\n\t\tID_FATURA = NUMERO_FATURA,\n\t\tID_OPEN_ITEM = OPEN_ITEM_ID,\n\t\tDESC_OPEN_ITEM = DESCR_OPEN_ITEM,\n\t\tVLR_ITEM = VALOR_ITEM,\n\t\tVLR_CONTESTADO = VALOR_CONTESTADO,\n\t\tVLR_PAGO_ITEM = VALOR_PAGO_ITEM,\n\t\tDT_FECHA_SALDO_ITEM = FECHAMENTO_SALDO_ABERTO_ITEM,\n\t\tNOTA_FISCAL,\n\t\tUF_NF,\n\t\tSERIE_NF,\n\t\tSUBSERIE_NF\n\t)) ~> GravaTabContestacoesAtlysRcbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_kenan_Item')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_FATURA_ITEM_KENAN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoRecebiveisAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atlys_rcbl",
								"type": "DatasetReference"
							},
							"name": "srcArqAtlysRcbl"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_ATLYS_RCBL",
								"type": "DatasetReference"
							},
							"name": "GravaTabContestacoesAtlysRcbl"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tCLIENTE_ID as string,\n\t\tNOMECLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCLASSE_RECEBER as string,\n\t\tOPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tNUMERO_FATURA as string,\n\t\tMES_ANO_REFERENTE as string,\n\t\tVALOR_DOCTO_ORIGINAL as string,\n\t\tFATURA_ATRIBUIDA as string,\n\t\tMESANOFATURA as string,\n\t\tVALOR_FATURA as string,\n\t\tSALDO_DEVIDO_ORIG as string,\n\t\tDATA_EMISSAO_FATURA as date 'yyyyMMdd',\n\t\tVALOR_TOTAL_PAGAMENTO as string,\n\t\tDATA_FEBRABAN as date 'yyyyMMdd',\n\t\tVALOR_ATRIBUICAO as string,\n\t\tUF as string,\n\t\tDATA_ATRIBUICAO_PGTO as date 'yyyyMMdd',\n\t\tHORA_ATRIBUICAO_PGTO as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['atlys/validados_a_processar','atlys/processados']) ~> srcArqAtlysRcbl\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nsrcArqAtlysRcbl derive(SyntheticKey = 1,\n\t\tNEW_VALOR_DOCTO_ORIGINAL = replace(VALOR_DOCTO_ORIGINAL, ',' , '.'),\n\t\tNEW_VALOR_FATURA = replace(VALOR_FATURA, ',' , '.'),\n\t\tNEW_SALDO_DEVIDO_ORIG = replace(SALDO_DEVIDO_ORIG, ',' , '.'),\n\t\tNEW_VALOR_TOTAL_PAGAMENTO = replace(VALOR_TOTAL_PAGAMENTO, ',' , '.'),\n\t\tNEW_VALOR_ATRIBUICAO = replace(VALOR_ATRIBUICAO, ',' , '.')) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_ATLYS_RCBL as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tID_CLIENTE as string,\n\t\tNOME_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCLASSE_RECEBER as string,\n\t\tOPERADORA as string,\n\t\tCODIGO_OPERADORA as string,\n\t\tNUMERO_FATURA as string,\n\t\tMES_ANO_REFERENTE as string,\n\t\tVALOR_DOCTO_ORIGINAL as decimal(15,2),\n\t\tFATURA_ATRIBUIDA as string,\n\t\tMES_ANO_FATURA as string,\n\t\tVALOR_FATURA as decimal(15,2),\n\t\tSALDO_DEVIDO_ORIG as decimal(15,2),\n\t\tDATA_EMISSAO_FATURA as timestamp,\n\t\tVALOR_TOTAL_PAGAMENTO as decimal(15,2),\n\t\tDATA_FEBRABAN as timestamp,\n\t\tVALOR_ATRIBUICAO as decimal(15,2),\n\t\tUF as string,\n\t\tDATA_ATRIBUICAO_PGTO as timestamp,\n\t\tHORA_ATRIBUICAO_PGTO as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tID_CLIENTE = CLIENTE_ID,\n\t\tNOME_CLIENTE = NOMECLIENTE,\n\t\tCNPJ_CPF,\n\t\tCONTA_CLIENTE,\n\t\tCLASSE_RECEBER,\n\t\tOPERADORA,\n\t\tCODIGO_OPERADORA,\n\t\tNUMERO_FATURA,\n\t\tMES_ANO_REFERENTE,\n\t\tVALOR_DOCTO_ORIGINAL = NEW_VALOR_DOCTO_ORIGINAL,\n\t\tFATURA_ATRIBUIDA,\n\t\tMES_ANO_FATURA = MESANOFATURA,\n\t\tVALOR_FATURA = NEW_VALOR_FATURA,\n\t\tSALDO_DEVIDO_ORIG = NEW_SALDO_DEVIDO_ORIG,\n\t\tDATA_EMISSAO_FATURA,\n\t\tVALOR_TOTAL_PAGAMENTO = NEW_VALOR_TOTAL_PAGAMENTO,\n\t\tDATA_FEBRABAN,\n\t\tVALOR_ATRIBUICAO = NEW_VALOR_ATRIBUICAO,\n\t\tUF,\n\t\tDATA_ATRIBUICAO_PGTO,\n\t\tHORA_ATRIBUICAO_PGTO\n\t)) ~> GravaTabContestacoesAtlysRcbl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_atlys_rcbl')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_ATLYS_RCBL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoVivoNextK16')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VivoNext"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_vivo_next_K16",
								"type": "DatasetReference"
							},
							"name": "srcArqVivoNextK16"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cvtb_vivo_next_k16",
								"type": "DatasetReference"
							},
							"name": "GravaTabVivoNextK16"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						},
						{
							"name": "SelecaoColunas"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\tProp_0 as string,\n\t\tProp_1 as string,\n\t\tProp_2 as string,\n\t\tProp_3 as string,\n\t\tProp_4 as string,\n\t\tProp_5 as string,\n\t\tProp_6 as string,\n\t\tProp_7 as string,\n\t\tProp_8 as string,\n\t\tProp_9 as string,\n\t\tProp_10 as string,\n\t\tProp_11 as string,\n\t\tProp_12 as string,\n\t\tProp_13 as string,\n\t\tProp_14 as string,\n\t\tProp_15 as string,\n\t\tProp_16 as string,\n\t\tProp_17 as string,\n\t\tProp_18 as string,\n\t\tProp_19 as string,\n\t\tProp_20 as string,\n\t\tProp_21 as string,\n\t\tProp_22 as string,\n\t\tProp_23 as string,\n\t\tProp_24 as string,\n\t\tProp_25 as string,\n\t\tProp_26 as string,\n\t\tProp_27 as string,\n\t\tProp_28 as string,\n\t\tProp_29 as string,\n\t\tProp_30 as string,\n\t\tProp_31 as string,\n\t\tProp_32 as string,\n\t\tProp_33 as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['vivonext/validados_a_processar','vivonext/processados'],\n\tpreferredFractionalType: 'decimal') ~> srcArqVivoNextK16\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(28,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nSelecaoColunas derive(SyntheticKey = 1,\n\t\tVALOR_ORIG_NFST = toDecimal(replace(toString(VALOR_ORIG_NFST), ',' , '.')),\n\t\tVALOR_CONTEST_AJUSTE_CANC = toDecimal(replace(toString(VALOR_CONTEST_AJUSTE_CANC), ',' , '.')),\n\t\tVALOR_ALOCADO = toDecimal(replace(toString(VALOR_ALOCADO), ',' , '.')),\n\t\tVALOR_DOCTO_ORIGINAL = toDecimal(replace(toString(VALOR_DOCTO_ORIGINAL), ',' , '.')),\n\t\tVALOR_FATURA = toDecimal(replace(toString(VALOR_FATURA), ',' , '.')),\n\t\tSALDO_DEVEDOR = toDecimal(replace(toString(SALDO_DEVEDOR), ',' , '.')),\n\t\tDATA_EMISSAO_NFST = toTimestamp(DATA_EMISSAO_NFST, 'yyyyMMdd'),\n\t\tDATA_AJUSTE = toTimestamp(DATA_AJUSTE, 'yyyyMMdd'),\n\t\tDATA_ALOCACAO = toTimestamp(DATA_AJUSTE, 'yyyyMMdd'),\n\t\tDATA_EMISSAO_FATURA_2 = toTimestamp(DATA_EMISSAO_FATURA_2, 'yyyyMMdd'),\n\t\tDATA_EMISSAO_FATURA = toTimestamp(DATA_EMISSAO_FATURA, 'yyyyMMdd')) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nsrcArqVivoNextK16 select(mapColumn(\n\t\tCLIENTE_ID = Prop_0,\n\t\tNOTA_FISCAL = Prop_1,\n\t\tDATA_EMISSAO_NFST = Prop_2,\n\t\tVALOR_ORIG_NFST = Prop_3,\n\t\tSERIE = Prop_4,\n\t\tUF = Prop_5,\n\t\tCONTA_CLIENTE = Prop_6,\n\t\tCNPJ_CPF = Prop_7,\n\t\tNOME_CLIENTE = Prop_8,\n\t\tTERMINAL = Prop_9,\n\t\tVALOR_CONTEST_AJUSTE_CANC = Prop_10,\n\t\tDATA_AJUSTE = Prop_11,\n\t\tHORA_AJUSTE = Prop_12,\n\t\tVALOR_ALOCADO = Prop_13,\n\t\tDATA_ALOCACAO = Prop_14,\n\t\tHORA_ALOCACAO = Prop_15,\n\t\tOPERADORA = Prop_16,\n\t\tCODIGO_OPERADORA = Prop_17,\n\t\tCODIGO_MOTIVO_AJUSTE = Prop_18,\n\t\tDESCRITIVO_MOTIVO_AJUSTE = Prop_19,\n\t\tCREDIT_ID = Prop_20,\n\t\tCONTA_CONTABIL = Prop_21,\n\t\tDESCR_CONTA_CONTABIL = Prop_22,\n\t\tNUMERO_FATURA = Prop_23,\n\t\tVALOR_DOCTO_ORIGINAL = Prop_24,\n\t\tDATA_EMISSAO_FATURA = Prop_25,\n\t\tFATU_ALOCADA = Prop_26,\n\t\tDATA_EMISSAO_FATURA_2 = Prop_27,\n\t\tMESANOFATURA = Prop_28,\n\t\tVALOR_FATURA = Prop_29,\n\t\tSALDO_DEVEDOR = Prop_30,\n\t\tDEBIT_ID = Prop_31,\n\t\tCOD_TIPO_RECEBIVEIS = Prop_32,\n\t\tDESCR_TIPO_RECEBIVEIS = Prop_33\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelecaoColunas\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_VIVO_NEXT_K16 as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCLIENTE_ID as string,\n\t\tNOTA_FISCAL as string,\n\t\tDT_EMISSAO_NFST as timestamp,\n\t\tVL_ORIG_NFST as decimal(15,2),\n\t\tSERIE as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tNOME_CLIENTE as string,\n\t\tTERMINAL as string,\n\t\tVL_CONTEST_AJUSTE as decimal(15,2),\n\t\tVL_ALOCADO as decimal(15,2),\n\t\tDT_ALOCACAO as timestamp,\n\t\tHR_ALOCACAO as string,\n\t\tDT_AJUSTE as timestamp,\n\t\tHR_AJUSTE as string,\n\t\tOPERADORA as string,\n\t\tCD_OPERADORA as string,\n\t\tCD_MOTIVO_AJUSTE as string,\n\t\tDS_MOTIVO_AJUSTE as string,\n\t\tNUMERO_FATURA as string,\n\t\tFATU_ALOCADA as string,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tMESANOFATURA as string,\n\t\tVL_DOCTO_ORIGINAL as decimal(15,2),\n\t\tSALDO_DEVEDOR as decimal(15,2),\n\t\tCONTA_CONTABIL as string,\n\t\tDS_CONTA_CONTABIL as string,\n\t\tVL_FATURA as decimal(15,2),\n\t\tCD_TIPO_RECEBIVEIS as string,\n\t\tDS_TIPO_RECEBIVEIS as string,\n\t\tDEBIT_ID as string,\n\t\tCREDIT_ID as string,\n\t\tUF as string,\n\t\tDT_EMISSAO_FATURA_2 as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCLIENTE_ID,\n\t\tNOTA_FISCAL,\n\t\tDT_EMISSAO_NFST = DATA_EMISSAO_NFST,\n\t\tVL_ORIG_NFST = VALOR_ORIG_NFST,\n\t\tSERIE,\n\t\tCONTA_CLIENTE,\n\t\tCNPJ_CPF,\n\t\tNOME_CLIENTE,\n\t\tTERMINAL,\n\t\tVL_CONTEST_AJUSTE = VALOR_CONTEST_AJUSTE_CANC,\n\t\tVL_ALOCADO = VALOR_ALOCADO,\n\t\tDT_ALOCACAO = DATA_ALOCACAO,\n\t\tHR_ALOCACAO = HORA_ALOCACAO,\n\t\tDT_AJUSTE = DATA_AJUSTE,\n\t\tHR_AJUSTE = HORA_AJUSTE,\n\t\tOPERADORA,\n\t\tCD_OPERADORA = CODIGO_OPERADORA,\n\t\tCD_MOTIVO_AJUSTE = CODIGO_MOTIVO_AJUSTE,\n\t\tDS_MOTIVO_AJUSTE = DESCRITIVO_MOTIVO_AJUSTE,\n\t\tNUMERO_FATURA,\n\t\tFATU_ALOCADA,\n\t\tDT_EMISSAO_FATURA = DATA_EMISSAO_FATURA,\n\t\tMESANOFATURA,\n\t\tVL_DOCTO_ORIGINAL = VALOR_DOCTO_ORIGINAL,\n\t\tSALDO_DEVEDOR,\n\t\tCONTA_CONTABIL,\n\t\tDS_CONTA_CONTABIL = DESCR_CONTA_CONTABIL,\n\t\tVL_FATURA = VALOR_FATURA,\n\t\tCD_TIPO_RECEBIVEIS = COD_TIPO_RECEBIVEIS,\n\t\tDS_TIPO_RECEBIVEIS = DESCR_TIPO_RECEBIVEIS,\n\t\tDEBIT_ID,\n\t\tCREDIT_ID,\n\t\tUF,\n\t\tDT_EMISSAO_FATURA_2 = DATA_EMISSAO_FATURA_2\n\t)) ~> GravaTabVivoNextK16"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_vivo_next_K16')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/cvtb_vivo_next_k16')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfGravaArquivoVivoNextK17')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VivoNext"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_vivo_next_K17",
								"type": "DatasetReference"
							},
							"name": "srcArqVivoNextK17"
						},
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLoteArqAtual"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cvtb_vivo_next_k17",
								"type": "DatasetReference"
							},
							"name": "GravaTabVivoNextK17"
						}
					],
					"transformations": [
						{
							"name": "FakeKey2"
						},
						{
							"name": "FakeKey1"
						},
						{
							"name": "Join"
						},
						{
							"name": "select1"
						}
					],
					"script": "parameters{\n\tpNomeArquivo as string\n}\nsource(output(\n\t\t{_col0_} as string,\n\t\t{_col1_} as string,\n\t\t{_col2_} as string,\n\t\t{_col3_} as string,\n\t\t{_col4_} as string,\n\t\t{_col5_} as string,\n\t\t{_col6_} as string,\n\t\t{_col7_} as string,\n\t\t{_col8_} as string,\n\t\t{_col9_} as string,\n\t\t{_col10_} as string,\n\t\t{_col11_} as string,\n\t\t{_col12_} as string,\n\t\t{_col13_} as string,\n\t\t{_col14_} as string,\n\t\t{_col15_} as string,\n\t\t{_col16_} as string,\n\t\t{_col17_} as string,\n\t\t{_col18_} as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['vivonext/validados_a_processar','vivonext/processados']) ~> srcArqVivoNextK17\nsource(output(\n\t\tID_LOTE_ARQUIVO as decimal(38,0)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (\"SELECT ID_LOTE_ARQUIVO FROM CONVENIO.CVTB_LOTE_ARQUIVO WHERE NM_ARQUIVO = '{$pNomeArquivo}'\"),\n\tformat: 'query') ~> BuscaLoteArqAtual\nBuscaLoteArqAtual derive(SyntheticKey = 1) ~> FakeKey2\nselect1 derive(SyntheticKey = 1,\n\t\tVALOR_FATURA = toDecimal(replace(toString(VALOR_FATURA), ',' , '.')),\n\t\tSALDO_DEVIDO_ORIG = toDecimal(replace(toString(SALDO_DEVIDO_ORIG), ',' , '.')),\n\t\tVALOR_TOTAL_PAGAMENTO = toDecimal(replace(toString(VALOR_TOTAL_PAGAMENTO), ',' , '.')),\n\t\tVALOR_PGTO_ALOCADO = toDecimal(replace(toString(VALOR_PGTO_ALOCADO), ',' , '.')),\n\t\tMES_ANO_FATURA = trim(MES_ANO_FATURA),\n\t\tDATA_EMISSAO_FATURA = toTimestamp(DATA_EMISSAO_FATURA, 'yyyyMMdd'),\n\t\tDATA_PAGAMENTO = toTimestamp(DATA_PAGAMENTO, 'yyyyMMdd')) ~> FakeKey1\nFakeKey1, FakeKey2 join(FakeKey1@SyntheticKey == FakeKey2@SyntheticKey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join\nsrcArqVivoNextK17 select(mapColumn(\n\t\tCLIENTE_ID = {_col0_},\n\t\tNOME_CLIENTE = {_col1_},\n\t\tCNPJ_CPF = {_col2_},\n\t\tCONTA_CLIENTE = {_col3_},\n\t\tMES_ANO_FATURA = {_col4_},\n\t\tVALOR_FATURA = {_col5_},\n\t\tSALDO_DEVIDO_ORIG = {_col6_},\n\t\tDATA_EMISSAO_FATURA = {_col7_},\n\t\tVALOR_TOTAL_PAGAMENTO = {_col8_},\n\t\tDATA_PAGAMENTO = {_col9_},\n\t\tVALOR_PGTO_ALOCADO = {_col10_},\n\t\tCOD_TIPO_RECEBIVEIS = {_col11_},\n\t\tDESCR_TIPO_RECEBIVEIS = {_col12_},\n\t\tOPERADORA = {_col13_},\n\t\tCOD_OPERADORA = {_col14_},\n\t\tFATU_ALOCADA = {_col15_},\n\t\tDEBIT_ID = {_col16_},\n\t\tCREDIT_ID = {_col17_}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nJoin sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_VIVO_NEXT_K17 as decimal(28,0),\n\t\tID_LOTE_ARQUIVO as decimal(28,0),\n\t\tCLIENTE_ID as string,\n\t\tCONTA_CLIENTE as string,\n\t\tCNPJ_CPF as string,\n\t\tNOME_CLIENTE as string,\n\t\tOPERADORA as string,\n\t\tCD_OPERADORA as string,\n\t\tFATU_ALOCADA as string,\n\t\tDT_EMISSAO_FATURA as timestamp,\n\t\tMESANOFATURA as string,\n\t\tSALDO_DEVIDO_ORIG as decimal(15,2),\n\t\tVL_FATURA as decimal(15,2),\n\t\tCD_TIPO_RECEBIVEIS as string,\n\t\tDS_TIPO_RECEBIVEIS as string,\n\t\tDEBIT_ID as string,\n\t\tCREDIT_ID as string,\n\t\tDT_PAGAMENTO as timestamp,\n\t\tVL_PGTO_ALOCADO as decimal(15,2),\n\t\tVL_TOTAL_PAGAMENTO as decimal(15,2)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID_LOTE_ARQUIVO,\n\t\tCLIENTE_ID,\n\t\tCONTA_CLIENTE,\n\t\tCNPJ_CPF,\n\t\tNOME_CLIENTE,\n\t\tOPERADORA,\n\t\tCD_OPERADORA = COD_OPERADORA,\n\t\tFATU_ALOCADA,\n\t\tDT_EMISSAO_FATURA = DATA_EMISSAO_FATURA,\n\t\tMESANOFATURA = MES_ANO_FATURA,\n\t\tSALDO_DEVIDO_ORIG,\n\t\tVL_FATURA = VALOR_FATURA,\n\t\tCD_TIPO_RECEBIVEIS = COD_TIPO_RECEBIVEIS,\n\t\tDS_TIPO_RECEBIVEIS = DESCR_TIPO_RECEBIVEIS,\n\t\tDEBIT_ID,\n\t\tCREDIT_ID,\n\t\tDT_PAGAMENTO = DATA_PAGAMENTO,\n\t\tVL_PGTO_ALOCADO = VALOR_PGTO_ALOCADO,\n\t\tVL_TOTAL_PAGAMENTO = VALOR_TOTAL_PAGAMENTO\n\t)) ~> GravaTabVivoNextK17"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_vivo_next_K17')]",
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/cvtb_vivo_next_k17')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfLayoutAjustadoAtis')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLayoutCorrigido"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_ATLYS_ADJ",
								"type": "DatasetReference"
							},
							"name": "GravaArquivoAtlysCorrigido"
						}
					],
					"transformations": [
						{
							"name": "SeparaEmColunas"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pIdLoteArquivo as string",
						"}",
						"source(output(",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"SELECT ID_LOTE_ARQUIVO, DS_LINHA_RECUPERADA FROM CONVENIO.CVTB_CARGA_ERRO_LAYOUT WHERE FL_CORRIGIDO='S' AND DS_LINHA_RECUPERADA IS NOT NULL AND ID_LOTE_ARQUIVO=CONVERT(NUMERIC(28),{$pIdLoteArquivo})\"),",
						"     format: 'query') ~> BuscaLayoutCorrigido",
						"BuscaLayoutCorrigido derive(ID_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[1],",
						"          NOTA_FISCAL = split(DS_LINHA_RECUPERADA, '|')[2],",
						"          DT_EMISSAO_NF = toDate(split(DS_LINHA_RECUPERADA, '|')[3], 'yyyyMMdd'),",
						"          VLR_ORIG_NFST = replace((split(DS_LINHA_RECUPERADA, '|')[4]), \",\", \".\"),",
						"          SERIE = split(DS_LINHA_RECUPERADA, '|')[5],",
						"          CONTA_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[6],",
						"          CNPJ_CPF = split(DS_LINHA_RECUPERADA, '|')[7],",
						"          NOM_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[8],",
						"          NUM_TERMINAL = split(DS_LINHA_RECUPERADA, '|')[9],",
						"          VLR_CONTEST_AJUSTE = replace((split(DS_LINHA_RECUPERADA, '|')[10]), \",\", \".\"),",
						"          VLR_ATRIBUIDO = replace((split(DS_LINHA_RECUPERADA, '|')[11]),\",\", \".\"),",
						"          DT_ATRIBUICAO = toDate(split(DS_LINHA_RECUPERADA, '|')[12], 'yyyyMMdd'),",
						"          HR_ATRIBUICAO = split(DS_LINHA_RECUPERADA, '|')[13],",
						"          DT_AJUSTE = toDate(split(DS_LINHA_RECUPERADA, '|')[14], 'yyyyMMdd'),",
						"          HR_AJUSTE = split(DS_LINHA_RECUPERADA, '|')[15],",
						"          OPERADORA = split(DS_LINHA_RECUPERADA, '|')[16],",
						"          CODIGO_OPERADORA = split(DS_LINHA_RECUPERADA, '|')[17],",
						"          COD_MOTIVO_AJUSTES = split(DS_LINHA_RECUPERADA, '|')[18],",
						"          DESC_MOTIVO_AJUSTE = split(DS_LINHA_RECUPERADA, '|')[19],",
						"          DATA_ABERTURA_IMPU = toDate(split(DS_LINHA_RECUPERADA, '|')[20], 'yyyyMMdd'),",
						"          DATA_FECH_IMPUG = toDate(split(DS_LINHA_RECUPERADA, '|')[21], 'yyyyMMdd'),",
						"          DSPUT_ID = split(DS_LINHA_RECUPERADA, '|')[22],",
						"          TP_NOTA_FISCAL = split(DS_LINHA_RECUPERADA, '|')[23],",
						"          CLASSE_RECEBER = split(DS_LINHA_RECUPERADA, '|')[24],",
						"          CONTA_CONTABIL = split(DS_LINHA_RECUPERADA, '|')[25],",
						"          DESCR_CONTA_CONTABIL = split(DS_LINHA_RECUPERADA, '|')[26],",
						"          NUMERO_FATURA = split(DS_LINHA_RECUPERADA, '|')[27],",
						"          VALOR_DOCTO_ORIGINAL = replace((split(DS_LINHA_RECUPERADA, '|')[28]), \",\", \".\"),",
						"          MES_ANO_REFERENTE = split(DS_LINHA_RECUPERADA, '|')[29],",
						"          DATA_VENC_FATUR = toDate(split(DS_LINHA_RECUPERADA, '|')[30], 'yyyyMMdd'),",
						"          VALOR_PAGAMENTO = replace((split(DS_LINHA_RECUPERADA, '|')[31]), \",\", \".\"),",
						"          DATA_ATRIBUICAO_PGTO = toDate(split(DS_LINHA_RECUPERADA, '|')[32], 'yyyyMMdd'),",
						"          FATU_ATRIBUIDA = split(DS_LINHA_RECUPERADA, '|')[33],",
						"          DT_EMISSAO_FATURA = toDate(split(DS_LINHA_RECUPERADA, '|')[34], 'yyyyMMdd'),",
						"          MES_ANO_FATURA = split(DS_LINHA_RECUPERADA, '|')[35],",
						"          VALOR_FATURA = replace((split(DS_LINHA_RECUPERADA, '|')[36]), \",\", \".\"),",
						"          SALDO_DEVEDOR = replace((split(DS_LINHA_RECUPERADA, '|')[37]), \",\", \".\"),",
						"          UF = split(DS_LINHA_RECUPERADA, '|')[38],",
						"          OPERADORA_REAL = split(DS_LINHA_RECUPERADA, '|')[39],",
						"          SALDO_FATURA_INI = replace((split(DS_LINHA_RECUPERADA, '|')[40]), \",\", \".\"),",
						"          SALDO_FATURA_FIM = replace((split(DS_LINHA_RECUPERADA, '|')[41]), \",\", \".\"),",
						"          SEQ_RECEBIVEL = split(DS_LINHA_RECUPERADA, '|')[42]) ~> SeparaEmColunas",
						"SeparaEmColunas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_ATLYS_ADJ as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          ID_CLIENTE as string,",
						"          NOTA_FISCAL as string,",
						"          DT_EMISSAO_NF as timestamp,",
						"          VLR_ORIG_NFST as decimal(10,2),",
						"          SERIE as string,",
						"          CONTA_CLIENTE as string,",
						"          CNPJ_CPF as string,",
						"          NOM_CLIENTE as string,",
						"          NUM_TERMINAL as string,",
						"          VLR_CONTEST_AJUSTE as decimal(10,2),",
						"          VLR_ATRIBUIDO as decimal(10,2),",
						"          DT_ATRIBUICAO as timestamp,",
						"          HR_ATRIBUICAO as string,",
						"          DT_AJUSTE as timestamp,",
						"          HR_AJUSTE as string,",
						"          OPERADORA as string,",
						"          CODIGO_OPERADORA as string,",
						"          COD_MOTIVO_AJUSTES as string,",
						"          DESC_MOTIVO_AJUSTE as string,",
						"          DATA_ABERTURA_IMPU as timestamp,",
						"          DATA_FECH_IMPUG as timestamp,",
						"          DSPUT_ID as string,",
						"          TP_NOTA_FISCAL as string,",
						"          CLASSE_RECEBER as string,",
						"          CONTA_CONTABIL as string,",
						"          DESCR_CONTA_CONTABIL as string,",
						"          NUMERO_FATURA as string,",
						"          VALOR_DOCTO_ORIGINAL as decimal(15,2),",
						"          MES_ANO_REFERENTE as string,",
						"          DATA_VENC_FATUR as timestamp,",
						"          VALOR_PAGAMENTO as decimal(15,2),",
						"          DATA_ATRIBUICAO_PGTO as timestamp,",
						"          FATU_ATRIBUIDA as string,",
						"          DT_EMISSAO_FATURA as timestamp,",
						"          MES_ANO_FATURA as string,",
						"          VALOR_FATURA as decimal(15,2),",
						"          SALDO_DEVEDOR as decimal(15,2),",
						"          UF as string,",
						"          OPERADORA_REAL as string,",
						"          SALDO_FATURA_INI as decimal(15,2),",
						"          SALDO_FATURA_FIM as decimal(15,2),",
						"          SEQ_RECEBIVEL as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          ID_CLIENTE,",
						"          NOTA_FISCAL,",
						"          DT_EMISSAO_NF,",
						"          VLR_ORIG_NFST,",
						"          SERIE,",
						"          CONTA_CLIENTE,",
						"          CNPJ_CPF,",
						"          NOM_CLIENTE,",
						"          NUM_TERMINAL,",
						"          VLR_CONTEST_AJUSTE,",
						"          VLR_ATRIBUIDO,",
						"          DT_ATRIBUICAO,",
						"          HR_ATRIBUICAO,",
						"          DT_AJUSTE,",
						"          HR_AJUSTE,",
						"          OPERADORA,",
						"          CODIGO_OPERADORA,",
						"          COD_MOTIVO_AJUSTES,",
						"          DESC_MOTIVO_AJUSTE,",
						"          DATA_ABERTURA_IMPU,",
						"          DATA_FECH_IMPUG,",
						"          DSPUT_ID,",
						"          TP_NOTA_FISCAL,",
						"          CLASSE_RECEBER,",
						"          CONTA_CONTABIL,",
						"          DESCR_CONTA_CONTABIL,",
						"          NUMERO_FATURA,",
						"          VALOR_DOCTO_ORIGINAL,",
						"          MES_ANO_REFERENTE,",
						"          DATA_VENC_FATUR,",
						"          VALOR_PAGAMENTO,",
						"          DATA_ATRIBUICAO_PGTO,",
						"          FATU_ATRIBUIDA,",
						"          DT_EMISSAO_FATURA,",
						"          MES_ANO_FATURA,",
						"          VALOR_FATURA,",
						"          SALDO_DEVEDOR,",
						"          UF,",
						"          OPERADORA_REAL,",
						"          SALDO_FATURA_INI,",
						"          SALDO_FATURA_FIM,",
						"          SEQ_RECEBIVEL",
						"     )) ~> GravaArquivoAtlysCorrigido"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_ATLYS_ADJ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfLayoutAjustadoAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "connExecQry",
								"type": "DatasetReference"
							},
							"name": "BuscaLayoutCorrigido"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CVTB_ATLYS_ADJ",
								"type": "DatasetReference"
							},
							"name": "GravaArquivoAtlysCorrigido"
						}
					],
					"transformations": [
						{
							"name": "SeparaEmColunas"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pIdLoteArquivo as string",
						"}",
						"source(output(",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"SELECT ID_LOTE_ARQUIVO, DS_LINHA_RECUPERADA FROM CONVENIO.CVTB_CARGA_ERRO_LAYOUT WHERE FL_CORRIGIDO='S' AND DS_LINHA_RECUPERADA IS NOT NULL AND ID_LOTE_ARQUIVO=CONVERT(NUMERIC(28),{$pIdLoteArquivo})\"),",
						"     format: 'query') ~> BuscaLayoutCorrigido",
						"BuscaLayoutCorrigido derive(ID_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[1],",
						"          NOTA_FISCAL = split(DS_LINHA_RECUPERADA, '|')[2],",
						"          DT_EMISSAO_NF = toDate(split(DS_LINHA_RECUPERADA, '|')[3], 'yyyyMMdd'),",
						"          VLR_ORIG_NFST = replace((split(DS_LINHA_RECUPERADA, '|')[4]), \",\", \".\"),",
						"          SERIE = split(DS_LINHA_RECUPERADA, '|')[5],",
						"          CONTA_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[6],",
						"          CNPJ_CPF = split(DS_LINHA_RECUPERADA, '|')[7],",
						"          NOM_CLIENTE = split(DS_LINHA_RECUPERADA, '|')[8],",
						"          NUM_TERMINAL = split(DS_LINHA_RECUPERADA, '|')[9],",
						"          VLR_CONTEST_AJUSTE = replace((split(DS_LINHA_RECUPERADA, '|')[10]), \",\", \".\"),",
						"          VLR_ATRIBUIDO = replace((split(DS_LINHA_RECUPERADA, '|')[11]),\",\", \".\"),",
						"          DT_ATRIBUICAO = toDate(split(DS_LINHA_RECUPERADA, '|')[12], 'yyyyMMdd'),",
						"          HR_ATRIBUICAO = split(DS_LINHA_RECUPERADA, '|')[13],",
						"          DT_AJUSTE = toDate(split(DS_LINHA_RECUPERADA, '|')[14], 'yyyyMMdd'),",
						"          HR_AJUSTE = split(DS_LINHA_RECUPERADA, '|')[15],",
						"          OPERADORA = split(DS_LINHA_RECUPERADA, '|')[16],",
						"          CODIGO_OPERADORA = split(DS_LINHA_RECUPERADA, '|')[17],",
						"          COD_MOTIVO_AJUSTES = split(DS_LINHA_RECUPERADA, '|')[18],",
						"          DESC_MOTIVO_AJUSTE = split(DS_LINHA_RECUPERADA, '|')[19],",
						"          DATA_ABERTURA_IMPU = toDate(split(DS_LINHA_RECUPERADA, '|')[20], 'yyyyMMdd'),",
						"          DATA_FECH_IMPUG = toDate(split(DS_LINHA_RECUPERADA, '|')[21], 'yyyyMMdd'),",
						"          DSPUT_ID = split(DS_LINHA_RECUPERADA, '|')[22],",
						"          TP_NOTA_FISCAL = split(DS_LINHA_RECUPERADA, '|')[23],",
						"          CLASSE_RECEBER = split(DS_LINHA_RECUPERADA, '|')[24],",
						"          CONTA_CONTABIL = split(DS_LINHA_RECUPERADA, '|')[25],",
						"          DESCR_CONTA_CONTABIL = split(DS_LINHA_RECUPERADA, '|')[26],",
						"          NUMERO_FATURA = split(DS_LINHA_RECUPERADA, '|')[27],",
						"          VALOR_DOCTO_ORIGINAL = replace((split(DS_LINHA_RECUPERADA, '|')[28]), \",\", \".\"),",
						"          MES_ANO_REFERENTE = split(DS_LINHA_RECUPERADA, '|')[29],",
						"          DATA_VENC_FATUR = toDate(split(DS_LINHA_RECUPERADA, '|')[30], 'yyyyMMdd'),",
						"          VALOR_PAGAMENTO = replace((split(DS_LINHA_RECUPERADA, '|')[31]), \",\", \".\"),",
						"          DATA_ATRIBUICAO_PGTO = toDate(split(DS_LINHA_RECUPERADA, '|')[32], 'yyyyMMdd'),",
						"          FATU_ATRIBUIDA = split(DS_LINHA_RECUPERADA, '|')[33],",
						"          DT_EMISSAO_FATURA = toDate(split(DS_LINHA_RECUPERADA, '|')[34], 'yyyyMMdd'),",
						"          MES_ANO_FATURA = split(DS_LINHA_RECUPERADA, '|')[35],",
						"          VALOR_FATURA = replace((split(DS_LINHA_RECUPERADA, '|')[36]), \",\", \".\"),",
						"          SALDO_DEVEDOR = replace((split(DS_LINHA_RECUPERADA, '|')[37]), \",\", \".\"),",
						"          UF = split(DS_LINHA_RECUPERADA, '|')[38],",
						"          OPERADORA_REAL = split(DS_LINHA_RECUPERADA, '|')[39],",
						"          SALDO_FATURA_INI = replace((split(DS_LINHA_RECUPERADA, '|')[40]), \",\", \".\"),",
						"          SALDO_FATURA_FIM = replace((split(DS_LINHA_RECUPERADA, '|')[41]), \",\", \".\"),",
						"          SEQ_RECEBIVEL = split(DS_LINHA_RECUPERADA, '|')[42]) ~> SeparaEmColunas",
						"SeparaEmColunas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_ATLYS_ADJ as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          ID_CLIENTE as string,",
						"          NOTA_FISCAL as string,",
						"          DT_EMISSAO_NF as timestamp,",
						"          VLR_ORIG_NFST as decimal(10,2),",
						"          SERIE as string,",
						"          CONTA_CLIENTE as string,",
						"          CNPJ_CPF as string,",
						"          NOM_CLIENTE as string,",
						"          NUM_TERMINAL as string,",
						"          VLR_CONTEST_AJUSTE as decimal(10,2),",
						"          VLR_ATRIBUIDO as decimal(10,2),",
						"          DT_ATRIBUICAO as timestamp,",
						"          HR_ATRIBUICAO as string,",
						"          DT_AJUSTE as timestamp,",
						"          HR_AJUSTE as string,",
						"          OPERADORA as string,",
						"          CODIGO_OPERADORA as string,",
						"          COD_MOTIVO_AJUSTES as string,",
						"          DESC_MOTIVO_AJUSTE as string,",
						"          DATA_ABERTURA_IMPU as timestamp,",
						"          DATA_FECH_IMPUG as timestamp,",
						"          DSPUT_ID as string,",
						"          TP_NOTA_FISCAL as string,",
						"          CLASSE_RECEBER as string,",
						"          CONTA_CONTABIL as string,",
						"          DESCR_CONTA_CONTABIL as string,",
						"          NUMERO_FATURA as string,",
						"          VALOR_DOCTO_ORIGINAL as decimal(15,2),",
						"          MES_ANO_REFERENTE as string,",
						"          DATA_VENC_FATUR as timestamp,",
						"          VALOR_PAGAMENTO as decimal(15,2),",
						"          DATA_ATRIBUICAO_PGTO as timestamp,",
						"          FATU_ATRIBUIDA as string,",
						"          DT_EMISSAO_FATURA as timestamp,",
						"          MES_ANO_FATURA as string,",
						"          VALOR_FATURA as decimal(15,2),",
						"          SALDO_DEVEDOR as decimal(15,2),",
						"          UF as string,",
						"          OPERADORA_REAL as string,",
						"          SALDO_FATURA_INI as decimal(15,2),",
						"          SALDO_FATURA_FIM as decimal(15,2),",
						"          SEQ_RECEBIVEL as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          ID_CLIENTE,",
						"          NOTA_FISCAL,",
						"          DT_EMISSAO_NF,",
						"          VLR_ORIG_NFST,",
						"          SERIE,",
						"          CONTA_CLIENTE,",
						"          CNPJ_CPF,",
						"          NOM_CLIENTE,",
						"          NUM_TERMINAL,",
						"          VLR_CONTEST_AJUSTE,",
						"          VLR_ATRIBUIDO,",
						"          DT_ATRIBUICAO,",
						"          HR_ATRIBUICAO,",
						"          DT_AJUSTE,",
						"          HR_AJUSTE,",
						"          OPERADORA,",
						"          CODIGO_OPERADORA,",
						"          COD_MOTIVO_AJUSTES,",
						"          DESC_MOTIVO_AJUSTE,",
						"          DATA_ABERTURA_IMPU,",
						"          DATA_FECH_IMPUG,",
						"          DSPUT_ID,",
						"          TP_NOTA_FISCAL,",
						"          CLASSE_RECEBER,",
						"          CONTA_CONTABIL,",
						"          DESCR_CONTA_CONTABIL,",
						"          NUMERO_FATURA,",
						"          VALOR_DOCTO_ORIGINAL,",
						"          MES_ANO_REFERENTE,",
						"          DATA_VENC_FATUR,",
						"          VALOR_PAGAMENTO,",
						"          DATA_ATRIBUICAO_PGTO,",
						"          FATU_ATRIBUIDA,",
						"          DT_EMISSAO_FATURA,",
						"          MES_ANO_FATURA,",
						"          VALOR_FATURA,",
						"          SALDO_DEVEDOR,",
						"          UF,",
						"          OPERADORA_REAL,",
						"          SALDO_FATURA_INI,",
						"          SALDO_FATURA_FIM,",
						"          SEQ_RECEBIVEL",
						"     )) ~> GravaArquivoAtlysCorrigido"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/connExecQry')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_ATLYS_ADJ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Cadastral')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_Cadastral",
								"type": "DatasetReference"
							},
							"name": "EntradaArqCadastral"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_Cadastral_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaArqCadastral"
						}
					],
					"transformations": [
						{
							"name": "MapeamentoArqCadastral"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArq as string",
						"}",
						"source(output(",
						"          ArquivoCadastral as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['','originais']) ~> EntradaArqCadastral",
						"EntradaArqCadastral derive(CNPJ_CPF = trim(substring(ArquivoCadastral, 1, 14)),",
						"          IE = trim(substring(ArquivoCadastral, 15, 14)),",
						"          RazaoSocial = trim(substring(ArquivoCadastral, 29, 35)),",
						"          Logradouro = trim(substring(ArquivoCadastral, 64, 45)),",
						"          NumeroEnd = trim(substring(ArquivoCadastral, 109, 5)),",
						"          Complemento = trim(substring(ArquivoCadastral, 114, 15)),",
						"          CEP = trim(substring(ArquivoCadastral, 129, 8)),",
						"          Bairro = trim(substring(ArquivoCadastral, 137, 15)),",
						"          Municipio = trim(substring(ArquivoCadastral, 152, 30)),",
						"          UF = trim(substring(ArquivoCadastral, 182, 2)),",
						"          TelefoneContato = trim(substring(ArquivoCadastral, 184, 12)),",
						"          CodigoIdentificacaoConsumidor_Assinante = trim(substring(ArquivoCadastral, 196, 12)),",
						"          NroTerminaltelefonico_UnidadeConsumidora = trim(substring(ArquivoCadastral, 208, 12)),",
						"          UFHabilitacaoTerminalTelefonico = trim(substring(ArquivoCadastral, 220, 2)),",
						"          DataEmissao = trim(substring(ArquivoCadastral, 222, 8)),",
						"          Modelo = trim(substring(ArquivoCadastral, 230, 2)),",
						"          Serie = trim(substring(ArquivoCadastral, 232, 3)),",
						"          Numero = trim(substring(ArquivoCadastral, 235, 9)),",
						"          CodigoMunicipo = trim(substring(ArquivoCadastral, 244, 7)),",
						"          Brancos_reservadoparausofuturo = trim(substring(ArquivoCadastral, 251, 5)),",
						"          CodigoAutenticacaoDigital = trim(substring(ArquivoCadastral, 256, 32)),",
						"          AnoEmissaoNF = trim(substring(ArquivoCadastral, 222, 4)),",
						"          MesEmissaoNF = trim(substring(ArquivoCadastral, 226, 2)),",
						"          DiaEmissaoNF = trim(substring(ArquivoCadastral, 228, 2)),",
						"          UFNF = trim(substring(ArquivoCadastral, 182, 2)),",
						"          SerieNF = trim(substring(ArquivoCadastral, 232, 3))) ~> MapeamentoArqCadastral",
						"MapeamentoArqCadastral sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:($pNomeArq),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CNPJ_CPF,",
						"          IE,",
						"          RazaoSocial,",
						"          Logradouro,",
						"          NumeroEnd,",
						"          Complemento,",
						"          CEP,",
						"          Bairro,",
						"          Municipio,",
						"          UF,",
						"          TelefoneContato,",
						"          CodigoIdentificacaoConsumidor_Assinante,",
						"          NroTerminaltelefonico_UnidadeConsumidora,",
						"          UFHabilitacaoTerminalTelefonico,",
						"          DataEmissao,",
						"          Modelo,",
						"          Serie,",
						"          Numero,",
						"          CodigoMunicipo,",
						"          Brancos_reservadoparausofuturo,",
						"          CodigoAutenticacaoDigital,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF,",
						"          UFNF,",
						"          SerieNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          SerieNF,",
						"          UFNF,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     )) ~> SaidaArqCadastral"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_Conv115_Cadastral')]",
				"[concat(variables('factoryId'), '/datasets/arq_Conv115_Cadastral_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Controle')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_Controle",
								"type": "DatasetReference"
							},
							"name": "EntradaControleV3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_Controle_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaParquetArqControle"
						}
					],
					"transformations": [
						{
							"name": "ColunasDerivadas"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArq as string",
						"}",
						"source(output(",
						"          ControleV3 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['','originais']) ~> EntradaControleV3",
						"EntradaControleV3 derive(Cnpj = trim(substring(ControleV3, 1, 18)),",
						"          IE = trim(substring(ControleV3, 19, 15)),",
						"          RazaoSocial = trim(substring(ControleV3, 34, 50)),",
						"          Endereco = trim(substring(ControleV3, 84, 50)),",
						"          CEP = trim(substring(ControleV3, 134, 9)),",
						"          Bairro = trim(substring(ControleV3, 143, 30)),",
						"          Municipio = trim(substring(ControleV3, 173, 30)),",
						"          UF = trim(substring(ControleV3, 203, 2)),",
						"          Responsavel = trim(substring(ControleV3, 205, 30)),",
						"          Cargo = trim(substring(ControleV3, 235, 20)),",
						"          Telefone = trim(substring(ControleV3, 255, 12)),",
						"          Email = trim(substring(ControleV3, 267, 40)),",
						"          QtdeRegMestre = trim(substring(ControleV3, 307, 7)),",
						"          QtdeNFcanceladas = trim(substring(ControleV3, 314, 7)),",
						"          DataEmissaoPriDoc = trim(substring(ControleV3, 321, 8)),",
						"          DataEmissaoUltDoc = trim(substring(ControleV3, 329, 8)),",
						"          NumeroPriDoc = trim(substring(ControleV3, 337, 9)),",
						"          NumeroUltDoc = trim(substring(ControleV3, 346, 9)),",
						"          ValorTotal = trim(substring(ControleV3, 355, 14)),",
						"          BCIcms = trim(substring(ControleV3, 369, 14)),",
						"          ICMS = trim(substring(ControleV3, 383, 14)),",
						"          OpIsentas = trim(substring(ControleV3, 397, 14)),",
						"          ValoresNaoBC = trim(substring(ControleV3, 411, 14)),",
						"          NomeArqMestre = trim(substring(ControleV3, 425, 40)),",
						"          StatusRetificacao = trim(substring(ControleV3, 465, 1)),",
						"          CodAutenticacao = trim(substring(ControleV3, 466, 32)),",
						"          QtdeRegItem = trim(substring(ControleV3, 498, 9)),",
						"          QtdeItensCancelados = trim(substring(ControleV3, 507, 7)),",
						"          DataEmissaoPriDocItens = trim(substring(ControleV3, 514, 8)),",
						"          DataEmissaoUltDocItens = trim(substring(ControleV3, 522, 8)),",
						"          NumeroPriDocItens = trim(substring(ControleV3, 530, 9)),",
						"          NumeroUltDocItens = trim(substring(ControleV3, 539, 9)),",
						"          Total = trim(substring(ControleV3, 548, 14)),",
						"          Descontos = trim(substring(ControleV3, 562, 14)),",
						"          Acrescimos = trim(substring(ControleV3, 576, 14)),",
						"          BCIcmsTotal = trim(substring(ControleV3, 590, 14)),",
						"          ICMSTotal = trim(substring(ControleV3, 604, 14)),",
						"          OpIsentasTotal = trim(substring(ControleV3, 618, 14)),",
						"          ValoresNaoBCTotal = trim(substring(ControleV3, 632, 14)),",
						"          NomeArqItem = trim(substring(ControleV3, 646, 40)),",
						"          StatusRetificacaoItem = trim(substring(ControleV3, 686, 1)),",
						"          CodAutenticacaoItem = trim(substring(ControleV3, 687, 32)),",
						"          QtdeCadastroDest = trim(substring(ControleV3, 719, 7)),",
						"          NomeArqCadastro = trim(substring(ControleV3, 726, 40)),",
						"          StatusRetificacaoCadastro = trim(substring(ControleV3, 766, 1)),",
						"          CodAutenticacaoCadastro = trim(substring(ControleV3, 767, 32)),",
						"          VersaoValidador = trim(substring(ControleV3, 799, 3)),",
						"          ChaveReciboEntrega = trim(substring(ControleV3, 802, 6)),",
						"          QtdeAdvertencias = trim(substring(ControleV3, 808, 9)),",
						"          Referencia = trim(substring(ControleV3, 817, 4)),",
						"          Modelo = trim(substring(ControleV3, 821, 2)),",
						"          Serie = trim(substring(ControleV3, 823, 3)),",
						"          Volume = trim(substring(ControleV3, 826, 3)),",
						"          SituacaoVersao = trim(substring(ControleV3, 829, 3)),",
						"          NomeArqCompactado = trim(substring(ControleV3, 832, 60)),",
						"          QtdeTipoA = trim(substring(ControleV3, 892, 9)),",
						"          ValorTotalTipoA = trim(substring(ControleV3, 901, 14)),",
						"          BCIcmsA = trim(substring(ControleV3, 915, 14)),",
						"          ICMSA = trim(substring(ControleV3, 929, 14)),",
						"          IsentasNTA = trim(substring(ControleV3, 943, 14)),",
						"          OutrosValoresA = trim(substring(ControleV3, 957, 14)),",
						"          QtdeTipoB = trim(substring(ControleV3, 971, 9)),",
						"          ValorTotalB = trim(substring(ControleV3, 980, 14)),",
						"          BCIcmsB = trim(substring(ControleV3, 994, 14)),",
						"          ICMSB = trim(substring(ControleV3, 1008, 14)),",
						"          IsentasNTB = trim(substring(ControleV3, 1022, 14)),",
						"          OutrosValoresB = trim(substring(ControleV3, 1036, 14)),",
						"          QtdeTipoC = trim(substring(ControleV3, 1050, 9)),",
						"          ValorTotalC = trim(substring(ControleV3, 1059, 14)),",
						"          BCIcmsC = trim(substring(ControleV3, 1073, 14)),",
						"          ICMSC = trim(substring(ControleV3, 1087, 14)),",
						"          IsentasNTC = trim(substring(ControleV3, 1101, 14)),",
						"          OutrosValoresC = trim(substring(ControleV3, 1115, 14)),",
						"          QtdeTipoD = trim(substring(ControleV3, 1129, 9)),",
						"          ValorTotalD = trim(substring(ControleV3, 1138, 14)),",
						"          BCIcmsD = trim(substring(ControleV3, 1152, 14)),",
						"          ICMSD = trim(substring(ControleV3, 1166, 14)),",
						"          IsentasNTD = trim(substring(ControleV3, 1180, 14)),",
						"          OutrosValoresD = trim(substring(ControleV3, 1194, 14)),",
						"          ChaveControle = trim(substring(ControleV3, 1208, 32)),",
						"          Brancos = trim(substring(ControleV3, 1240, 64)),",
						"          CodAutenticacaoRegistro = trim(substring(ControleV3, 1304, 32)),",
						"          AnoEmissaoPriDoc = trim(substring(ControleV3, 321, 4)),",
						"          MesEmissaoPriDoc = trim(substring(ControleV3, 325, 2)),",
						"          DiaEmissaoPriDoc = trim(substring(ControleV3, 327, 2)),",
						"          UFNF = trim(substring(ControleV3, 203, 2)),",
						"          SerieNF = trim(substring(ControleV3, 823, 3))) ~> ColunasDerivadas",
						"ColunasDerivadas sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:($pNomeArq),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Cnpj,",
						"          IE,",
						"          RazaoSocial,",
						"          Endereco,",
						"          CEP,",
						"          Bairro,",
						"          Municipio,",
						"          UF,",
						"          Responsavel,",
						"          Cargo,",
						"          Telefone,",
						"          Email,",
						"          QtdeRegMestre,",
						"          QtdeNFcanceladas,",
						"          DataEmissaoPriDoc,",
						"          DataEmissaoUltDoc,",
						"          NumeroPriDoc,",
						"          NumeroUltDoc,",
						"          ValorTotal,",
						"          BCIcms,",
						"          ICMS,",
						"          OpIsentas,",
						"          ValoresNaoBC,",
						"          NomeArqMestre,",
						"          StatusRetificacao,",
						"          CodAutenticacao,",
						"          QtdeRegItem,",
						"          QtdeItensCancelados,",
						"          DataEmissaoPriDocItens,",
						"          DataEmissaoUltDocItens,",
						"          NumeroPriDocItens,",
						"          NumeroUltDocItens,",
						"          Total,",
						"          Descontos,",
						"          Acrescimos,",
						"          BCIcmsTotal,",
						"          ICMSTotal,",
						"          OpIsentasTotal,",
						"          ValoresNaoBCTotal,",
						"          NomeArqItem,",
						"          StatusRetificacaoItem,",
						"          CodAutenticacaoItem,",
						"          QtdeCadastroDest,",
						"          NomeArqCadastro,",
						"          StatusRetificacaoCadastro,",
						"          CodAutenticacaoCadastro,",
						"          VersaoValidador,",
						"          ChaveReciboEntrega,",
						"          QtdeAdvertencias,",
						"          Referencia,",
						"          Modelo,",
						"          Serie,",
						"          Volume,",
						"          SituacaoVersao,",
						"          NomeArqCompactado,",
						"          QtdeTipoA,",
						"          ValorTotalTipoA,",
						"          BCIcmsA,",
						"          ICMSA,",
						"          IsentasNTA,",
						"          OutrosValoresA,",
						"          QtdeTipoB,",
						"          ValorTotalB,",
						"          BCIcmsB,",
						"          ICMSB,",
						"          IsentasNTB,",
						"          OutrosValoresB,",
						"          QtdeTipoC,",
						"          ValorTotalC,",
						"          BCIcmsC,",
						"          ICMSC,",
						"          IsentasNTC,",
						"          OutrosValoresC,",
						"          QtdeTipoD,",
						"          ValorTotalD,",
						"          BCIcmsD,",
						"          ICMSD,",
						"          IsentasNTD,",
						"          OutrosValoresD,",
						"          ChaveControle,",
						"          Brancos,",
						"          CodAutenticacaoRegistro,",
						"          AnoEmissaoPriDoc,",
						"          MesEmissaoPriDoc,",
						"          DiaEmissaoPriDoc,",
						"          UFNF,",
						"          SerieNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          SerieNF,",
						"          UFNF,",
						"          AnoEmissaoPriDoc,",
						"          MesEmissaoPriDoc,",
						"          DiaEmissaoPriDoc",
						"     )) ~> SaidaParquetArqControle"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Arq_Conv115_Controle')]",
				"[concat(variables('factoryId'), '/datasets/Arq_Conv115_Controle_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Item')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_ItemNF",
								"type": "DatasetReference"
							},
							"name": "EntradaArqItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_ItemNF_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaArqItem"
						}
					],
					"transformations": [
						{
							"name": "MapeamentoArqItem"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArq as string",
						"}",
						"source(output(",
						"          ArquivoItem as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['','originais']) ~> EntradaArqItem",
						"EntradaArqItem derive(CNPJ_CPF = trim(substring(ArquivoItem, 1, 14)),",
						"          UF = trim(substring(ArquivoItem, 15, 2)),",
						"          Classe_Consumo = trim(substring(ArquivoItem, 17, 1)),",
						"          Fase_TipoUtilizacao = trim(substring(ArquivoItem, 18, 1)),",
						"          GrupoTensao = trim(substring(ArquivoItem, 19, 2)),",
						"          DataEmissao = trim(substring(ArquivoItem, 21, 8)),",
						"          Modelo = trim(substring(ArquivoItem, 29, 2)),",
						"          Serie = trim(substring(ArquivoItem, 31, 3)),",
						"          Numero = trim(substring(ArquivoItem, 34, 9)),",
						"          CFOP = trim(substring(ArquivoItem, 43, 4)),",
						"          NroOrdemItem = trim(substring(ArquivoItem, 47, 3)),",
						"          CodigoItem = trim(substring(ArquivoItem, 50, 10)),",
						"          DescricaoItem = trim(substring(ArquivoItem, 60, 40)),",
						"          CodigoClassificacaoItem = trim(substring(ArquivoItem, 100, 4)),",
						"          Unidade = trim(substring(ArquivoItem, 104, 6)),",
						"          {QtdContratada(3decimais)} = trim(substring(ArquivoItem, 110, 12)),",
						"          {QtdMedida(3decimais)} = trim(substring(ArquivoItem, 122, 12)),",
						"          {Total(2decimais)} = trim(substring(ArquivoItem, 134, 11)),",
						"          {Desconto_Redutores(2decimais)} = trim(substring(ArquivoItem, 145, 11)),",
						"          {AcrescimosDespesasAcessorias(2decimais)} = trim(substring(ArquivoItem, 156, 11)),",
						"          {BC_ICMS(2decimais) } = trim(substring(ArquivoItem, 167, 11)),",
						"          {ICMS(2decimais) } = trim(substring(ArquivoItem, 178, 11)),",
						"          {OperacoesIsentas_ou_nao_tributadas(2decimais) } = trim(substring(ArquivoItem, 189, 11)),",
						"          {OutrosValores(2decimais) } = trim(substring(ArquivoItem, 200, 11)),",
						"          {AliquotadoICMS(2 decimais) } = trim(substring(ArquivoItem, 211, 4)),",
						"          {Situacao } = trim(substring(ArquivoItem, 215, 1)),",
						"          AnoMesReferenciaApuracao = trim(substring(ArquivoItem, 216, 4)),",
						"          {NumeroContrato } = trim(substring(ArquivoItem, 220, 15)),",
						"          {QuantidadeFaturada(3decimais) } = trim(substring(ArquivoItem, 235, 12)),",
						"          {TarifaAplicadaPrecoMedioEfetivo(6decimais) } = trim(substring(ArquivoItem, 247, 11)),",
						"          {AliquotaPISPASEP(4decimais) } = trim(substring(ArquivoItem, 258, 6)),",
						"          {PISPASEP(2decimais) } = trim(substring(ArquivoItem, 264, 11)),",
						"          {AliquotaCOFINS(4decimais) } = trim(substring(ArquivoItem, 275, 6)),",
						"          {COFINS(2decimais) } = trim(substring(ArquivoItem, 281, 11)),",
						"          {IndicadordeDescontoJudicial } = trim(substring(ArquivoItem, 292, 1)),",
						"          {TipoIsencao_ReducaoBaseCalculo } = trim(substring(ArquivoItem, 293, 2)),",
						"          BrancosReservadoparausoFuturo = trim(substring(ArquivoItem, 295, 5)),",
						"          CodigodeAutenticacaoDigital = trim(substring(ArquivoItem, 300, 32)),",
						"          AnoEmissaoNF = trim(substring(ArquivoItem, 21, 4)),",
						"          MesEmissaoNF = trim(substring(ArquivoItem, 25, 2)),",
						"          DiaEmissaoNF = trim(substring(ArquivoItem, 27, 2)),",
						"          UFNF = trim(substring(ArquivoItem, 15, 2)),",
						"          SerieNF = trim(substring(ArquivoItem, 31, 3))) ~> MapeamentoArqItem",
						"MapeamentoArqItem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:($pNomeArq),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CNPJ_CPF,",
						"          UF,",
						"          Classe_Consumo,",
						"          Fase_TipoUtilizacao,",
						"          GrupoTensao,",
						"          DataEmissao,",
						"          Modelo,",
						"          Serie,",
						"          Numero,",
						"          CFOP,",
						"          NroOrdemItem,",
						"          CodigoItem,",
						"          DescricaoItem,",
						"          CodigoClassificacaoItem,",
						"          Unidade,",
						"          QtdContratada = {QtdContratada(3decimais)},",
						"          QtdMedida = {QtdMedida(3decimais)},",
						"          Total = {Total(2decimais)},",
						"          Desconto_Redutores = {Desconto_Redutores(2decimais)},",
						"          AcrescimosDespesasAcessorias = {AcrescimosDespesasAcessorias(2decimais)},",
						"          BC_ICMS = {BC_ICMS(2decimais) },",
						"          ICMS = {ICMS(2decimais) },",
						"          OperacoesIsentas_ou_nao_tributadas = {OperacoesIsentas_ou_nao_tributadas(2decimais) },",
						"          OutrosValores = {OutrosValores(2decimais) },",
						"          AliquotadoICMS = {AliquotadoICMS(2 decimais) },",
						"          {Situacao },",
						"          AnoMesReferenciaApuracao,",
						"          {NumeroContrato },",
						"          QuantidadeFaturada = {QuantidadeFaturada(3decimais) },",
						"          TarifaAplicadaPrecoMedioEfetivo = {TarifaAplicadaPrecoMedioEfetivo(6decimais) },",
						"          AliquotaPISPASEP = {AliquotaPISPASEP(4decimais) },",
						"          PISPASEP = {PISPASEP(2decimais) },",
						"          AliquotaCOFINS = {AliquotaCOFINS(4decimais) },",
						"          COFINS = {COFINS(2decimais) },",
						"          {IndicadordeDescontoJudicial },",
						"          {TipoIsencao_ReducaoBaseCalculo },",
						"          BrancosReservadoparausoFuturo,",
						"          CodigodeAutenticacaoDigital,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF,",
						"          UFNF,",
						"          SerieNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          SerieNF,",
						"          UFNF,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     )) ~> SaidaArqItem"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_Conv115_ItemNF')]",
				"[concat(variables('factoryId'), '/datasets/Arq_Conv115_ItemNF_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMapeamento115Mestre')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Conv115"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_Conv115_MestreNF",
								"type": "DatasetReference"
							},
							"name": "EntradaArqMestre"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Arq_Conv115_MestreNF_parquet",
								"type": "DatasetReference"
							},
							"name": "SaidaArqMestre"
						}
					],
					"transformations": [
						{
							"name": "MapeamentoArqMestre"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArq as string",
						"}",
						"source(output(",
						"          ArquivoMestre as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['','originais']) ~> EntradaArqMestre",
						"EntradaArqMestre derive(CNPJ_CPF = trim(substring(ArquivoMestre, 1, 14)),",
						"          IE = trim(substring(ArquivoMestre, 15, 14)),",
						"          RazaoSocial = trim(substring(ArquivoMestre, 29, 35)),",
						"          UF = trim(substring(ArquivoMestre, 64, 2)),",
						"          Classo_Consumo = trim(substring(ArquivoMestre, 66, 1)),",
						"          Frase_TipoUtilizacao = trim(substring(ArquivoMestre, 67, 1)),",
						"          GrupoTensao = trim(substring(ArquivoMestre, 68, 2)),",
						"          CodIdentificacaoConsumidor_Assinante = trim(substring(ArquivoMestre, 70, 12)),",
						"          DataEmissao = trim(substring(ArquivoMestre, 82, 8)),",
						"          Modelo = trim(substring(ArquivoMestre, 90, 2)),",
						"          Serie = trim(substring(ArquivoMestre, 92, 3)),",
						"          Numero = trim(substring(ArquivoMestre, 95, 9)),",
						"          CodAutenticacaoDigitalDocFiscal = trim(substring(ArquivoMestre, 104, 32)),",
						"          {ValorTotal(2decimais)} = trim(substring(ArquivoMestre, 136, 12)),",
						"          {BC_ICMS(2decimais)} = trim(substring(ArquivoMestre, 148, 12)),",
						"          {ICMSDestacado(2decimais)} = trim(substring(ArquivoMestre, 160, 12)),",
						"          {OperacoesIsentas_ou_naoTributadas(2decimais)} = trim(substring(ArquivoMestre, 172, 12)),",
						"          {OutrosValores(2decimais)} = trim(substring(ArquivoMestre, 184, 12)),",
						"          SituacaoDocumento = trim(substring(ArquivoMestre, 196, 1)),",
						"          AnoMesReferenciaApuracao = trim(substring(ArquivoMestre, 197, 4)),",
						"          ReferenciaItemNF = trim(substring(ArquivoMestre, 201, 9)),",
						"          NroTerminalTelefonico_UnidadeConsumidora = trim(substring(ArquivoMestre, 210, 12)),",
						"          IndicacaoInformacaoCampo1 = trim(substring(ArquivoMestre, 222, 1)),",
						"          TipoCliente = trim(substring(ArquivoMestre, 223, 2)),",
						"          SubclasseConsumo = trim(substring(ArquivoMestre, 225, 2)),",
						"          NroTerminalTefefonicoPrincial = trim(substring(ArquivoMestre, 227, 12)),",
						"          CNPJEmitente = trim(substring(ArquivoMestre, 239, 14)),",
						"          Nro_CodFaturaComercial = trim(substring(ArquivoMestre, 253, 20)),",
						"          ValorTotalFaturaComercial = trim(substring(ArquivoMestre, 273, 12)),",
						"          DataLeituraAnterior = trim(substring(ArquivoMestre, 285, 8)),",
						"          DataLeituraAtual = trim(substring(ArquivoMestre, 293, 8)),",
						"          Brancos1_reservadoparausofuturo = trim(substring(ArquivoMestre, 301, 50)),",
						"          Brancos2_reservadoparausofuturo = trim(substring(ArquivoMestre, 351, 8)),",
						"          InformacoesAdicionais = trim(substring(ArquivoMestre, 359, 30)),",
						"          Brancos3_reservadoparausofuturo = trim(substring(ArquivoMestre, 389, 5)),",
						"          CodigoAutenticacaoDigital = trim(substring(ArquivoMestre, 394, 32)),",
						"          AnoEmissaoNF = trim(substring(ArquivoMestre, 82, 4)),",
						"          MesEmissaoNF = trim(substring(ArquivoMestre, 86, 2)),",
						"          DiaEmissaoNF = trim(substring(ArquivoMestre, 88, 2)),",
						"          UFNF = trim(substring(ArquivoMestre, 64, 2)),",
						"          SerieNF = trim(substring(ArquivoMestre, 92, 3))) ~> MapeamentoArqMestre",
						"MapeamentoArqMestre sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     filePattern:($pNomeArq),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CNPJ_CPF,",
						"          IE,",
						"          RazaoSocial,",
						"          UF,",
						"          Classo_Consumo,",
						"          Frase_TipoUtilizacao,",
						"          GrupoTensao,",
						"          CodIdentificacaoConsumidor_Assinante,",
						"          DataEmissao,",
						"          Modelo,",
						"          Serie,",
						"          Numero,",
						"          CodAutenticacaoDigitalDocFiscal,",
						"          ValorTotal = {ValorTotal(2decimais)},",
						"          BC_ICMS = {BC_ICMS(2decimais)},",
						"          ICMSDestacado = {ICMSDestacado(2decimais)},",
						"          OperacoesIsentas_ou_naoTributadas = {OperacoesIsentas_ou_naoTributadas(2decimais)},",
						"          OutrosValores = {OutrosValores(2decimais)},",
						"          SituacaoDocumento,",
						"          AnoMesReferenciaApuracao,",
						"          ReferenciaItemNF,",
						"          NroTerminalTelefonico_UnidadeConsumidora,",
						"          IndicacaoInformacaoCampo1,",
						"          TipoCliente,",
						"          SubclasseConsumo,",
						"          NroTerminalTefefonicoPrincial,",
						"          CNPJEmitente,",
						"          Nro_CodFaturaComercial,",
						"          ValorTotalFaturaComercial,",
						"          DataLeituraAnterior,",
						"          DataLeituraAtual,",
						"          Brancos1_reservadoparausofuturo,",
						"          Brancos2_reservadoparausofuturo,",
						"          InformacoesAdicionais,",
						"          Brancos3_reservadoparausofuturo,",
						"          CodigoAutenticacaoDigital,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF,",
						"          UFNF,",
						"          SerieNF",
						"     ),",
						"     partitionBy('key',",
						"          0,",
						"          SerieNF,",
						"          UFNF,",
						"          AnoEmissaoNF,",
						"          MesEmissaoNF,",
						"          DiaEmissaoNF",
						"     )) ~> SaidaArqMestre"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_Conv115_MestreNF')]",
				"[concat(variables('factoryId'), '/datasets/Arq_Conv115_MestreNF_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutAtisNaoPago')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atis_nao_pago_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqAtisNaoPago"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atis_nao_pago_corrigido",
								"type": "DatasetReference"
							},
							"name": "CriaArqValidosAtisNaoPago"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidasAtisNaoPago"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeCaracteres"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atis','atis/originais']) ~> BuscaLinhasArqAtisNaoPago",
						"BuscaLinhasArqAtisNaoPago derive(qtdcampos = length(value)) ~> CalcQdeCaracteres",
						"CalcQdeCaracteres split(qtdcampos== 356,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqValidosAtisNaoPago",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidasAtisNaoPago"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_atis_nao_pago_original')]",
				"[concat(variables('factoryId'), '/datasets/arq_atis_nao_pago_corrigido')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CARGA_ERRO_LAYOUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutAtisPago')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atis"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atis_pago_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqAtis"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atis_pago_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoAtisPago"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas",
							"description": "Insere linhas não válidas na tabela CVTB_CARGA_ERRO_LAYOUT, ainda sem correção."
						}
					],
					"transformations": [
						{
							"name": "CalcQdeCaracteres"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atis','atis/originais']) ~> BuscaLinhasArqAtis",
						"BuscaLinhasArqAtis derive(qtdcaracteres = length(value)) ~> CalcQdeCaracteres",
						"CalcQdeCaracteres split(qtdcaracteres== 477,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoAtisPago",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_atis_pago_original')]",
				"[concat(variables('factoryId'), '/datasets/arq_atis_pago_validados')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CARGA_ERRO_LAYOUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutContestacaoAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atlys_adj_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqAtlys"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atlys_adj_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoAtlys"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas",
							"description": "Insere linhas não válidas na tabela CVTB_CARGA_ERRO_LAYOUT, ainda sem correção."
						}
					],
					"transformations": [
						{
							"name": "CalcQdePipes"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						},
						{
							"name": "TrataAspasDuplas"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atlys','atlys/originais']) ~> BuscaLinhasArqAtlys",
						"TrataAspasDuplas derive(qtdcampos = length(value) - length(replace(value, \"|\", \"\"))) ~> CalcQdePipes",
						"CalcQdePipes split(qtdcampos== 41,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"BuscaLinhasArqAtlys derive(value = replace(value, '\\\"', '')) ~> TrataAspasDuplas",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoAtlys",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_atlys_adj_original')]",
				"[concat(variables('factoryId'), '/datasets/arq_atlys_adj_validados')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CARGA_ERRO_LAYOUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatCarFF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_fat_car_ff_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqFatFF"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_fat_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoFatFF"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeCaracteres"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['fat','fat/originais']) ~> BuscaLinhasArqFatFF",
						"BuscaLinhasArqFatFF derive(qtdcaracteres = length(value)) ~> CalcQdeCaracteres",
						"CalcQdeCaracteres split(qtdcaracteres== 426,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3)),",
						"          CD_CRIADO_POR = 'Carga ADF - CargaArqFat') ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoFatFF",
						"CriaColunasParaDestino sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_fat_car_ff_original')]",
				"[concat(variables('factoryId'), '/datasets/arq_fat_validados')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CARGA_ERRO_LAYOUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatCarFNP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Fat"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_fat_car_fnp_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqFatFNP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_fat_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoFatFNP"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['fat','fat/originais'],",
						"     mode: 'read') ~> BuscaLinhasArqFatFNP",
						"BuscaLinhasArqFatFNP derive(qtdcaracteres = length(value)) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(qtdcaracteres== 356,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3)),",
						"          DS_LINHA = value,",
						"          CD_CRIADO_POR = 'Carga ADF - CargaArqFat') ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoFatFNP",
						"CriaColunasParaDestino sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_fat_car_fnp_original')]",
				"[concat(variables('factoryId'), '/datasets/arq_fat_validados')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CARGA_ERRO_LAYOUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatContestadaKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_contestada_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqKenanFatContestada"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_kenan_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoKenanFatContestada"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['kenan','kenan/originais']) ~> BuscaLinhasArqKenanFatContestada",
						"BuscaLinhasArqKenanFatContestada derive(qtdcampos = length(value) - length(replace(value, \";\", \"\"))) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(or(qtdcampos== 16, startsWith(value, 'CONTA_COBRANCA')),",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoKenanFatContestada",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_kenan_contestada_original')]",
				"[concat(variables('factoryId'), '/datasets/arq_kenan_validados')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CARGA_ERRO_LAYOUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatDetalheKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_Detalhe_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqKenanFatDetalhe"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_kenan_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoKenanFatDetalhe"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['kenan','kenan/originais']) ~> BuscaLinhasArqKenanFatDetalhe",
						"BuscaLinhasArqKenanFatDetalhe derive(qtdcampos = length(value) - length(replace(value, \";\", \"\"))) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(or(qtdcampos== 27, startsWith(value, 'CONTA_COBRANCA')),",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoKenanFatDetalhe",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_kenan_Detalhe_original')]",
				"[concat(variables('factoryId'), '/datasets/arq_kenan_validados')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CARGA_ERRO_LAYOUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutFatItemKenan')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Kenan"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_kenan_Item_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqKenanFatItem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_kenan_validados",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoKenanFatItem"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas"
						}
					],
					"transformations": [
						{
							"name": "CalcQdeSeparador"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['kenan','kenan/originais']) ~> BuscaLinhasArqKenanFatItem",
						"BuscaLinhasArqKenanFatItem derive(qtdcampos = length(value) - length(replace(value, \";\", \"\"))) ~> CalcQdeSeparador",
						"CalcQdeSeparador split(or(qtdcampos== 13, startsWith(value, 'CONTA_COBRANCA')),",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Column_1 = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoKenanFatItem",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_kenan_Item_original')]",
				"[concat(variables('factoryId'), '/datasets/arq_kenan_validados')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CARGA_ERRO_LAYOUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutRecebiveisAtlys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Atlys"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_atlys_rcbl_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqRcblAtlys"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_atlys_rcbl_corrigido",
								"type": "DatasetReference"
							},
							"name": "CriaArqValidosRcblAtlys"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidasRcbl"
						}
					],
					"transformations": [
						{
							"name": "CalcQdePipes"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						},
						{
							"name": "TrataAsplasDuplas"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['atlys','atlys/originais']) ~> BuscaLinhasArqRcblAtlys",
						"TrataAsplasDuplas derive(qtdcampos = length(value) - length(replace(value, \"|\", \"\"))) ~> CalcQdePipes",
						"CalcQdePipes split(qtdcampos== 20,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"BuscaLinhasArqRcblAtlys derive(value = replace(value, '\\\"', '')) ~> TrataAsplasDuplas",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqValidosRcblAtlys",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidasRcbl"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_atlys_rcbl_original')]",
				"[concat(variables('factoryId'), '/datasets/arq_atlys_rcbl_corrigido')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CARGA_ERRO_LAYOUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutVivoNextK16')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VivoNext"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_vivo_next_K16_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqVivoNextK16"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_vivo_next_K16_corrigido",
								"type": "DatasetReference"
							},
							"name": "CriaArqValidosVivoNextK16"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidasVivoNextK16"
						}
					],
					"transformations": [
						{
							"name": "CalcQdePipes"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['vivonext','vivonext/originais']) ~> BuscaLinhasArqVivoNextK16",
						"BuscaLinhasArqVivoNextK16 derive(qtdcampos = length(value) - length(replace(value, \"|\", \"\"))) ~> CalcQdePipes",
						"CalcQdePipes split(qtdcampos== 34,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          {Prop_0|Prop_1|Prop_2|Prop_3|Prop_4|Prop_5|Prop_6|Prop_7|Prop_8|Prop_9|Prop_10|Prop_11|Prop_12|Prop_13|Prop_14|Prop_15|Prop_16|Prop_17|Prop_18|Prop_19|Prop_20|Prop_21|Prop_22|Prop_23|Prop_24|Prop_25|Prop_26|Prop_27|Prop_28|Prop_29|Prop_30|Prop_31|Prop_32|Prop_33} as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          {Prop_0|Prop_1|Prop_2|Prop_3|Prop_4|Prop_5|Prop_6|Prop_7|Prop_8|Prop_9|Prop_10|Prop_11|Prop_12|Prop_13|Prop_14|Prop_15|Prop_16|Prop_17|Prop_18|Prop_19|Prop_20|Prop_21|Prop_22|Prop_23|Prop_24|Prop_25|Prop_26|Prop_27|Prop_28|Prop_29|Prop_30|Prop_31|Prop_32|Prop_33} = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqValidosVivoNextK16",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidasVivoNextK16"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_vivo_next_K16_original')]",
				"[concat(variables('factoryId'), '/datasets/arq_vivo_next_K16_corrigido')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CARGA_ERRO_LAYOUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfValidacaoLayoutVivoNextK17')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VivoNext"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "arq_vivo_next_K17_original",
								"type": "DatasetReference"
							},
							"name": "BuscaLinhasArqVivoNext17"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "arq_vivo_next_K17_corrigido",
								"type": "DatasetReference"
							},
							"name": "CriaArqCorrigidoVivoNextK17"
						},
						{
							"dataset": {
								"referenceName": "CVTB_CARGA_ERRO_LAYOUT",
								"type": "DatasetReference"
							},
							"name": "InsereLinhasNaoValidas",
							"description": "Insere linhas não válidas na tabela CVTB_CARGA_ERRO_LAYOUT, ainda sem correção."
						}
					],
					"transformations": [
						{
							"name": "CalcQdePipes"
						},
						{
							"name": "ValidacaoQdeCampos"
						},
						{
							"name": "CriaColunasParaDestino"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pNomeArquivo as string,",
						"     pLoteArquivo as string",
						"}",
						"source(output(",
						"          value as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['vivonext','vivonext/originais']) ~> BuscaLinhasArqVivoNext17",
						"BuscaLinhasArqVivoNext17 derive(qtdepipes = length(value) - length(replace(value, \"|\", \"\"))) ~> CalcQdePipes",
						"CalcQdePipes split(qtdepipes == 18,",
						"     disjoint: false) ~> ValidacaoQdeCampos@(LinhasValidas, LinhasNaoValidas)",
						"ValidacaoQdeCampos@LinhasNaoValidas derive(ID_LOTE_ARQUIVO = toDecimal($pLoteArquivo),",
						"          FL_CORRIGIDO = 'N',",
						"          FL_CORRIGIDO_AUTOMATICO = 'N',",
						"          DS_LINHA = value,",
						"          DT_CRIADO_EM = add(currentTimestamp(), hours(-3))) ~> CriaColunasParaDestino",
						"ValidacaoQdeCampos@LinhasValidas sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          Linha as string",
						"     ),",
						"     partitionFileNames:[($pNomeArquivo)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Linha = value",
						"     ),",
						"     partitionBy('hash', 1)) ~> CriaArqCorrigidoVivoNextK17",
						"CriaColunasParaDestino sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ID_CARGA_ERRO_LAYOUT as decimal(28,0),",
						"          ID_LOTE_ARQUIVO as decimal(28,0),",
						"          FL_CORRIGIDO as string,",
						"          ID_CONTESTACAO as decimal(28,0),",
						"          FL_CORRIGIDO_AUTOMATICO as string,",
						"          DS_LINHA as string,",
						"          DT_CRIADO_EM as timestamp,",
						"          CD_CRIADO_POR as string,",
						"          DT_ATUALIZADO_EM as timestamp,",
						"          CD_ATUALIZADO_POR as string,",
						"          DS_TRATATIVA as string,",
						"          DS_LINHA_RECUPERADA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_LOTE_ARQUIVO,",
						"          FL_CORRIGIDO,",
						"          FL_CORRIGIDO_AUTOMATICO,",
						"          DS_LINHA,",
						"          DT_CRIADO_EM",
						"     )) ~> InsereLinhasNaoValidas"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/arq_vivo_next_K17_original')]",
				"[concat(variables('factoryId'), '/datasets/arq_vivo_next_K17_corrigido')]",
				"[concat(variables('factoryId'), '/datasets/CVTB_CARGA_ERRO_LAYOUT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureBlobStorage1_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureBlobStorage1_properties_groupId')]",
				"fqdns": "[parameters('AzureBlobStorage1_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureBlobStorage1_pe')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureBlobStorage1_pe_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureBlobStorage1_pe_properties_groupId')]",
				"fqdns": "[parameters('AzureBlobStorage1_pe_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureSqlDatabaseConv86')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureSqlDatabaseConv86_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureSqlDatabaseConv86_properties_groupId')]",
				"fqdns": "[parameters('AzureSqlDatabaseConv86_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}